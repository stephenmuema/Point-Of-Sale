package chatbox.messages.bubble;

import javafx.scene.shape.*;

public class Bubble extends Path {


    protected double drawRectBubbleIndicatorRule = 0.2;

    public Bubble(BubbleSpec bubbleSpec) {
        super();
        switch (bubbleSpec) {
            case FACE_BOTTOM:
                break;
            case FACE_LEFT_BOTTOM:
                drawRectBubbleLeftBaselineIndicator();
                break;
            case FACE_LEFT_CENTER:
                drawRectBubbleLeftCenterIndicator();
                break;
            case FACE_RIGHT_BOTTOM:
                drawRectBubbleRightBaselineIndicator();
                break;
            case FACE_RIGHT_CENTER:
                drawRectBubbleRightCenterIndicator();
                break;
            case FACE_TOP:
                drawRectBubbleToplineIndicator();
                break;

            default:
                break;
        }

    }

    private void drawRectBubbleToplineIndicator() {
        getElements().addAll(new MoveTo(1.0f, 1.2f),
                new HLineTo(2.5f),
                new LineTo(2.7f, 1.0f),
                new LineTo(2.9f, 1.2f),
                new HLineTo(4.4f),
                new VLineTo(4f),
                new HLineTo(1.0f),
                new VLineTo(1.2f)
        );
    }

    private void drawRectBubbleRightBaselineIndicator() {
        getElements().addAll(new MoveTo(3.0f, 1.0f),
                new HLineTo(0f),
                new VLineTo(4f),
                new HLineTo(3.0f),
                new LineTo(2.8f, 3.8f),
                new VLineTo(1f)
        );
    }

    private void drawRectBubbleLeftBaselineIndicator() {
        getElements().addAll(new MoveTo(1.2f, 1.0f),
                new HLineTo(3f),
                new VLineTo(4f),
                new HLineTo(1.0f),
                new LineTo(1.2f, 3.8f),
                new VLineTo(1f)
        );
    }

    private void drawRectBubbleRightCenterIndicator() {
        getElements().addAll(new MoveTo(3.0f, 2.5f),
                new LineTo(2.8f, 2.4f),
                new VLineTo(1f),
                new HLineTo(0f),
                new VLineTo(4f),
                new HLineTo(2.8f),
                new VLineTo(2.7f),
                new LineTo(3.0f, 2.5f)
        );
    }

    private void drawRectBubbleLeftCenterIndicator() {
        getElements().addAll(new MoveTo(1.0f, 2.5f),
                new LineTo(1.2f, 2.4f),
                new VLineTo(1f),
                new HLineTo(2.9f),
                new VLineTo(4f),
                new HLineTo(1.2f),
                new VLineTo(2.7f),
                new LineTo(1.0f, 2.5f)
        );
    }


}
package chatbox.messages.bubble;

import javafx.beans.InvalidationListener;
import javafx.beans.Observable;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.geometry.Insets;
import javafx.scene.Node;
import javafx.scene.control.Label;
import javafx.scene.effect.DropShadow;
import javafx.scene.paint.Color;
import javafx.scene.shape.Shape;

public class BubbledLabel extends Label {


    private BubbleSpec bs = BubbleSpec.FACE_LEFT_CENTER;
    private double pading = 5.0;
    private boolean systemCall = false;

    public BubbledLabel() {
        super();
        init();
    }

    public BubbledLabel(String arg0, Node arg1) {
        super(arg0, arg1);
        init();
    }

    public BubbledLabel(String arg0) {
        super(arg0);
        init();
    }

    public BubbledLabel(BubbleSpec bubbleSpec) {
        super();
        this.bs = bubbleSpec;
        init();
    }

    public BubbledLabel(String arg0, Node arg1, BubbleSpec bubbleSpec) {
        super(arg0, arg1);
        this.bs = bubbleSpec;
        init();
    }

    public BubbledLabel(String arg0, BubbleSpec bubbleSpec) {
        super(arg0);
        this.bs = bubbleSpec;
        init();
    }

    private void init() {
        DropShadow ds = new DropShadow();
        ds.setOffsetX(1.3);
        ds.setOffsetY(1.3);
        ds.setColor(Color.DARKGRAY);
        setPrefSize(Label.USE_COMPUTED_SIZE, Label.USE_COMPUTED_SIZE);
        shapeProperty().addListener(new ChangeListener<Shape>() {
            @Override
            public void changed(ObservableValue<? extends Shape> arg0,
                                Shape arg1, Shape arg2) {
                if (systemCall) {
                    systemCall = false;
                } else {
                    shapeIt();
                }
            }
        });

        heightProperty().addListener(new InvalidationListener() {

            @Override
            public void invalidated(Observable arg0) {
                if (!systemCall)
                    setPrefHeight(Label.USE_COMPUTED_SIZE);
            }
        });

        widthProperty().addListener(new InvalidationListener() {

            @Override
            public void invalidated(Observable observable) {
                if (!systemCall)
                    setPrefHeight(Label.USE_COMPUTED_SIZE);
            }
        });

        shapeIt();
    }

    @Override
    protected void updateBounds() {
        super.updateBounds();
        //top right  bottom  left
        switch (bs) {
            case FACE_LEFT_BOTTOM:
                setPadding(new Insets(pading, pading,
                        (this.getBoundsInLocal().getWidth() * ((Bubble) getShape()).drawRectBubbleIndicatorRule) / 2
                                + pading,
                        pading));
                break;
            case FACE_LEFT_CENTER:
                setPadding(new Insets(pading, pading, pading,
                        (this.getBoundsInLocal().getWidth() * ((Bubble) getShape()).drawRectBubbleIndicatorRule) / 2
                                + pading
                ));
                break;
            case FACE_RIGHT_BOTTOM:
                setPadding(new Insets(pading,
                        (this.getBoundsInLocal().getWidth() * ((Bubble) getShape()).drawRectBubbleIndicatorRule) / 2
                                + pading
                        , pading, pading));
                break;
            case FACE_RIGHT_CENTER:
                setPadding(new Insets(pading,
                        (this.getBoundsInLocal().getWidth() * ((Bubble) getShape()).drawRectBubbleIndicatorRule) / 2
                                + pading
                        , pading, pading));
                break;
            case FACE_TOP:
                setPadding(new Insets(
                        (this.getBoundsInLocal().getWidth() * ((Bubble) getShape()).drawRectBubbleIndicatorRule) / 2
                                + pading,
                        pading, pading, pading));
                break;

            default:
                break;
        }
    }

    public final double getPading() {
        return pading;
    }

    public void setPading(double pading) {
        if (pading > 25.0)
            return;
        this.pading = pading;
    }

    public BubbleSpec getBubbleSpec() {
        return bs;
    }

    public void setBubbleSpec(BubbleSpec bubbleSpec) {
        this.bs = bubbleSpec;
        shapeIt();
    }

    private final void shapeIt() {
        systemCall = true;
        setShape(new Bubble(bs));
        System.gc();
    }
}
package chatbox.messages.bubble;

public enum BubbleSpec {


    FACE_TOP, FACE_BOTTOM, FACE_LEFT_BOTTOM, FACE_LEFT_CENTER, FACE_RIGHT_BOTTOM, FACE_RIGHT_CENTER;

}
package chatbox.messages;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.HashMap;

public class Message implements Serializable {

    private String name;
    private MessageType type;
    private String msg;
    private int count;
    private ArrayList<User> list;
    private ArrayList<User> users;

    private Status status;
    private byte[] voiceMsg;
    private String picture;

    public Message() {
    }

    public byte[] getVoiceMsg() {
        return voiceMsg;
    }

    public void setVoiceMsg(byte[] voiceMsg) {
        this.voiceMsg = voiceMsg;
    }

    public String getPicture() {
        return picture;
    }

    public void setPicture(String picture) {
        this.picture = picture;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getMsg() {

        return msg;
    }

    public void setMsg(String msg) {
        this.msg = msg;
    }

    public MessageType getType() {
        return type;
    }

    public void setType(MessageType type) {
        this.type = type;
    }

    public ArrayList<User> getUserlist() {
        return list;
    }

    public void setUserlist(HashMap<String, User> userList) {
        this.list = new ArrayList<>(userList.values());
    }

    public int getOnlineCount() {
        return this.count;
    }

    public void setOnlineCount(int count) {
        this.count = count;
    }

    public ArrayList<User> getUsers() {
        return users;
    }

    public void setUsers(ArrayList<User> users) {
        this.users = users;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }
}
package chatbox.messages;


public enum MessageType {
    DISCONNECTED, CONNECTED, STATUS, USER, SERVER, NOTIFICATION, VOICE
}
package chatbox.messages;


public enum Status {
    ONLINE, AWAY, BUSY
}
package chatbox.messages;

import java.io.Serializable;


public class User implements Serializable {

    String name;
    String picture;
    Status status;

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getPicture() {
        return picture;
    }

    public void setPicture(String picture) {
        this.picture = picture;
    }

    public Status getStatus() {
        return status;
    }

    public void setStatus(Status status) {
        this.status = status;
    }
}
package chatbox.util;

import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.event.EventType;
import javafx.scene.Cursor;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.input.MouseEvent;
import javafx.stage.Stage;

public class ResizeHelper {

    public static void addResizeListener(Stage stage) {
        ResizeListener resizeListener = new ResizeListener(stage);
        stage.getScene().addEventHandler(MouseEvent.MOUSE_MOVED, resizeListener);
        stage.getScene().addEventHandler(MouseEvent.MOUSE_PRESSED, resizeListener);
        stage.getScene().addEventHandler(MouseEvent.MOUSE_DRAGGED, resizeListener);
        stage.getScene().addEventHandler(MouseEvent.MOUSE_EXITED, resizeListener);
        stage.getScene().addEventHandler(MouseEvent.MOUSE_EXITED_TARGET, resizeListener);
        ObservableList<Node> children = stage.getScene().getRoot().getChildrenUnmodifiable();
        for (Node child : children) {
            addListenerDeeply(child, resizeListener);
        }
    }

    public static void addListenerDeeply(Node node, EventHandler<MouseEvent> listener) {
        node.addEventHandler(MouseEvent.MOUSE_MOVED, listener);
        node.addEventHandler(MouseEvent.MOUSE_PRESSED, listener);
        node.addEventHandler(MouseEvent.MOUSE_DRAGGED, listener);
        node.addEventHandler(MouseEvent.MOUSE_EXITED, listener);
        node.addEventHandler(MouseEvent.MOUSE_EXITED_TARGET, listener);
        if (node instanceof Parent) {
            Parent parent = (Parent) node;
            ObservableList<Node> children = parent.getChildrenUnmodifiable();
            for (Node child : children) {
                addListenerDeeply(child, listener);
            }
        }
    }

    static class ResizeListener implements EventHandler<MouseEvent> {
        private Stage stage;
        private Cursor cursorEvent = Cursor.DEFAULT;
        private int border = 4;
        private double startX = 0;
        private double startY = 0;

        public ResizeListener(Stage stage) {
            this.stage = stage;
        }

        @Override
        public void handle(MouseEvent mouseEvent) {
            EventType<? extends MouseEvent> mouseEventType = mouseEvent.getEventType();
            Scene scene = stage.getScene();

            double mouseEventX = mouseEvent.getSceneX(),
                    mouseEventY = mouseEvent.getSceneY(),
                    sceneWidth = scene.getWidth(),
                    sceneHeight = scene.getHeight();

            if (MouseEvent.MOUSE_MOVED.equals(mouseEventType)) {
                if (mouseEventX < border && mouseEventY < border) {
                    cursorEvent = Cursor.NW_RESIZE;
                } else if (mouseEventX < border && mouseEventY > sceneHeight - border) {
                    cursorEvent = Cursor.SW_RESIZE;
                } else if (mouseEventX > sceneWidth - border && mouseEventY < border) {
                    cursorEvent = Cursor.NE_RESIZE;
                } else if (mouseEventX > sceneWidth - border && mouseEventY > sceneHeight - border) {
                    cursorEvent = Cursor.SE_RESIZE;
                } else if (mouseEventX < border) {
                    cursorEvent = Cursor.W_RESIZE;
                } else if (mouseEventX > sceneWidth - border) {
                    cursorEvent = Cursor.E_RESIZE;
                } else if (mouseEventY < border) {
                    cursorEvent = Cursor.N_RESIZE;
                } else if (mouseEventY > sceneHeight - border) {
                    cursorEvent = Cursor.S_RESIZE;
                } else {
                    cursorEvent = Cursor.DEFAULT;
                }
                scene.setCursor(cursorEvent);
            } else if (MouseEvent.MOUSE_EXITED.equals(mouseEventType) || MouseEvent.MOUSE_EXITED_TARGET.equals(mouseEventType)) {
                scene.setCursor(Cursor.DEFAULT);
            } else if (MouseEvent.MOUSE_PRESSED.equals(mouseEventType)) {
                startX = stage.getWidth() - mouseEventX;
                startY = stage.getHeight() - mouseEventY;
            } else if (MouseEvent.MOUSE_DRAGGED.equals(mouseEventType)) {
                if (Cursor.DEFAULT.equals(cursorEvent) == false) {
                    if (Cursor.W_RESIZE.equals(cursorEvent) == false && Cursor.E_RESIZE.equals(cursorEvent) == false) {
                        double minHeight = stage.getMinHeight() > (border * 2) ? stage.getMinHeight() : (border * 2);
                        if (Cursor.NW_RESIZE.equals(cursorEvent) == true || Cursor.N_RESIZE.equals(cursorEvent) == true || Cursor.NE_RESIZE.equals(cursorEvent) == true) {
                            if (stage.getHeight() > minHeight || mouseEventY < 0) {
                                stage.setHeight(stage.getY() - mouseEvent.getScreenY() + stage.getHeight());
                                stage.setY(mouseEvent.getScreenY());
                            }
                        } else {
                            if (stage.getHeight() > minHeight || mouseEventY + startY - stage.getHeight() > 0) {
                                stage.setHeight(mouseEventY + startY);
                            }
                        }
                    }

                    if (Cursor.N_RESIZE.equals(cursorEvent) == false && Cursor.S_RESIZE.equals(cursorEvent) == false) {
                        double minWidth = stage.getMinWidth() > (border * 2) ? stage.getMinWidth() : (border * 2);
                        if (Cursor.NW_RESIZE.equals(cursorEvent) == true || Cursor.W_RESIZE.equals(cursorEvent) == true || Cursor.SW_RESIZE.equals(cursorEvent) == true) {
                            if (stage.getWidth() > minWidth || mouseEventX < 0) {
                                stage.setWidth(stage.getX() - mouseEvent.getScreenX() + stage.getWidth());
                                stage.setX(mouseEvent.getScreenX());
                            }
                        } else {
                            if (stage.getWidth() > minWidth || mouseEventX + startX - stage.getWidth() > 0) {
                                stage.setWidth(mouseEventX + startX);
                            }
                        }
                    }
                }

            }
        }
    }
}package chatbox.util;

 import javax.sound.sampled.*;
 import java.io.ByteArrayInputStream;
 import java.io.IOException;
 import java.io.InputStream;

 /**
  * @author Dominic
  * @since 16-Oct-16
  * Website: www.dominicheal.com
  * Github: www.github.com/DomHeal
  */
 public class VoicePlayback extends VoiceUtil {
     public static void playAudio(byte[] audio) {
         try {
             InputStream input = new ByteArrayInputStream(audio);
             final AudioFormat format = getAudioFormat();
             final AudioInputStream ais = new AudioInputStream(input, format, audio.length / format.getFrameSize());
             DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);
             final SourceDataLine line = (SourceDataLine) AudioSystem.getLine(info);
             line.open(format);
             line.start();

             Runnable runner = new Runnable() {
                 int bufferSize = (int) format.getSampleRate() * format.getFrameSize();
                 byte buffer[] = new byte[bufferSize];

                 public void run() {
                     try {
                         int count;
                         while ((count = ais.read(
                                 buffer, 0, buffer.length)) != -1) {
                             if (count > 0) {
                                 line.write(buffer, 0, count);
                             }
                         }
                     } catch (IOException e) {
                         System.err.println("I/O problems: " + e);
                     } finally {
                         line.drain();
                         line.close();
                     }
                 }
             };
             Thread playThread = new Thread(runner);
             playThread.start();
         } catch (LineUnavailableException e) {
             System.err.println("Line unavailable: " + e);
         }
     }
 }
package chatbox.util;

import javax.sound.sampled.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;


public class VoiceRecorder extends VoiceUtil {

    public static void captureAudio() {
        try {
            final AudioFormat format = getAudioFormat();
            DataLine.Info info = new DataLine.Info(TargetDataLine.class, format);
            final TargetDataLine line = (TargetDataLine) AudioSystem.getLine(info);
            line.open(format);
            line.start();
            Runnable runner = new Runnable() {
                int bufferSize = (int) format.getSampleRate() * format.getFrameSize();
                byte buffer[] = new byte[bufferSize];

                public void run() {
                    out = new ByteArrayOutputStream();
                    isRecording = true;
                    try {
                        while (isRecording) {
                            int count = line.read(buffer, 0, buffer.length);
                            if (count > 0) {
                                out.write(buffer, 0, count);
                            }
                        }
                    } finally {
                        try {
                            out.close();
                            out.flush();
                            line.close();
                            line.flush();
//                            Listener.sendVoiceMessage(out.toByteArray());
//                           todo replace with upload to database
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }
                }
            };
            Thread captureThread = new Thread(runner);
            captureThread.start();
        } catch (LineUnavailableException e) {
            System.err.println("Line unavailable: ");
            e.printStackTrace();
        }
    }
}
package chatbox.util;

import javax.sound.sampled.AudioFormat;
import java.io.ByteArrayOutputStream;


public class VoiceUtil {
    protected static boolean isRecording = false;
    static ByteArrayOutputStream out;

    public static boolean isRecording() {
        return isRecording;
    }

    public static void setRecording(boolean flag) {
        isRecording = flag;
    }

    /**
     * Defines an audio format
     */
    static AudioFormat getAudioFormat() {
        float sampleRate = 16000;
        int sampleSizeInBits = 8;
        int channels = 2;
        boolean signed = true;
        boolean bigEndian = true;
        AudioFormat format = new AudioFormat(sampleRate, sampleSizeInBits,
                channels, signed, bigEndian);
        return format;
    }
}
package Controllers.AuthenticationControllers;

import javafx.animation.FadeTransition;
import javafx.animation.TranslateTransition;
import javafx.event.ActionEvent;
import javafx.event.EventHandler;
import javafx.scene.Node;
import javafx.util.Duration;

public class AnimationGenerator {
    public void applyTranslateAnimationOn(Node node, int duration, double from, double to) {
        TranslateTransition translateTransition
                = new TranslateTransition(Duration.millis(duration), node);
        translateTransition.setFromX(from);
        translateTransition.setToX(to);
        translateTransition.setCycleCount(1);
        translateTransition.setAutoReverse(true);
        translateTransition.play();
    }

    public void applyFadeAnimationOn01(Node node, int duration, double from, double to, int cc, EventHandler<ActionEvent> eventHandler) {
        FadeTransition fadeTransition = new FadeTransition(Duration.millis(duration), node);
        fadeTransition.setOnFinished(eventHandler);
        fadeTransition.setFromValue(from);
        fadeTransition.setToValue(to);
        fadeTransition.setAutoReverse(true);
        fadeTransition.setCycleCount(cc);
        fadeTransition.play();
    }

    public void applyFadeAnimationOn02(Node node, int duration, double from, double to, int cc, EventHandler<ActionEvent> eventHandler) {
        FadeTransition fadeTransition = new FadeTransition(Duration.millis(duration), node);
        fadeTransition.setOnFinished(eventHandler);
        fadeTransition.setFromValue(from);
        fadeTransition.setToValue(to);
        fadeTransition.setAutoReverse(true);
        fadeTransition.setCycleCount(cc);
        fadeTransition.play();
    }

    public void sleeping(Node node, int duration, double from, double to, int cc, EventHandler<ActionEvent> eventHandler) {
        FadeTransition fadeTransition = new FadeTransition(Duration.millis(duration), node);
        fadeTransition.setOnFinished(eventHandler);
        fadeTransition.setFromValue(from);
        fadeTransition.setToValue(to);
        fadeTransition.setAutoReverse(true);
        fadeTransition.setCycleCount(cc);
        fadeTransition.play();
//        Transition transition=new TranslateTransition()
    }

}
package Controllers.AuthenticationControllers;

import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.TextArea;
import javafx.scene.input.*;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Window;
import securityandtime.AesCipher;

import java.awt.*;
import java.io.*;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;
import java.util.ResourceBundle;

import static securityandtime.config.*;

public class LicensingController implements Initializable {
    public AnchorPane panel;
    //    public RadioButton radiotrial;
//    public RadioButton radioactivate;
    public Button getlicensebutton;
    public TextArea licensearea;
    public Button confirm;
    public AnchorPane draggablepane;
    public Button otherproducts;
    String decryptedString;
    String initial;
    private Connection connectionDbLocal;
    private Statement statementLocal;

    {

        try {
            connectionDbLocal = DriverManager.getConnection(localCartDb);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            assert connectionDbLocal != null;
            statementLocal = connectionDbLocal.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
//continue licensing from here
        licensearea.setStyle("-fx-text-inner-color: #13ff97;");
        buttonListeners();
        utilities();
//        radioGroupManager();
    }

//    private void radioGroupManager(){
//        ToggleGroup group=new ToggleGroup();
//        radioactivate.setToggleGroup(group);
//        radioactivate.setSelected(true);
//        radiotrial.setToggleGroup(group);
//        group.selectedToggleProperty().addListener(new ChangeListener<Toggle>() {
//            @Override
//            public void changed(ObservableValue<? extends Toggle> observable, Toggle oldValue, Toggle newValue) {
//                if (group.getSelectedToggle() != null) {
//                    RadioButton button = (RadioButton) group.getSelectedToggle();
//                    System.out.println("Button: " + button.getText());
////                labelInfo.setText("You are " + button.getText());
//                }
//            }
//        });
//
//    }


    private void utilities() {


//        Toolkit.getDefaultToolkit().getSystemClipboard().addFlavorListener(new FlavorListener() {
//            @Override
//            public void flavorsChanged(FlavorEvent e) {
//
//                System.out.println("ClipBoard UPDATED: " + e.getSource() + " " + e.toString());
//                BoardListener boardListener = new BoardListener();
//                boardListener.start();//latest changein the code
//                initial = boardListener.getClipboardContents();
//                licensearea.setText(initial);
//                confirmed();
//
//            }
//        });


        licensearea.setOnKeyPressed(new EventHandler<KeyEvent>() {
            @Override
            public void handle(KeyEvent event) {
                KeyCode keyCode = event.getCode();
                if (keyCode.equals(KeyCode.ENTER)) {
                    confirmed();
                }
            }
        });
        licensearea.setOnDragOver(new EventHandler<DragEvent>() {
            @Override
            public void handle(DragEvent event) {
                if (event.getDragboard().hasFiles()) {
                    event.acceptTransferModes(TransferMode.ANY);
                }
                event.consume();
            }
        });

        licensearea.setOnDragDropped(new EventHandler<DragEvent>() {
            public void handle(DragEvent event) {
                /* data dropped */
                /* if there is a string data on dragboard, read it and use it */
                Dragboard db = event.getDragboard();
                boolean success = false;
                if (db.hasFiles()) {
                    List<File> file = db.getFiles();
                    File f = file.get(0);

                    InputStream is = null;
                    try {
                        is = new FileInputStream(f);
                    } catch (FileNotFoundException e) {
                        e.printStackTrace();
                    }
                    BufferedReader buf = new BufferedReader(new InputStreamReader(is));

                    String line = null;
                    try {
                        line = buf.readLine();
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    StringBuilder sb = new StringBuilder();

                    while (line != null) {
                        sb.append(line).append("\n");
                        try {
                            line = buf.readLine();
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                    }

                    String fileAsString = sb.toString();

                    licensearea.setText(fileAsString);
                    confirmed();
                    success = true;
                }
                /* let the source know whether the string was successfully
                 * transferred and used */
                event.setDropCompleted(success);

                event.consume();
            }
        });
    }

    private void buttonListeners() {

        otherproducts.setOnMousePressed(event -> {
            try {
//                    todo change when created website
                Desktop.getDesktop().browse(new URL("http://localhost/licensing/").toURI());
            } catch (IOException | URISyntaxException e) {
                e.printStackTrace();
            }
        });


        getlicensebutton.setOnMousePressed(event -> {
            try {
//                    todo change when created website
                Desktop.getDesktop().browse(new URL("http://localhost/licensing/").toURI());
            } catch (IOException | URISyntaxException e) {
                e.printStackTrace();
            }
        });


        confirm.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                confirmed();

            }
        });
    }

    public AnchorPane getPanel() {
        return panel;
    }

    public void setPanel(AnchorPane panel) {
        this.panel = panel;
    }

    public Button getGetlicensebutton() {
        return getlicensebutton;
    }

    public void setGetlicensebutton(Button getlicensebutton) {
        this.getlicensebutton = getlicensebutton;
    }

    public TextArea getLicensearea() {
        return licensearea;
    }

    public void setLicensearea(TextArea licensearea) {
        this.licensearea = licensearea;
    }

    public Button getConfirm() {
        return confirm;
    }

    public void setConfirm(Button confirm) {
        this.confirm = confirm;
    }

    public AnchorPane getDraggablepane() {
        return draggablepane;
    }

    public void setDraggablepane(AnchorPane draggablepane) {
        this.draggablepane = draggablepane;
    }

    public Button getOtherproducts() {
        return otherproducts;
    }

    public void setOtherproducts(Button otherproducts) {
        this.otherproducts = otherproducts;
    }

    public String getDecryptedString() {
        return decryptedString;
    }

    public void setDecryptedString(String decryptedString) {
        this.decryptedString = decryptedString;
    }

    public String getInitial() {
        return initial;
    }

    public void setInitial(String initial) {
        this.initial = initial;
    }

    public Connection getConnectionDbLocal() {
        return connectionDbLocal;
    }

    public void setConnectionDbLocal(Connection connectionDbLocal) {
        this.connectionDbLocal = connectionDbLocal;
    }

    public Statement getStatementLocal() {
        return statementLocal;
    }

    public void setStatementLocal(Statement statementLocal) {
        this.statementLocal = statementLocal;
    }

    private void confirmed() {
        String license = licensearea.getText();
        String key = "26kozQaKwRuNJ24t26kozQaKwRuNJ24t";
        decryptedString = AesCipher.decrypt(key, license.substring(0, license.length() - 50000)).getData();
        System.out.println("Key:" + key);
        try {
            FileOutputStream fileOutputStream = null;
            try {
                fileOutputStream = new FileOutputStream(licensepath);
            } catch (FileNotFoundException e) {
                e.printStackTrace();
            }
            try {
                assert fileOutputStream != null;
                fileOutputStream.write(decryptedString.getBytes());
            } catch (IOException e) {
                e.printStackTrace();
            }
            try {
                fileOutputStream.close();
            } catch (IOException e) {
                e.printStackTrace();
            }

            if (decryptedString.split(":::")[0].equals("Trial license")) {
                boolean check = statementLocal.execute("INSERT INTO settings(owner, expirydate,creationdate,type) VALUES ('" + decryptedString.split(":::")[0] + "###" + decryptedString.split(":::")[1] + "','" + Integer.parseInt(decryptedString.split(":::")[2]) + "','" + decryptedString.split(":::")[3] + "','Trial license')");


            } else {
                boolean check = statementLocal.execute("INSERT INTO settings(owner, expirydate,creationdate,type) VALUES ('" + decryptedString.split(":::")[0] + "###" + decryptedString.split(":::")[1] + "','" + Integer.parseInt(decryptedString.split(":::")[2]) + "','" + decryptedString.split(":::")[3] + "','Annual license')");


            }

//            todo check if a viable license has been created
            //if(check){
//    showAlert(Alert.AlertType.INFORMATION,panel.getScene().getWindow(),"SUCCESS","LICENSE REGISTRATION WAS SUCCESSFULL.RESTART THE APPLICATION FOR IT TO TAKE EFFECT");
//
//
//}
//else {
//    showAlert(Alert.AlertType.ERROR,panel.getScene().getWindow(),"ERROR","PLEASE CHECK YOUR LICENSE");
//
//}

        } catch (SQLException e) {
//            showAlert(Alert.AlertType.ERROR,panel.getScene().getWindow(),"ERROR","PLEASE CHECK YOUR LICENSE");

            System.err.println("error creating table");
        }
        if (throwables.size() > 0) {
//            showAlert(Alert.AlertType.ERROR,panel.getScene().getWindow(),"ERROR","PLEASE CHECK YOUR LICENSE");
            throwables.clear();
        }
        licensearea.clear();
        System.out.println(decryptedString.split(":::")[0]);
        System.out.println(decryptedString.split(":::")[1]);
        System.out.println(decryptedString.split(":::")[2]);//expiry
        System.out.println(decryptedString.split(":::")[3]);
        Platform.exit();
        System.exit(1);
    }

    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }
}
package Controllers.AuthenticationControllers;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.*;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.scene.paint.Paint;
import javafx.stage.Window;
import javafx.util.Duration;
import logging.LogClass;
import securityandtime.Security;
import securityandtime.config;

import java.awt.*;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.logging.Level;

import static securityandtime.config.des;
import static securityandtime.config.site;

//end of imports
public class LoginController implements Initializable {

    public Label clock;
    public String emailSubmit, pass;
    @FXML
    Hyperlink link;
    @FXML
    Button login, signup;
    @FXML
    PasswordField password;
    @FXML
    TextField email;
    @FXML
    private
    ImageView imageView;
    @FXML
    private AnchorPane parent;
    @FXML
    private Label message;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
//display different messages
        if (config.login.containsKey("loggedout")) {
            message.setText("YOU ARE LOGGED OUT ");
//            destroy session variables
            config.user.clear();
            config.login.clear();
        } else {
            message.setText("SIGN INTO YOUR ACCOUNT");

        }
//        go to nanotechsoftwares website
        link.setOnMousePressed(event -> {
            try {
//                    todo change when created website
                Desktop.getDesktop().browse(new URL(site).toURI());
            } catch (IOException | URISyntaxException e) {
                e.printStackTrace();
            }
        });

        buttonClick();
        time();
        enterpressed();
    }

    private void enterpressed() {
        email.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                loginValidation();
            }
        });
        password.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                loginValidation();
            }
        });
    }

    //
//method to handle button clicks
    private void buttonClick() {
        signup.setOnMousePressed(new EventHandler<MouseEvent>() {
            //            got to sign up page
            @Override
            public void handle(MouseEvent event) {
                parent.getChildren().removeAll();
                try {
                    parent.getChildren().add(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/signup.fxml"))));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        login.setOnMousePressed(event -> {
//            login and check if fields are empty
            loginValidation();
        });
    }

    private void loginValidation() {
        if (email.getText().isEmpty() || password.getText().isEmpty()) {
            LogClass.getLogger().log(Level.SEVERE, " PLEASE FILL ALL FIELDS");
            showAlert(Alert.AlertType.INFORMATION, parent.getScene().getWindow(),
                    "FILL ALL FIELDS", "PLEASE FILL ALL FIELDS");

        } else {
            login();

        }
    }

    //login method
    private void login() {
//        get input text
        emailSubmit = email.getText();
        pass = password.getText();
        try {
//            create a connection
            Connection connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
            PreparedStatement statement = connection.prepareStatement("SELECT * FROM users WHERE email=? OR employeename=?");
            statement.setString(1, emailSubmit);
            statement.setString(2, emailSubmit);
            ResultSet resultSet = statement.executeQuery();
            if (resultSet.isBeforeFirst()) {
                while (resultSet.next()) {
//                    System.out.println(resultSet.getInt(1)+" "+resultSet.getString(7));
                    if (resultSet.getBoolean(8)) {
                        //if account exists and password matches hashed password
                        if ((resultSet.getString(7).equals(Security.hashPassword(pass)))) {
                            if (resultSet.getBoolean(6)) {
//
//if user account is admin
                                parent.getChildren().removeAll();
                                try {
//                                    go to admin panel
                                    parent.getChildren().add(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panelAdmin.fxml"))));
                                    assert false;
//                                    work as sessions and hold user session data
                                    config.login.put("loggedinasadmin", true);
                                    config.user.put("userName", resultSet.getString("employeename"));

                                    config.user.put("user", resultSet.getString(5));
                                    config.key.put("key", resultSet.getString(3));
//                                    System.out.println(key.get("key"));


                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            } else {
//                                user is not admin go to normal panel
                                parent.getChildren().removeAll();
                                try {
                                    parent.getChildren().add(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panel.fxml"))));
                                    assert false;
                                    //                                    work as sessions and hold user session data
                                    config.user.put("userName", resultSet.getString("employeename"));

                                    config.user.put("user", resultSet.getString(5));
                                    config.login.put("loggedinasemployee", true);

//                                    new ShopController().setTransID(String.valueOf(new Random().nextGaussian()));
                                    //                                    create a new transaction id for local sqlite cart

                                } catch (IOException e) {
                                    e.printStackTrace();
                                }
                            }
                        } else {
//                            if passwords do not match
                            LogClass.getLogger().log(Level.SEVERE, " passwords do not match");
                            showAlert(Alert.AlertType.INFORMATION, parent.getScene().getWindow(),
                                    "WRONG PASSWORD!!", "ENTER THE CORRECT PASSWORD");

                        }
                    } else {
                        showAlert(Alert.AlertType.WARNING, parent.getScene().getWindow(),
                                "Activate your license/account !!", "PLEASE ACTIVATE YOUR ACCOUNT OR INFORM THE EMPLOYER TO RENEW THE LICENSE");

                    }
                }

            } else {
                showAlert(Alert.AlertType.WARNING, parent.getScene().getWindow(),
                        "WRONG NAME/EMAIL !!", "PLEASE RE-ENTER A VALID USER NAME OR EMAIL");
//                System.out.println("resultSet lacks values");
//                LogClass.getLogger().log(Level.SEVERE, " LOGIN ERROR");
//name or email does not exist
            }

        } catch (Exception e) {
            e.printStackTrace();
            message.setText("CHECK YOUR CONNECTION!!");
            message.setTextFill(Paint.valueOf("RED"));
        }
    }

    @FXML
    private void close_app(MouseEvent event) {
        System.exit(0);
    }

    //
//dispaly alert
    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }

    public Label getClock() {
        return clock;
    }

    public void setClock(Label clock) {
        this.clock = clock;
    }

    public String getEmailSubmit() {
        return emailSubmit;
    }

    public void setEmailSubmit(String emailSubmit) {
        this.emailSubmit = emailSubmit;
    }

    public String getPass() {
        return pass;
    }

    public void setPass(String pass) {
        this.pass = pass;
    }

    public Hyperlink getLink() {
        return link;
    }

    public void setLink(Hyperlink link) {
        this.link = link;
    }

    public Button getLogin() {
        return login;
    }

    public void setLogin(Button login) {
        this.login = login;
    }

    public Button getSignup() {
        return signup;
    }

    public void setSignup(Button signup) {
        this.signup = signup;
    }

    public PasswordField getPassword() {
        return password;
    }

    public void setPassword(PasswordField password) {
        this.password = password;
    }

    public TextField getEmail() {
        return email;
    }

    public void setEmail(TextField email) {
        this.email = email;
    }

    public ImageView getImageView() {
        return imageView;
    }

    public void setImageView(ImageView imageView) {
        this.imageView = imageView;
    }

    public AnchorPane getParent() {
        return parent;
    }

    public void setParent(AnchorPane parent) {
        this.parent = parent;
    }

    public Label getMessage() {
        return message;
    }

    public void setMessage(Label message) {
        this.message = message;
    }

    //fetch time each second
//    todo include network time from server  later
    private void time() {
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            //                int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
//                int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
//                int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

            //                    hrs= "0"+String.valueOf(hours-12);
            //            display time
            clock.setText(String.valueOf(new SimpleDateFormat("yyyy-MM-dd  HH:mm:ss a").format(Calendar.getInstance().getTime())));
            //                clock.setText(CheckConn.timelogin().getHours() + ":" + (mins) +":" + (secs)+ " " + pmam);
        }),
                new KeyFrame(Duration.seconds(1))
        );
//        refresh every one second
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }
}
package Controllers.AuthenticationControllers;

import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.TextField;
import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Window;
import javafx.util.Duration;
import logging.LogClass;
import securityandtime.CheckConn;
import securityandtime.Security;

import java.awt.*;
import java.io.IOException;
import java.math.BigInteger;
import java.net.URISyntaxException;
import java.net.URL;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.sql.*;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.logging.Level;

import static securityandtime.config.des;
import static securityandtime.config.site;

//end of imports
public class SignupController implements Initializable {
    public Label clock;
    @FXML
    private PasswordField password, passwordconfirmation;
    @FXML
    private TextField email, name, IDNUMBER, key;
    @FXML
    private Hyperlink link;
    @FXML
    private Button login1, signup1;
    @FXML
    private AnchorPane parent1;

    public Label getClock() {
        return clock;
    }

    public void setClock(Label clock) {
        this.clock = clock;
    }

    public PasswordField getPassword() {
        return password;
    }

    public void setPassword(PasswordField password) {
        this.password = password;
    }

    public PasswordField getPasswordconfirmation() {
        return passwordconfirmation;
    }

    public void setPasswordconfirmation(PasswordField passwordconfirmation) {
        this.passwordconfirmation = passwordconfirmation;
    }

    public TextField getEmail() {
        return email;
    }

    public void setEmail(TextField email) {
        this.email = email;
    }

    public TextField getName() {
        return name;
    }

    public void setName(TextField name) {
        this.name = name;
    }

    public TextField getIDNUMBER() {
        return IDNUMBER;
    }

    public void setIDNUMBER(TextField IDNUMBER) {
        this.IDNUMBER = IDNUMBER;
    }

    public TextField getKey() {
        return key;
    }

    public void setKey(TextField key) {
        this.key = key;
    }

    public Hyperlink getLink() {
        return link;
    }

    public void setLink(Hyperlink link) {
        this.link = link;
    }

    public Button getLogin1() {
        return login1;
    }

    public void setLogin1(Button login1) {
        this.login1 = login1;
    }

    public Button getSignup1() {
        return signup1;
    }

    public void setSignup1(Button signup1) {
        this.signup1 = signup1;
    }

    public AnchorPane getParent1() {
        return parent1;
    }

    public void setParent1(AnchorPane parent1) {
        this.parent1 = parent1;
    }

    @Override
    public void initialize(URL url, ResourceBundle rb) {
//

        link.setOnMousePressed(event -> {
            try {
//                    todo change when created website
                Desktop.getDesktop().browse(new URL(site).toURI());
            } catch (IOException | URISyntaxException e) {
                e.printStackTrace();
            }
        });


        listenEnter();
        time();
        login1.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                parent1.getChildren().removeAll();
                try {
                    parent1.getChildren().add(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml"))));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        signup1.setOnMousePressed(event -> registerUser());
    }

    private void listenEnter() {
        password.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                registerUser();
            }
        });
        passwordconfirmation.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                registerUser();
            }
        });
        email.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                registerUser();
            }
        });
        name.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                registerUser();
            }
        });
        IDNUMBER.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                registerUser();
            }
        });
        key.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                registerUser();
            }
        });
    }

    private void registerUser() {

        if (password.getText().isEmpty() ||
                passwordconfirmation.getText().isEmpty() ||
                email.getText().isEmpty() || name.getText().isEmpty()
                || IDNUMBER.getText().isEmpty() ||
                key.getText().isEmpty()) {
            showAlert(Alert.AlertType.WARNING, parent1.getScene().getWindow(),
                    "Fill all the fields", "Please fill all the fields");
        } else {
            if (!password.getText().equals(passwordconfirmation.getText())) {
                showAlert(Alert.AlertType.INFORMATION, parent1.getScene().getWindow(),
                        "Your passwords don't match", "Please enter matching passwords");
            } else {
//                Connection snm = connectiondb.getConnect();
                try {
                    try {
                        insertion(email, name, IDNUMBER, key, password, passwordconfirmation);
                    } catch (NoSuchAlgorithmException e) {
                        e.printStackTrace();
                    }


                } catch (SQLException e) {
                    LogClass.getLogger().log(Level.SEVERE, " Registration not successful");
                    showAlert(Alert.AlertType.INFORMATION, parent1.getScene().getWindow(),
                            "Transaction unsuccessfull!!", "Registration not successful");
                    e.printStackTrace();
                }

            }
        }
    }

    private void insertion(TextField email, TextField name, TextField IDNUMBER, TextField key, PasswordField password, PasswordField passwordconfirmation) throws SQLException, NoSuchAlgorithmException {
        String str = email.getText() + name.getText() + password.getText() + IDNUMBER.getText() + new java.util.Date().toString();
        MessageDigest messageDigest = MessageDigest.getInstance("MD5");
        messageDigest.update(str.getBytes(), 0, str.length());
        String hash = new BigInteger(1, messageDigest.digest()).toString(16);
        System.out.println("MD5: " + hash);
        Connection connection = DriverManager
                .getConnection(des[2], des[0], des[1]);
        PreparedStatement statementemail = connection.prepareStatement("SELECT * FROM users WHERE email=? ");
        statementemail.setString(1, email.getText());
        ResultSet resultSetemail = statementemail.executeQuery();
        if (resultSetemail.isBeforeFirst()) {
            showAlert(Alert.AlertType.WARNING, parent1.getScene().getWindow(),
                    "EMAIL IN USE", "EMAIL IS IN USE");
//                System.out.println("resultSet lacks values");
            LogClass.getLogger().log(Level.SEVERE, " EMAIL IS IN USE");

        } else {

            PreparedStatement statementname = connection.prepareStatement("SELECT * FROM users WHERE employeename=? ");
            statementname.setString(1, name.getText());
            ResultSet resultSetname = statementname.executeQuery();
            if (resultSetname.isBeforeFirst()) {
                showAlert(Alert.AlertType.WARNING, parent1.getScene().getWindow(),
                        "NAME IN USE", "NAME IS IN USE");
//                System.out.println("resultSet lacks values");
                LogClass.getLogger().log(Level.SEVERE, " NAME IS IN USE");

            } else {
                PreparedStatement preparedStatement = connection.prepareStatement("INSERT INTO users(employeename,email,password, employeeid,activated,hash,subscriberkey)VALUES(?,?,?,?,?,?,?)");

                preparedStatement.setString(1, name.getText());
                preparedStatement.setString(2, email.getText());
                preparedStatement.setString(3, Security.hashPassword(password.getText()));
                preparedStatement.setString(4, IDNUMBER.getText());
                preparedStatement.setBoolean(5, true);
                preparedStatement.setString(6, hash);
                preparedStatement.setString(7, key.getText());
                if (preparedStatement.executeUpdate() > 0) {
                    LogClass.getLogger().log(Level.CONFIG, " Registration successful");
                    showAlert(Alert.AlertType.INFORMATION, parent1.getScene().getWindow(),
                            "Transaction successfull!!", "Registration  successful");
                    parent1.getChildren().removeAll();
                    try {
                        parent1.getChildren().add(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml"))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                } else {
                    LogClass.getLogger().log(Level.SEVERE, " Registration not successful");
                    showAlert(Alert.AlertType.INFORMATION, parent1.getScene().getWindow(),
                            "Transaction unsuccessfull!!", "Registration not successful");
                }

            }
        }
//    Properties properties = System.getProperties();
//    properties.setProperty("mail.smtp.host", config.host);
//    Session session = Session.getDefaultInstance(properties);
//
//    //compose the message
//    try{
//        MimeMessage message = new MimeMessage(session);
//        message.setFrom(new InternetAddress(config.from));
//        message.addRecipient(Message.RecipientType.TO,new InternetAddress(email.getText()));
//        message.setSubject("Account activation for Nanosoft POS software");
//        message.setText("Hello, this is example of sending email");
////        todo change email body and change email properties
//
//        // Send message
//        Transport.send(message);
//        System.out.println("message sent successfully....");
//
//    }catch (MessagingException mex) {mex.printStackTrace();}
    }

    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }

    @FXML
    private void close_app(MouseEvent event) {
        System.exit(0);
    }

    private void time() {
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            String mins = null, hrs = null, secs = null, pmam = null;
            try {
                int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
                int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
                int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

                if (hours >= 12) {
//                    hrs= "0"+String.valueOf(hours-12);
                    pmam = "PM";
                } else {
                    pmam = "AM";

                }
                if (minutes > 9) {
                    mins = String.valueOf(minutes);
                } else {
                    mins = "0" + minutes;

                }
                if (seconds > 9) {
                    secs = String.valueOf(seconds);
                } else {
                    secs = "0" + String.valueOf(seconds);

                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
//                            clock.setText(Calendar.getInstance().getTime().toString());
            clock.setText(String.valueOf(new SimpleDateFormat("yyyy-MM-dd  HH:mm:ss a").format(Calendar.getInstance().getTime())));
        }),
                new KeyFrame(Duration.seconds(1))
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

}

package Controllers.CarWashControllers;

import javafx.fxml.Initializable;

import java.net.URL;
import java.util.ResourceBundle;

public class CarwashCompleteController implements Initializable {
    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {

    }
}
package Controllers.CarWashControllers;

import Controllers.UserAccountManagementControllers.IdleMonitor;
import MasterClasses.CarWashMaster;
import com.itextpdf.text.*;
import com.itextpdf.text.Font;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Window;
import javafx.util.Duration;
import securityandtime.CheckConn;
import securityandtime.config;

import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.mail.*;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import java.awt.*;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.*;
import java.util.Collections;
import java.util.Objects;
import java.util.Properties;
import java.util.ResourceBundle;

import static securityandtime.config.*;

public class CarwashController implements Initializable {
    public Label clock;
    public MenuItem logout;
    public Button delete;
    public Button sendtomail;
    public Button printoutaspdf;

    public Button home;
    public Label cash;
    public Tab pastclients;
    public TableColumn<CarWashMaster, String> Name;
    public TableColumn<CarWashMaster, String> reg;
    public TableColumn<CarWashMaster, String> id;
    public TableColumn<CarWashMaster, String> status;
    public TableColumn<CarWashMaster, String> operator;
    public TableColumn<CarWashMaster, String> payout;
    public MenuItem stores;
    public MenuItem stocks;
    public MenuItem logoutMenu;
    public MenuItem exitMenu;
    public MenuItem accountdetailsMenu;
    public MenuItem helpMenu;
    public MenuItem CreatorsMenu;
    private int moneyPaid;
    @FXML
    private TableView<CarWashMaster> tab;
    @FXML
    private VBox parents;
    private ObservableList<CarWashMaster> data;
    private String time;

    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(3600),
                () -> {
                    try {
                        config.login.put("loggedout", true);
                        parents.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);
        idleMonitor.register(parents, Event.ANY);
        time();
        menuclick();
        buttonclick();
        editable();
        cash.setText(String.valueOf(moneyPaid));
    }

    private void editable() {
        tab.setEditable(true);
        Connection connection = null;

        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Connection finalConnection = connection;
        Name.setCellFactory(TextFieldTableCell.forTableColumn());
        Name.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set `ownername`=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        reg.setCellFactory(TextFieldTableCell.forTableColumn());
        reg.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set registration=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        id.setCellFactory(TextFieldTableCell.forTableColumn());
        id.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set idnumber=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        status.setCellFactory(TextFieldTableCell.forTableColumn());
        status.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            assert finalConnection != null;
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set status=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        operator.setCellFactory(TextFieldTableCell.forTableColumn());
        operator.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set washedby=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );

        payout.setCellFactory(TextFieldTableCell.forTableColumn());
        payout.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set cashpaid=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
    }

    private void buttonclick() {
        data = FXCollections.observableArrayList();
        Connection connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Connection finalConnection = connection;
        home.setOnMouseClicked(event -> {
            try {
                parents.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panelAdmin.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }

        });

        delete.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
//        todo delete
            }
        });
        pastclients.setOnSelectionChanged(event -> {
            data = FXCollections.observableArrayList();
            if (pastclients.isSelected()) {
                populateTable();
            }
        });
        sendtomail.setOnMousePressed(event -> {
//         send audit to email
            generateAudit();
            SendEmail sendEmail = new SendEmail(user.get("user"), "nanotechsoftwarespos@nanotechsoftwares.co.ke", host, time);
            System.out.println(user.get("user"));
        });
        printoutaspdf.setOnMousePressed(event -> {
            generateAudit();
//         export audit as pdf
        });
    }

    private void generateAudit() {
        pdfGen();
        showAlert(Alert.AlertType.INFORMATION, parents.getScene().getWindow(), "OPERATION SUCCESSFUL", "your pdf was generated successfully");
    }

    public Label getClock() {
        return clock;
    }

    public void setClock(Label clock) {
        this.clock = clock;
    }

    public MenuItem getLogout() {
        return logout;
    }

    public void setLogout(MenuItem logout) {
        this.logout = logout;
    }

    public Button getDelete() {
        return delete;
    }

    public void setDelete(Button delete) {
        this.delete = delete;
    }

    public Button getSendtomail() {
        return sendtomail;
    }

    public void setSendtomail(Button sendtomail) {
        this.sendtomail = sendtomail;
    }

    public Button getPrintoutaspdf() {
        return printoutaspdf;
    }

    public void setPrintoutaspdf(Button printoutaspdf) {
        this.printoutaspdf = printoutaspdf;
    }

    public MenuItem getStores() {
        return stores;
    }

    public void setStores(MenuItem stores) {
        this.stores = stores;
    }

    public MenuItem getStocks() {
        return stocks;
    }

    public void setStocks(MenuItem stocks) {
        this.stocks = stocks;
    }

    public Button getHome() {
        return home;
    }

    public void setHome(Button home) {
        this.home = home;
    }

    public Label getCash() {
        return cash;
    }

    public void setCash(Label cash) {
        this.cash = cash;
    }

    public Tab getPastclients() {
        return pastclients;
    }

    public void setPastclients(Tab pastclients) {
        this.pastclients = pastclients;
    }

    public TableColumn<CarWashMaster, String> getName() {
        return Name;
    }

    public void setName(TableColumn<CarWashMaster, String> name) {
        Name = name;
    }

    public TableColumn<CarWashMaster, String> getReg() {
        return reg;
    }

    public void setReg(TableColumn<CarWashMaster, String> reg) {
        this.reg = reg;
    }

    public TableColumn<CarWashMaster, String> getId() {
        return id;
    }

    public void setId(TableColumn<CarWashMaster, String> id) {
        this.id = id;
    }

    public TableColumn<CarWashMaster, String> getStatus() {
        return status;
    }

    public void setStatus(TableColumn<CarWashMaster, String> status) {
        this.status = status;
    }

    public TableColumn<CarWashMaster, String> getOperator() {
        return operator;
    }

    public void setOperator(TableColumn<CarWashMaster, String> operator) {
        this.operator = operator;
    }

    public TableColumn<CarWashMaster, String> getPayout() {
        return payout;
    }

    public void setPayout(TableColumn<CarWashMaster, String> payout) {
        this.payout = payout;
    }

    public int getMoneyPaid() {
        return moneyPaid;
    }

    public void setMoneyPaid(int moneyPaid) {
        this.moneyPaid = moneyPaid;
    }

    public TableView<CarWashMaster> getTab() {
        return tab;
    }

    public void setTab(TableView<CarWashMaster> tab) {
        this.tab = tab;
    }

    public VBox getParents() {
        return parents;
    }

    public void setParents(VBox parents) {
        this.parents = parents;
    }

    public ObservableList<CarWashMaster> getData() {
        return data;
    }

    public void setData(ObservableList<CarWashMaster> data) {
        this.data = data;
    }

    public String getTime() {
        return time;
    }

    public void setTime(String time) {
        this.time = time;
    }

    private void pdfGen() {
        Document document = new Document(PageSize.A4_LANDSCAPE, 20, 20, 20, 20);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        time = timestamp.getTime() + "CARWASHREPORT.pdf";
        System.out.println(time);
        try {
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(time));
        } catch (DocumentException | FileNotFoundException e) {
            e.printStackTrace();
        }
//        cryptography
//        writer.setEncryption("concretepage".getBytes(), "cp123".getBytes(), PdfWriter.ALLOW_COPY, PdfWriter.STANDARD_ENCRYPTION_40);
//        writer.createXmpMetadata();
        document.open();

        Paragraph introtable = new Paragraph("CAR WASH TABLE",

                FontFactory.getFont(FontFactory.HELVETICA,

                        18, Font.BOLDITALIC));
        introtable.setAlignment(Element.ALIGN_CENTER);
        try {
            document.add(introtable);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        Paragraph welcome = new Paragraph("This is the table having all your previous clients");

        try {
            document.add(welcome);
        } catch (DocumentException e) {
            e.printStackTrace();
        }


        PdfPTable t = new PdfPTable(5);

        t.setSpacingBefore(25);

        t.setSpacingAfter(25);

        PdfPCell c1 = new PdfPCell(new Phrase("REGISTRATION"));

        t.addCell(c1);

        PdfPCell c2 = new PdfPCell(new Phrase("NAME"));

        t.addCell(c2);

        PdfPCell c3 = new PdfPCell(new Phrase("ID NUMBER"));

        t.addCell(c3);

        PdfPCell c4 = new PdfPCell(new Phrase("CONTACT"));

        t.addCell(c4);

        PdfPCell c5 = new PdfPCell(new Phrase("MONEY"));

        t.addCell(c5);

//        adding headers
        Connection connection = null;
        try {
            connection = DriverManager.getConnection(des[2], "root", "");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        PreparedStatement statement = null;
        try {
            assert connection != null;
            statement = connection.prepareStatement("SELECT * FROM carwash where status=?");
            statement.setString(1, "COMPLETE");

        } catch (SQLException e) {
            e.printStackTrace();
        }
        ResultSet resultSet = null;
        try {
            resultSet = statement.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        while (true) {
            try {
                assert resultSet != null;
                if (!resultSet.next()) break;
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("registration"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("ownername"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("idnumber"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("contact"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("cashpaid"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        try {
            document.add(t);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
//        audits section
        Paragraph employeeaudits = new Paragraph("CAR WASH TABLE",

                FontFactory.getFont(FontFactory.HELVETICA,

                        18, Font.BOLDITALIC));
        employeeaudits.setAlignment(Element.ALIGN_CENTER);
        try {
            document.add(employeeaudits);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
//        todo add audits
        Paragraph audits = new Paragraph("This is the table having all your car wash audits");
        try {
            document.add(audits);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        document.close();

    }

    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }

    private void populateTable() {
        data = FXCollections.observableArrayList();
        Connection connection = null;

        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
//                        DISPLAYING CLIENTS
            if (connection != null) {
                PreparedStatement statement = connection.prepareStatement("SELECT * FROM carwash where status=?");
                statement.setString(1, "COMPLETED");
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {
                    CarWashMaster carWashMaster1 = new CarWashMaster();
                    System.out.println("name is" + resultSet.getString("ownername"));
                    carWashMaster1.Name.set(resultSet.getString("ownername"));
                    carWashMaster1.regno.set(resultSet.getString("registration"));
                    carWashMaster1.Id.set(resultSet.getString("id"));
                    carWashMaster1.idnum.set(resultSet.getString("idnumber"));
                    carWashMaster1.status.set(resultSet.getString("status"));
                    carWashMaster1.operator.set(resultSet.getString("washedby"));
                    carWashMaster1.cash.set(resultSet.getString("cashpaid"));
                    carWashMaster1.setContact(resultSet.getString("contact"));
//                    int tempmoneyPaid = 0;
//                    tempmoneyPaid += Integer.parseInt(resultSet.getString("cashpaid"));
//                    moneyPaid = tempmoneyPaid;
                    data.add(carWashMaster1);
                }
                tab.setItems(data);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        assert tab != null : "fx:id=\"tab\" was not injected: check your FXML ";
        Name.setCellValueFactory(
                new PropertyValueFactory<>("Name"));
        id.setCellValueFactory(
                new PropertyValueFactory<>("idnum"));
        reg.setCellValueFactory(new PropertyValueFactory<>("regno"));
        status.setCellValueFactory(
                new PropertyValueFactory<>("status"));
        operator.setCellValueFactory(new PropertyValueFactory<>("operator"));
        payout.setCellValueFactory(new PropertyValueFactory<>("cash"));

        tab.refresh();
    }

    public void time() {
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            String mins = null, hrs = null, secs = null, pmam = null;
            try {
                int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
                int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
                int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

                if (hours >= 12) {
//                    hrs= "0"+String.valueOf(hours-12);
                    pmam = "PM";
                } else {
                    pmam = "AM";

                }
                if (minutes > 9) {
                    mins = String.valueOf(minutes);
                } else {
                    mins = "0" + String.valueOf(minutes);

                }
                if (seconds > 9) {
                    secs = String.valueOf(seconds);
                } else {
                    secs = "0" + String.valueOf(seconds);

                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            try {
                clock.setText(CheckConn.timelogin().getHours() + ":" + (mins) + ":" + (secs) + " " + pmam);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }),
                new KeyFrame(Duration.seconds(1))
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

    private void menuclick() {

        stocks.setOnAction(event -> {
            parents.getChildren().removeAll();
            try {
                parents.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/shopFiles/stocks.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
        stores.setOnAction(event -> {
            try {
                parents.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/shopFiles/addshop.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });

        helpMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    Desktop.getDesktop().browse(new URL(sitedocs).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
        CreatorsMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    Desktop.getDesktop().browse(new URL(site).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
        exitMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                Platform.exit();
                System.exit(1);
            }
        });
        logoutMenu.setOnAction(event -> {
            config.login.put("loggedout", true);

            try {
                System.out.println("logging out");
                parents.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    class SendEmail {
        SendEmail(String to, String from, String host, String file) {
            Properties properties = System.getProperties();
            properties.setProperty("mail.smtp.host", host);

            // Get the default Session object.
            Session session = Session.getDefaultInstance(properties);

            try {
                // Create a default MimeMessage object.
                MimeMessage message = new MimeMessage(session);

                // Set From: header field of the header.
                message.setFrom(new InternetAddress(from));

                // Set To: header field of the header.
                message.addRecipient(Message.RecipientType.TO, new InternetAddress(to));

                // Set Subject: header field
                message.setSubject("NANOTECH SOFTWARES POS SYSTEM EMPLOYEE REPORT");

                // Now set the actual message
                BodyPart messageBodyPart = new MimeBodyPart();

                // Fill the message
                messageBodyPart.setText("WE AT NANOTECH SOFTWARES VALUE OUR CUSTOMERS");

                // Create a multipar message
                Multipart multipart = new MimeMultipart();

                // Set text message part
                multipart.addBodyPart(messageBodyPart);

                // Part two is attachment
                messageBodyPart = new MimeBodyPart();
                DataSource source = new FileDataSource(file);
                messageBodyPart.setDataHandler(new DataHandler(source));
                messageBodyPart.setFileName(file);
                multipart.addBodyPart(messageBodyPart);

                // Send the complete message parts
                message.setContent(multipart);


                // Send message
                Transport.send(message);
//                System.out.println("Sent message successfully....");
                showAlert(Alert.AlertType.INFORMATION, parents.getScene().getWindow(), "sent message successfully", "Sent message to your inbox successfully");

            } catch (MessagingException mex) {
                mex.printStackTrace();
            }
        }
    }
}
package Controllers.CarWashControllers;
//deals with cr wash cashiers

import Controllers.UserAccountManagementControllers.IdleMonitor;
import MasterClasses.CarWashMaster;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.geometry.Insets;
import javafx.geometry.Side;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.VBox;
import javafx.scene.text.TextAlignment;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.stage.Window;
import javafx.util.Duration;
import securityandtime.CheckConn;
import securityandtime.config;

import java.awt.*;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.*;
import java.util.Collections;
import java.util.Objects;
import java.util.ResourceBundle;

import static securityandtime.config.*;

public class CarwashSalesController implements Initializable {
    public VBox carWash;
    public Tab clients;
    public TableView<CarWashMaster> tab;
    public TableColumn<CarWashMaster, String> Name;
    public TableColumn<CarWashMaster, String> reg;
    public TableColumn<CarWashMaster, String> id;
    public TableColumn<CarWashMaster, String> status;
    public TableColumn<CarWashMaster, String> operator;
    public TableColumn<CarWashMaster, String> payout;
    public Label clock;
    public Button home;
    public TabPane tabpane;
    public TextField name;
    public TextField registration;
    public TextField contact;
    public TextField identification;
    public Button submit;
    public static int lastSelectedTabIndex = 0;
    public Tab newclients;
    public MenuItem logoutMenu;
    public MenuItem exitMenu;
    public MenuItem accountdetailsMenu;
    public MenuItem CreatorsMenu;
    public MenuItem helpMenu;
    private double tabWidth = 415.0;
    private ObservableList<CarWashMaster> data;

    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        time();
//loadTab();
        editable();
        buttonListeners();
        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(3600),
                () -> {
                    try {
                        config.login.put("loggedout", true);
                        carWash.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);
        idleMonitor.register(carWash, Event.ANY);
        clients.setOnSelectionChanged(event -> {
            data = FXCollections.observableArrayList();
            if (clients.isSelected()) {
                loadTab();
            }
        });
menuclick();
    }


    private void menuclick() {



        helpMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    Desktop.getDesktop().browse(new URL(sitedocs).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
        CreatorsMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    Desktop.getDesktop().browse(new URL(site).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
        exitMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                Platform.exit();
                System.exit(1);
            }
        });
        logoutMenu.setOnAction(event -> {
            config.login.put("loggedout", true);

            try {
//                System.out.println("logging out");
                carWash.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    public VBox getCarWash() {
        return carWash;
    }

    public void setCarWash(VBox carWash) {
        this.carWash = carWash;
    }


    public Tab getClients() {
        return clients;
    }

    public void setClients(Tab clients) {
        this.clients = clients;
    }

    public TableView<CarWashMaster> getTab() {
        return tab;
    }

    public void setTab(TableView<CarWashMaster> tab) {
        this.tab = tab;
    }

    public TableColumn<CarWashMaster, String> getName() {
        return Name;
    }

    public void setName(TextField name) {
        this.name = name;
    }

    public TextField getRegistration() {
        return registration;
    }

    public void setRegistration(TextField registration) {
        this.registration = registration;
    }

    public TextField getContact() {
        return contact;
    }

    public void setContact(TextField contact) {
        this.contact = contact;
    }

    public TextField getIdentification() {
        return identification;
    }

    public void setIdentification(TextField identification) {
        this.identification = identification;
    }

    public Button getSubmit() {
        return submit;
    }

    public void setSubmit(Button submit) {
        this.submit = submit;
    }

    public static int getLastSelectedTabIndex() {
        return lastSelectedTabIndex;
    }

    public static void setLastSelectedTabIndex(int lastSelectedTabIndex) {
        CarwashSalesController.lastSelectedTabIndex = lastSelectedTabIndex;
    }

    public Tab getNewclients() {
        return newclients;
    }

    public void setNewclients(Tab newclients) {
        this.newclients = newclients;
    }

    public double getTabWidth() {
        return tabWidth;
    }

    public void setTabWidth(double tabWidth) {
        this.tabWidth = tabWidth;
    }

    public ObservableList<CarWashMaster> getData() {
        return data;
    }

    public void setData(ObservableList<CarWashMaster> data) {
        this.data = data;
    }

    public void setName(TableColumn<CarWashMaster, String> name) {
        Name = name;
    }

    public TableColumn<CarWashMaster, String> getReg() {
        return reg;
    }

    public void setReg(TableColumn<CarWashMaster, String> reg) {
        this.reg = reg;
    }

    public TableColumn<CarWashMaster, String> getId() {
        return id;
    }

    public void setId(TableColumn<CarWashMaster, String> id) {
        this.id = id;
    }

    public TableColumn<CarWashMaster, String> getStatus() {
        return status;
    }

    public void setStatus(TableColumn<CarWashMaster, String> status) {
        this.status = status;
    }

    public TableColumn<CarWashMaster, String> getOperator() {
        return operator;
    }

    public void setOperator(TableColumn<CarWashMaster, String> operator) {
        this.operator = operator;
    }

    public TableColumn<CarWashMaster, String> getPayout() {
        return payout;
    }

    public void setPayout(TableColumn<CarWashMaster, String> payout) {
        this.payout = payout;
    }

    public Label getClock() {
        return clock;
    }

    public void setClock(Label clock) {
        this.clock = clock;
    }

    public Button getHome() {
        return home;
    }

    public void setHome(Button home) {
        this.home = home;
    }

    public TabPane getTabpane() {
        return tabpane;
    }

    public void setTabpane(TabPane tabpane) {
        this.tabpane = tabpane;
    }

    private void tabpaneStyles() {
        tabpane.setSide(Side.TOP);
        tabpane.setTabMinWidth(tabWidth);
        tabpane.setTabMaxWidth(tabWidth);
        tabpane.setTabMinHeight(tabWidth - 380.0);
        tabpane.setTabMaxHeight(tabWidth - 380.0);
        tabpane.setRotateGraphic(true);

        configureTab(clients, "Existing Jobs");
        configureTab(newclients, "New Jobs");
    }


    private void configureTab(Tab tab, String title) {
        double imageWidth = 40.0;


        Label label = new Label(title);
        label.setMaxWidth(tabWidth - 20);
        label.setPadding(new Insets(5, 0, 0, 0));
        label.setStyle("-fx-text-fill: black; -fx-font-size: 8pt; -fx-font-weight: normal;");
        label.setTextAlignment(TextAlignment.CENTER);

        BorderPane tabPane = new BorderPane();
        tabPane.setRotate(90.0);
        tabPane.setMaxWidth(tabWidth);
        tabPane.setBottom(label);

        /// 6.
        tab.setText("");
        tab.setGraphic(tabPane);
    }


    private void buttonListeners() {
        Connection connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Connection finalConnection = connection;
        submit.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                String ownername = name.getText().toUpperCase();
                String numberplate = registration.getText().toUpperCase();
                String idnum = identification.getText().toUpperCase();
                String contactnumber = contact.getText().toUpperCase();

//
//
//
                if (ownername.isEmpty() || numberplate.isEmpty() || idnum.isEmpty() || contactnumber.isEmpty()) {
                    showAlert(Alert.AlertType.ERROR, carWash.getScene().getWindow(), "FILL ALL FIELDS", "ALL FIELDS SHOULD BE FILLED TO PROCEED");
                } else {
                    PreparedStatement preparedStatement = null;

                    try {
                        assert finalConnection != null;
                        preparedStatement = finalConnection.prepareStatement("INSERT INTO carwash(`ownername`,registration,idnumber,contact,status)VALUES(?,?,?,?,?)");
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                    try {
                        if (preparedStatement != null) {
                            preparedStatement.setString(1, ownername);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    try {
                        if (preparedStatement != null) {
                            preparedStatement.setString(2, numberplate);
                            //                System.out.println("user name=="+user);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    try {
                        if (preparedStatement != null) {
                            preparedStatement.setString(3, idnum);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    try {
                        if (preparedStatement != null) {
                            preparedStatement.setString(4, contactnumber);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    try {
                        if (preparedStatement != null) {
                            preparedStatement.setString(5, "PENDING");
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                    try {
                        //executequery
                        if (preparedStatement != null) {
                            int rows = preparedStatement.executeUpdate();
                            if (rows > 0) {
                                System.out.println(rows);
                                showAlert(Alert.AlertType.INFORMATION, carWash.getScene().getWindow(), "SUCCESS ", "YOUR ITEM WAS ADDED SUCCESSFULLY");
                                name.clear();
                                registration.clear();
                                identification.clear();
                                contact.clear();
                            } else {
                                showAlert(Alert.AlertType.WARNING, carWash.getScene().getWindow(), "  FAILURE", "ERROR WHEN INSERTING ITEMS");

                            }
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }
                }

            }
        });
        home.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                try {
                    carWash.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panel.fxml")))));
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        });
    }

    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }

    private void loadTab() {
        data = FXCollections.observableArrayList();
        Connection connection = null;


//        for (Node n: tab.lookupAll("TableRow")) {
//            if (n instanceof TableRow) {
//                TableRow row = (TableRow) n;
//                if (table.getItems().get(i).getWillPay()) {
//                    row.getStyleClass().add("willPayRow");
//                } else {
//                    row.getStyleClass().add("wontPayRow");
//                }
//                i++;
//                if (i == table.getItems().size())
//                    break;
//            }


        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
//                        DISPLAYING CLIENTS
            if (connection != null) {
                PreparedStatement statement = connection.prepareStatement("SELECT * FROM carwash where status=?");
                statement.setString(1, "PENDING");
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {
                    CarWashMaster carWashMaster1 = new CarWashMaster();
                    carWashMaster1.Name.set(resultSet.getString("ownername"));
                    carWashMaster1.regno.set(resultSet.getString("registration"));
                    carWashMaster1.Id.set(resultSet.getString("id"));
                    carWashMaster1.idnum.set(resultSet.getString("idnumber"));
                    carWashMaster1.status.set(resultSet.getString("status"));
                    carWashMaster1.operator.set(resultSet.getString("washedby"));
                    carWashMaster1.cash.set(resultSet.getString("cashpaid"));
//                    int tempmoneyPaid = 0;
//                    tempmoneyPaid += Integer.parseInt(resultSet.getString("cashpaid"));
//                    moneyPaid = tempmoneyPaid;
                    data.add(carWashMaster1);
                }
                tab.setItems(data);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        assert tab != null : "fx:id=\"tab\" was not injected: check your FXML ";
        Name.setCellValueFactory(
                new PropertyValueFactory<>("Name"));
        id.setCellValueFactory(
                new PropertyValueFactory<>("idnum"));
        reg.setCellValueFactory(new PropertyValueFactory<>("regno"));
        status.setCellValueFactory(
                new PropertyValueFactory<>("status"));
        operator.setCellValueFactory(new PropertyValueFactory<>("operator"));
        payout.setCellValueFactory(new PropertyValueFactory<>("cash"));

        tab.refresh();
    }

    private void editable() {
        tab.setEditable(true);
        Connection connection = null;

        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Connection finalConnection = connection;
        Name.setCellFactory(TextFieldTableCell.forTableColumn());
        Name.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            assert finalConnection != null;
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set `ownername`=? where id=?");
                            preparedStatement.setString(1, newval);
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        reg.setCellFactory(TextFieldTableCell.forTableColumn());
        reg.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set registration=? where id=?");
                            preparedStatement.setString(1, newval);
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        id.setCellFactory(TextFieldTableCell.forTableColumn());
        id.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set idnumber=? where id=?");
                            preparedStatement.setString(1, newval);
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        status.setCellFactory(TextFieldTableCell.forTableColumn());
        status.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set status=? where id=?");
                            preparedStatement.setString(1, newval);
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        operator.setCellFactory(TextFieldTableCell.forTableColumn());
        operator.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set washedby=? where id=?");
                            preparedStatement.setString(1, newval);
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );

        payout.setCellFactory(TextFieldTableCell.forTableColumn());
        payout.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CarWashMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CarWashMaster, String> t) {
                        ((CarWashMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            CarWashMaster carWashMaster = tab.getSelectionModel().getSelectedItem();
                            String id = carWashMaster.getId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE carwash set cashpaid=? where id=?");
                            preparedStatement.setString(1, newval);
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
    }

    public void time() {
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            String mins = null, hrs = null, secs = null, pmam = null;
            try {
                int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
                int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
                int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

                if (hours >= 12) {
//                    hrs= "0"+String.valueOf(hours-12);
                    pmam = "PM";
                } else {
                    pmam = "AM";

                }
                if (minutes > 9) {
                    mins = String.valueOf(minutes);
                } else {
                    mins = "0" + String.valueOf(minutes);

                }
                if (seconds > 9) {
                    secs = String.valueOf(seconds);
                } else {
                    secs = "0" + String.valueOf(seconds);

                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            try {
                clock.setText(CheckConn.timelogin().getHours() + ":" + (mins) + ":" + (secs) + " " + pmam);

            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }),
                new KeyFrame(Duration.seconds(1))
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

    private void compete(){
tab.setOnMouseClicked(new EventHandler<MouseEvent>() {
    @Override
    public void handle(MouseEvent event) {
        if(event.getButton().equals(MouseButton.PRIMARY)){
            if(event.getClickCount()==2){
                CarWashMaster carWashMaster=tab.getSelectionModel().getSelectedItem();
                FXMLLoader fxmlLoader = new FXMLLoader(getClass().getClassLoader().getResource("resourcefiles/carwashFiles/carwashprice.fxml"));
                try {
                    Parent parent = (Parent) fxmlLoader.load();
                    Stage stage = new Stage();
                    stage.setScene(new Scene(parent));
                    stage.initStyle(StageStyle.UNDECORATED);
                    stage.show();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        }
    }
});
    }
}
package Controllers.chats;

import Controllers.UserAccountManagementControllers.IdleMonitor;
import MasterClasses.ChatMaster;
import MasterClasses.OnlineUsersMaster;
import javafx.event.Event;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.layout.BorderPane;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import javafx.util.Duration;
import securityandtime.config;

import java.io.IOException;
import java.net.URL;
import java.util.Collections;
import java.util.Objects;
import java.util.ResourceBundle;

public class ChatController implements Initializable {
    public ListView<MasterClasses.OnlineUsersMaster> userList;
    public Label onlineCountLabel;
    public ListView<MasterClasses.ChatMaster> chatPane;
    public BorderPane borderPane;
    public TextArea messageBox;
    public Button buttonSend;
    public Button recordBtn;
    public HBox onlineUsersHbox;
    public ScrollPane scrollpane;
    public VBox scrollchat;

    public ListView<OnlineUsersMaster> getUserList() {
        return userList;
    }

    public void setUserList(ListView<OnlineUsersMaster> userList) {
        this.userList = userList;
    }

    public Label getOnlineCountLabel() {
        return onlineCountLabel;
    }

    public void setOnlineCountLabel(Label onlineCountLabel) {
        this.onlineCountLabel = onlineCountLabel;
    }

    public ListView<ChatMaster> getChatPane() {
        return chatPane;
    }

    public void setChatPane(ListView<ChatMaster> chatPane) {
        this.chatPane = chatPane;
    }

    public BorderPane getBorderPane() {
        return borderPane;
    }

    public void setBorderPane(BorderPane borderPane) {
        this.borderPane = borderPane;
    }

    public TextArea getMessageBox() {
        return messageBox;
    }

    public void setMessageBox(TextArea messageBox) {
        this.messageBox = messageBox;
    }

    public Button getButtonSend() {
        return buttonSend;
    }

    public void setButtonSend(Button buttonSend) {
        this.buttonSend = buttonSend;
    }

    public Button getRecordBtn() {
        return recordBtn;
    }

    public void setRecordBtn(Button recordBtn) {
        this.recordBtn = recordBtn;
    }

    public HBox getOnlineUsersHbox() {
        return onlineUsersHbox;
    }

    public void setOnlineUsersHbox(HBox onlineUsersHbox) {
        this.onlineUsersHbox = onlineUsersHbox;
    }

    public ScrollPane getScrollpane() {
        return scrollpane;
    }

    public void setScrollpane(ScrollPane scrollpane) {
        this.scrollpane = scrollpane;
    }

    public VBox getScrollchat() {
        return scrollchat;
    }

    public void setScrollchat(VBox scrollchat) {
        this.scrollchat = scrollchat;
    }

    @Override
    public void initialize(URL location, ResourceBundle resources) {

        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(3600),
                () -> {
                    try {
                        config.login.put("loggedout", true);
                        borderPane.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/login.fxml")))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);
        idleMonitor.register(borderPane, Event.ANY);
    }

}
package Controllers.ShopControllers;

import Controllers.UserAccountManagementControllers.IdleMonitor;
import MasterClasses.Storemaster;
import com.itextpdf.text.*;
import com.itextpdf.text.Font;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.beans.value.ChangeListener;
import javafx.beans.value.ObservableValue;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.stage.FileChooser;
import javafx.stage.Window;
import javafx.util.Duration;
import logging.LogClass;
import org.apache.commons.io.FileUtils;
import securityandtime.CheckConn;
import securityandtime.config;

import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.*;
import java.util.Collections;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.logging.Level;

import static securityandtime.config.*;
import static securityandtime.config.site;

public class AddshopController implements Initializable {


    public TableColumn<Storemaster, String> storeName;
    public TableColumn<Storemaster, String> storeLoc;
    public TableColumn<Storemaster, String> employeeNumber;
    public TableColumn<Storemaster, String> storeId;
    public Button storelistaspdf;
    public MenuItem stocksmanager;
    public Button home;
    public MenuItem logoutMenu;
    public MenuItem exitMenu;
    public MenuItem accountdetailsMenu;
    public MenuItem CreatorsMenu;
    public MenuItem helpMenu;
    BufferedImage bufferedImage;
    File file;
    int length;
    @FXML
    private VBox panel;

    @FXML

    private Label clock;
    @FXML

    private TextField storename;
    @FXML
    private TextField storelocation;
    @FXML
    private TextArea description;
    @FXML
    private TextField employeenum;
    @FXML
    private Button addstore;
    @FXML

    private Font x1;
    @FXML
    private Button storeimageselection;
    @FXML
    private ImageView storeimageselected;
    @FXML
    private Button delete;
    @FXML
    private TabPane tabpane;
    @FXML
    private Tab existingstoredtab;
    private ObservableList<Storemaster> data;
    @FXML
    private TableView<Storemaster> tab;
    private EventHandler<ActionEvent> btnLoadEventListener
            = new EventHandler<ActionEvent>() {

        @Override
        public void handle(ActionEvent t) {
            FileChooser fileChooser = new FileChooser();

            //Set extension filter
            FileChooser.ExtensionFilter extFilterPNG = new FileChooser.ExtensionFilter("PNG files (*.png)", "*.PNG");
            FileChooser.ExtensionFilter extFilterALL = new FileChooser.ExtensionFilter("ALL files (*.*)", "*.*");

            FileChooser.ExtensionFilter extFilterJPG = new FileChooser.ExtensionFilter("JPG files (*.jpg)", "*.JPG");
            FileChooser.ExtensionFilter extFilterJPEG = new FileChooser.ExtensionFilter("JPEG files (*.jpeg)", "*.JPEG");
            fileChooser.getExtensionFilters().addAll(extFilterALL, extFilterPNG, extFilterJPG, extFilterJPEG);
            fileChooser.setTitle("SELECT STORE IMAGE");
            //Show open file dialog
            file = fileChooser.showOpenDialog(null);
            length = (int) file.length();
            try {
                bufferedImage = ImageIO.read(file);
                Image image = SwingFXUtils.toFXImage(bufferedImage, null);
                storeimageselected.setImage(image);
            } catch (IOException ex) {
                LogClass.getLogger().log(Level.SEVERE, "image input error");
                showAlert(Alert.AlertType.WARNING, panel.getScene().getWindow(), "ERROR!!", "IMAGE INPUT ERROR");
            }

        }
    };

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        menuclick();
        buttonClick();
        myStores();
        time();
        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(3600),
                () -> {
                    try {
                        config.login.put("loggedout", true);
                        panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);
        idleMonitor.register(panel, Event.ANY);
    }
    private void menuclick() {



        helpMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    Desktop.getDesktop().browse(new URL(sitedocs).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
        CreatorsMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    Desktop.getDesktop().browse(new URL(site).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
        exitMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                Platform.exit();
                System.exit(1);
            }
        });
        logoutMenu.setOnAction(event -> {
            config.login.put("loggedout", true);

            try {
//                System.out.println("logging out");
                panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }
    private void myStores() {
        existingstoredtab.setOnSelectionChanged(new EventHandler<Event>() {
            @Override
            public void handle(Event t) {
                if (existingstoredtab.isSelected()) {
                    data = FXCollections.observableArrayList();
                    Connection connection = null;
                    try {
                        connection = DriverManager
                                .getConnection(des[2], des[0], des[1]);
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                    try {
                        if (connection != null) {
                            PreparedStatement statement = connection.prepareStatement("SELECT * FROM stores WHERE owner=?");
                            statement.setString(1, String.valueOf(user.get("user")));
                            ResultSet resultSet = statement.executeQuery();
                            while (resultSet.next()) {
                                Storemaster storemaster = new Storemaster();
                                System.out.println(resultSet.getString("name"));
                                storemaster.storeName.set(resultSet.getString("name"));
                                storemaster.storeLocation.set(resultSet.getString("location"));
                                storemaster.employeeNumber.set(resultSet.getString("employeenumber"));
                                storemaster.storeId.set(resultSet.getString("id"));
                                data.add(storemaster);
                            }
                            tab.setItems(data);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                    assert tab != null : "fx:id=\"tab\" was not injected: check your FXML ";
                    storeName.setCellValueFactory(
                            new PropertyValueFactory<Storemaster, String>("storeName"));
                    storeLoc.setCellValueFactory(
                            new PropertyValueFactory<Storemaster, String>("storeLocation"));
                    employeeNumber.setCellValueFactory(
                            new PropertyValueFactory<Storemaster, String>("employeeNumber"));
                    storeId.setCellValueFactory(new PropertyValueFactory<Storemaster, String>("storeId"));
                    tab.refresh();
                }
            }
        });
        data = FXCollections.observableArrayList();
        Connection connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            if (connection != null) {
                PreparedStatement statement = connection.prepareStatement("SELECT * FROM stores WHERE owner=?");
                statement.setString(1, String.valueOf(user.get("user")));
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {
                    Storemaster storemaster = new Storemaster();
                    storemaster.storeName.set(resultSet.getString("name"));
                    storemaster.storeLocation.set(resultSet.getString("location"));
                    storemaster.employeeNumber.set(resultSet.getString("employeenumber"));
                    storemaster.storeId.set(resultSet.getString("id"));
                    data.add(storemaster);
                }
                tab.setItems(data);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        assert tab != null : "fx:id=\"tab\" was not injected: check your FXML ";
        storeName.setCellValueFactory(
                new PropertyValueFactory<Storemaster, String>("storeName"));
        storeLoc.setCellValueFactory(
                new PropertyValueFactory<Storemaster, String>("storeLocation"));
        employeeNumber.setCellValueFactory(
                new PropertyValueFactory<Storemaster, String>("employeeNumber"));
        storeId.setCellValueFactory(new PropertyValueFactory<Storemaster, String>("storeId"));

        tableViewActiononClick();
        tab.setEditable(true);
        storeName.setCellFactory(TextFieldTableCell.forTableColumn());
        Connection finalConnection = connection;
        storeName.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<Storemaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<Storemaster, String> t) {
                        ((Storemaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setStoreName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            Storemaster store = tab.getSelectionModel().getSelectedItem();
                            String id = store.getStoreId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE stores set name=? where id=?");
                            preparedStatement.setString(1, newval);
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        storeLoc.setCellFactory(TextFieldTableCell.forTableColumn());
        storeLoc.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<Storemaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<Storemaster, String> t) {
                        ((Storemaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setStoreName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            Storemaster store = tab.getSelectionModel().getSelectedItem();
                            String id = store.getStoreId();
                            preparedStatement = finalConnection.prepareStatement("UPDATE stores set location=? where id=?");
                            preparedStatement.setString(1, newval);
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        employeeNumber.setCellFactory(TextFieldTableCell.forTableColumn());
        employeeNumber.setOnEditCommit(
                t -> {
                    ((Storemaster) t.getTableView().getItems().get(
                            t.getTablePosition().getRow())
                    ).setStoreName(t.getNewValue());
                    String newval = t.getNewValue();
                    PreparedStatement preparedStatement = null;
                    try {
                        Storemaster store = tab.getSelectionModel().getSelectedItem();
                        String id = store.getStoreId();
                        if (finalConnection != null) {
                            preparedStatement = finalConnection.prepareStatement("UPDATE stores set employeenumber=? where id=?");
                        }
                        if (preparedStatement != null) {
                            preparedStatement.setString(1, newval);
                        }
                        if (preparedStatement != null) {
                            preparedStatement.setString(2, id);
                        }
                        if (preparedStatement != null) {
                            preparedStatement.executeUpdate();
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                }
        );


    }

    private void tableViewActiononClick() {
        tab.getSelectionModel().selectedItemProperty().addListener(new ChangeListener() {
            @Override
            public void changed(ObservableValue observableValue, Object oldValue, Object newValue) {
                //Check whether item is selected and set value of selected item to Label
                if (tab.getSelectionModel().getSelectedItem() != null) {
//                System.out.println(store.getStoreId());
//                System.out.println("Selected Row is row " + val);
                    buttonClick();
                }
            }
        });
    }

    private void pdfGen() {
        Document document = new Document(PageSize.A4_LANDSCAPE, 20, 20, 20, 20);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
        String time = String.valueOf(timestamp.getTime() + "storelist.pdf");
        System.out.println(time);
        try {
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(time));
        } catch (DocumentException | FileNotFoundException e) {
            e.printStackTrace();
        }
//        cryptography
//        writer.setEncryption("concretepage".getBytes(), "cp123".getBytes(), PdfWriter.ALLOW_COPY, PdfWriter.STANDARD_ENCRYPTION_40);
//        writer.createXmpMetadata();
        document.open();

        Paragraph introtable = new Paragraph("STORE TABLE",

                FontFactory.getFont(FontFactory.HELVETICA,

                        18, com.itextpdf.text.Font.BOLDITALIC));
        introtable.setAlignment(Element.ALIGN_CENTER);
        try {
            document.add(introtable);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        Paragraph welcome = new Paragraph("This is the table having all your stores");

        try {
            document.add(welcome);
        } catch (DocumentException e) {
            e.printStackTrace();
        }


        PdfPTable t = new PdfPTable(4);

        t.setSpacingBefore(25);

        t.setSpacingAfter(25);

        PdfPCell c1 = new PdfPCell(new Phrase("ID"));

        t.addCell(c1);

        PdfPCell c2 = new PdfPCell(new Phrase("NAME"));

        t.addCell(c2);

        PdfPCell c3 = new PdfPCell(new Phrase("LOCATION"));

        t.addCell(c3);

        PdfPCell c4 = new PdfPCell(new Phrase("EMPLOYEES"));

        t.addCell(c4);
//        adding headers
        Connection connection = null;
        try {
            connection = DriverManager.getConnection(des[2], "root", "");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        PreparedStatement statement = null;
        try {
            assert connection != null;
            statement = connection.prepareStatement("SELECT * FROM stores where owner=? ");
            statement.setString(1, user.get("user"));

        } catch (SQLException e) {
            e.printStackTrace();
        }
        ResultSet resultSet = null;
        try {
            assert statement != null;
            resultSet = statement.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        while (true) {
            try {
                if (!resultSet.next()) break;
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("id"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("name"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("location"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("employeenumber"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        try {
            document.add(t);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
//        audits section
        Paragraph employeeaudits = new Paragraph("EMPLOYEE AUDITS TABLE",

                FontFactory.getFont(FontFactory.HELVETICA,

                        18, com.itextpdf.text.Font.BOLDITALIC));
        employeeaudits.setAlignment(Element.ALIGN_CENTER);
        try {
            document.add(employeeaudits);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        Paragraph audits = new Paragraph("This is the table having all your store audits");
        try {
            document.add(audits);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        document.close();
        showAlert(Alert.AlertType.INFORMATION, panel.getScene().getWindow(), "pdf created successfully", "your pdf was generated successfully");


    }

    //    location,name,incharge,type,date,no of workers
    private void buttonClick() {
        home.setOnAction(event -> {
            try {
                panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panelAdmin.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }

        });
        storelistaspdf.setOnMousePressed(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                pdfGen();
            }
        });

        delete.setOnAction(event -> {
            Storemaster store = tab.getSelectionModel().getSelectedItem();

            try {
                Connection connection = DriverManager
                        .getConnection(des[2], des[0], des[1]);
                PreparedStatement preparedStatement = connection.prepareStatement("DELETE FROM stores WHERE id=?");

                preparedStatement.setString(1, store.getStoreId());
                int updated = preparedStatement.executeUpdate();
                if (updated > 0) {
                    if (existingstoredtab.isSelected()) {
                        data = FXCollections.observableArrayList();
                        try {
                            connection = DriverManager
                                    .getConnection(des[2], des[0], des[1]);
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

                        try {
                            if (connection != null) {
                                PreparedStatement statement = connection.prepareStatement("SELECT * FROM stores WHERE owner=?");
                                statement.setString(1, String.valueOf(user.get("user")));
                                ResultSet resultSet = statement.executeQuery();
                                while (resultSet.next()) {
                                    Storemaster storemaster = new Storemaster();
                                    System.out.println(resultSet.getString("name"));
                                    storemaster.storeName.set(resultSet.getString("name"));
                                    storemaster.storeLocation.set(resultSet.getString("location"));
                                    storemaster.employeeNumber.set(resultSet.getString("employeenumber"));
                                    storemaster.storeId.set(resultSet.getString("id"));
                                    data.add(storemaster);
                                }
                                tab.setItems(data);
                            }
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

                        assert tab != null : "fx:id=\"tab\" was not injected: check your FXML ";
                        storeName.setCellValueFactory(
                                new PropertyValueFactory<Storemaster, String>("storeName"));
                        storeLoc.setCellValueFactory(
                                new PropertyValueFactory<Storemaster, String>("storeLocation"));
                        employeeNumber.setCellValueFactory(
                                new PropertyValueFactory<Storemaster, String>("employeeNumber"));
                        storeId.setCellValueFactory(new PropertyValueFactory<Storemaster, String>("storeId"));
                        tab.refresh();
                    }
                } else {
//                                not updated
                    showAlert(Alert.AlertType.WARNING, panel.getScene().getWindow(), "STORE COULDN'T BE REMOVED SUCCESSFULLY", "THE STORE HAS NOT BEEN REMOVED SUCCESSFULLY");

                }

            } catch (SQLException e) {
                e.printStackTrace();
            }


        });

        addstore.setOnAction(event -> {

            if (storename.getText().isEmpty() || storelocation.getText().isEmpty() || description.getText().isEmpty()) {
                LogClass.getLogger().log(Level.SEVERE, " PLEASE FILL ALL FIELDS");
                showAlert(Alert.AlertType.WARNING, panel.getScene().getWindow(), "FILL ALL FIELDS", "FILL ALL FIELDS"
                );

            } else {
                addstore();

            }
        });
        storeimageselection.setOnAction(btnLoadEventListener);
    }

    private void fetch() {
        data = FXCollections.observableArrayList();
        Connection connection = null;
        try {
            connection = DriverManager.getConnection(des[2], "root", "");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            if (connection != null) {
                PreparedStatement statement = connection.prepareStatement("SELECT * FROM stores WHERE owner=?");
                statement.setString(1, String.valueOf(user));
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {
                    Storemaster storemaster = new Storemaster();
                    storemaster.storeName.set(resultSet.getString("name"));
                    storemaster.storeLocation.set(resultSet.getString("location"));
                    storemaster.employeeNumber.set(resultSet.getString("employeenumber"));
                    storemaster.storeId.set(resultSet.getString("id"));
                    data.add(storemaster);
                }
                tab.setItems(data);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

        assert tab != null : "fx:id=\"tab\" was not injected: check your FXML ";
        storeName.setCellValueFactory(
                new PropertyValueFactory<Storemaster, String>("storeName"));
        storeLoc.setCellValueFactory(
                new PropertyValueFactory<Storemaster, String>("storeLocation"));
        employeeNumber.setCellValueFactory(
                new PropertyValueFactory<Storemaster, String>("employeeNumber"));
        storeId.setCellValueFactory(new PropertyValueFactory<Storemaster, String>("storeId"));
        tab.refresh();
        showAlert(Alert.AlertType.INFORMATION, panel.getScene().getWindow(), "STORE REMOVED SUCCESSFULLY", "THE STORE HAS BEEN REMOVED SUCCESSFULLY");

    }

    /**
     * add store functionality
     */
    private void addstore() {
        String name = storename.getText();
        String location = storelocation.getText();
        String stringdescription = description.getText();
        Connection connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        PreparedStatement preparedStatement = null;
        try {
            assert connection != null;
            preparedStatement = connection.prepareStatement("INSERT INTO stores(name,owner,description, location,employeenumber,image)VALUES(?,?,?,?,?,?)");
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            if (preparedStatement != null) {
                preparedStatement.setString(1, name);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            if (preparedStatement != null) {
                preparedStatement.setString(2, String.valueOf(user.get("user")));
//                System.out.println("user name=="+user);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            if (preparedStatement != null) {
                preparedStatement.setString(3, stringdescription);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            if (preparedStatement != null) {
                preparedStatement.setString(4, location);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        String number = employeenum.getText();


        try {
            Objects.requireNonNull(preparedStatement).setString(5, number);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            try {
                Objects.requireNonNull(preparedStatement).setBinaryStream(6, FileUtils.openInputStream(file), length);
            } catch (IOException e) {
                e.printStackTrace();
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            //executequery
            if (preparedStatement != null) {
                int rows = preparedStatement.executeUpdate();
                if (rows > 0) {
                    System.out.println(rows);
                    showAlert(Alert.AlertType.INFORMATION, panel.getScene().getWindow(), "SUCCESS UPLOADING", "YOUR STORE WAS ADDED SUCCESSFULLY");
                    storename.clear();
                    storelocation.clear();
                    employeenum.clear();
                    storeimageselected.setImage(null);
                    description.clear();


                } else {
                    showAlert(Alert.AlertType.WARNING, panel.getScene().getWindow(), " UPLOADING FAILURE", "ERROR WHEN UPLOADING STORE");

                }
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }

    }





    @FXML
    private void close_app(MouseEvent event) {
        System.exit(0);
    }

    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }

    private void time() {
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            String mins = null, hrs = null, secs = null, pmam = null;
            try {
                int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
                int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
                int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

                if (hours >= 12) {
//                    hrs= "0"+String.valueOf(hours-12);
                    pmam = "PM";
                } else {
                    pmam = "AM";

                }
                if (minutes > 9) {
                    mins = String.valueOf(minutes);
                } else {
                    mins = "0" + minutes;

                }
                if (seconds > 9) {
                    secs = String.valueOf(seconds);
                } else {
                    secs = "0" + String.valueOf(seconds);

                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            try {
                clock.setText(CheckConn.timelogin().getHours() + ":" + (mins) + ":" + (secs) + " " + pmam);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }),
                new KeyFrame(Duration.seconds(1))
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }


    public TableColumn<Storemaster, String> getStoreName() {
        return storeName;
    }

    public void setStoreName(TableColumn<Storemaster, String> storeName) {
        this.storeName = storeName;
    }

    public TableColumn<Storemaster, String> getStoreLoc() {
        return storeLoc;
    }

    public void setStoreLoc(TableColumn<Storemaster, String> storeLoc) {
        this.storeLoc = storeLoc;
    }

    public TableColumn<Storemaster, String> getEmployeeNumber() {
        return employeeNumber;
    }

    public void setEmployeeNumber(TableColumn<Storemaster, String> employeeNumber) {
        this.employeeNumber = employeeNumber;
    }

    public TableColumn<Storemaster, String> getStoreId() {
        return storeId;
    }

    public void setStoreId(TableColumn<Storemaster, String> storeId) {
        this.storeId = storeId;
    }

    public Button getStorelistaspdf() {
        return storelistaspdf;
    }

    public void setStorelistaspdf(Button storelistaspdf) {
        this.storelistaspdf = storelistaspdf;
    }

    public MenuItem getStocksmanager() {
        return stocksmanager;
    }

    public void setStocksmanager(MenuItem stocksmanager) {
        this.stocksmanager = stocksmanager;
    }

    public Button getHome() {
        return home;
    }

    public void setHome(Button home) {
        this.home = home;
    }

    public BufferedImage getBufferedImage() {
        return bufferedImage;
    }

    public void setBufferedImage(BufferedImage bufferedImage) {
        this.bufferedImage = bufferedImage;
    }

    public File getFile() {
        return file;
    }

    public void setFile(File file) {
        this.file = file;
    }

    public int getLength() {
        return length;
    }

    public void setLength(int length) {
        this.length = length;
    }

    public VBox getPanel() {
        return panel;
    }

    public void setPanel(VBox panel) {
        this.panel = panel;
    }



    public Label getClock() {
        return clock;
    }

    public void setClock(Label clock) {
        this.clock = clock;
    }

    public TextField getStorename() {
        return storename;
    }

    public void setStorename(TextField storename) {
        this.storename = storename;
    }

    public TextField getStorelocation() {
        return storelocation;
    }

    public void setStorelocation(TextField storelocation) {
        this.storelocation = storelocation;
    }

    public TextArea getDescription() {
        return description;
    }

    public void setDescription(TextArea description) {
        this.description = description;
    }

    public TextField getEmployeenum() {
        return employeenum;
    }

    public void setEmployeenum(TextField employeenum) {
        this.employeenum = employeenum;
    }

    public Button getAddstore() {
        return addstore;
    }

    public void setAddstore(Button addstore) {
        this.addstore = addstore;
    }



    public Font getX1() {
        return x1;
    }

    public void setX1(Font x1) {
        this.x1 = x1;
    }

    public Button getStoreimageselection() {
        return storeimageselection;
    }

    public void setStoreimageselection(Button storeimageselection) {
        this.storeimageselection = storeimageselection;
    }

    public ImageView getStoreimageselected() {
        return storeimageselected;
    }

    public void setStoreimageselected(ImageView storeimageselected) {
        this.storeimageselected = storeimageselected;
    }

    public Button getDelete() {
        return delete;
    }

    public void setDelete(Button delete) {
        this.delete = delete;
    }

    public TabPane getTabpane() {
        return tabpane;
    }

    public void setTabpane(TabPane tabpane) {
        this.tabpane = tabpane;
    }

    public Tab getExistingstoredtab() {
        return existingstoredtab;
    }

    public void setExistingstoredtab(Tab existingstoredtab) {
        this.existingstoredtab = existingstoredtab;
    }

    public ObservableList<Storemaster> getData() {
        return data;
    }

    public void setData(ObservableList<Storemaster> data) {
        this.data = data;
    }

    public TableView<Storemaster> getTab() {
        return tab;
    }

    public void setTab(TableView<Storemaster> tab) {
        this.tab = tab;
    }

    public EventHandler<ActionEvent> getBtnLoadEventListener() {
        return btnLoadEventListener;
    }

    public void setBtnLoadEventListener(EventHandler<ActionEvent> btnLoadEventListener) {
        this.btnLoadEventListener = btnLoadEventListener;
    }
}
package Controllers.ShopControllers;

import Controllers.UserAccountManagementControllers.IdleMonitor;
import MasterClasses.EmployeeMaster;
import MasterClasses.SalesMaster;
import com.itextpdf.text.Font;
import com.itextpdf.text.*;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Window;
import javafx.util.Duration;
import securityandtime.CheckConn;
import securityandtime.config;

import java.awt.*;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.*;
import java.util.Collections;
import java.util.Objects;
import java.util.ResourceBundle;

import static securityandtime.config.des;
import static securityandtime.config.site;

public class AuditController implements Initializable {
    public TabPane maintabpane;//maintabpane
    public Tab tabemployeeaudits;//employee audits tab

    //table of employees
    public TableView <EmployeeMaster>tableemployeelist;
    public TableColumn <EmployeeMaster,String> employeeid;
    public TableColumn <EmployeeMaster,String> employeename;
    public TableColumn <EmployeeMaster,String> employeeemail;
    private ObservableList<EmployeeMaster> employeeMasterObservableList = FXCollections.observableArrayList();
//done
    //endof table
    //get search parameters
    public TextField tf1period;
    public Button querytf1;
    //end search
//    table of sales for each selected employee
    public TableView <SalesMaster>tableemployeesales;
    public TableColumn <SalesMaster,String> employeetransid;
    public TableColumn <SalesMaster,String> transprice;
    public TableColumn <SalesMaster,String> transpaid;
    public TableColumn <SalesMaster,String> transmethod;
    public TableColumn <SalesMaster,String> transbalance;
    public TableColumn <SalesMaster,String> transcompletion;
    private ObservableList<SalesMaster> salesMasterObservableList = FXCollections.observableArrayList();
//
//done
//    end of table of sales per employee
    public Button showempperformancegraph;//show selected employee performance graphon new window
    public Button exportfirstempreport;//export employee reportfselectedemployee
    public Tab tabsalesaudits;//tab of sales

    //search
//    public TextField tf2period;//get period
//    public Button querytf2;//search period todo v1.2
    //    endof search
//    table for sales per category
//    public TableView <CategorySalesMasterClass> categorysalestable;
//    public TableColumn <CategorySalesMasterClass,String> categorysalesname;
//    public TableColumn <CategorySalesMasterClass,String> categorysalesid;
//    public TableColumn <CategorySalesMasterClass,String> categorysalespayout;
//    public TableColumn <CategorySalesMasterClass,String> categorysalessalesperday;
//    private ObservableList<CategorySalesMasterClass> categorySalesMasterClassObservableList = FXCollections.observableArrayList();
//todo use in v1.2
    //tableofsales of specific items
//    public TableView <ItemStocksMaster>itemsalestable;
//    public TableColumn <ItemStocksMaster,String> itemsalesid;
//    public TableColumn <ItemStocksMaster,String> itemsalesname;
//    public TableColumn <ItemStocksMaster,String> itemsalespayout;
//    public TableColumn <ItemStocksMaster,Double> itemsalessalesperday;
//    public TableColumn <ItemStocksMaster,String> itemsalessalesremainingstock;
//    private ObservableList<ItemStocksMaster> itemStocksMasterObservableList = FXCollections.observableArrayList();
//todo use in v1.2
// todo v1.2
    //end of table for sales per category
//    public Tab tabcapandcost;//tab of capital and costs incurred// todo v1.2
//    public TabPane tapaneinnercapitalandcost;// todo v1.2
//    public Tab pastcosts;//past costs// todo v1.2
//    //past costs table// todo v1.2
//    public TableView pastcoststable;// todo v1.2
//    public TableColumn pastcoststableid;// todo v1.2
//    public TableColumn pastcoststablename;// todo v1.2
//    public TableColumn pastcoststabledateadded;// todo v1.2
//    public TableColumn pastcoststableamount;// todo v1.2
//    public TableColumn pastcoststableactiveinactivestatus;// todo v1.2
    //end of past costs table
//    new costs tab
//    public Tab newcosts;// todo v1.2
//    public Button newcostssubmit;// todo v1.2
//    //insert cost
//    public TextField newcostsamount;// todo v1.2
//    //amount
//    public TextField newcostsname;// todo v1.2
//    //name
//    public TextField newcostsactiveinactivestatus;// todo v1.2
//    //status
//    public DatePicker newcostsdatecreated;// todo v1.2

    //creation date
//    future plans tab// todo v1.2
//    public Tab tabfutureplans;// todo v1.2
//    public TextField tabfutureplansname;// todo v1.2
//    //get nameof plan// todo v1.2
//    public TextArea tabfutureplansdescription;// todo v1.2
//    //get description of plan
//    public Button tabfutureplanssubmit;// todo v1.2
//    //submit plan
//    public DatePicker tabfutureplansdateofimplementation;// todo v1.2
    //get date of implementation of plan(to be used in reminder)
    public Tab tabstockalerts;
    //tab of alerts
    public TableView stockalerttable;
    //table of alerts
    public TableColumn stockalerttableid;
    public TableColumn stockalerttablename;
    public TableColumn stockalerttabledate;
    public TableColumn stockalerttablemarkasread;
    public Tab taballaudits;
    //tab of all audits for exports or graphical viewing
    public Button exportfullreport;
    public Button exportcategoryreport;
    public Button exportemployeereport;
    public Button getdetailedgraph;
    public Button getcateegorygraph;
    public Button getemployeegraph;
    public Label clock;
    public MenuItem logoutmenu;
    public MenuItem importmenu;
    public MenuItem quitmenu;
    public MenuItem getdocumentation;
    public VBox panel;


    public Button topanelbutton;
    public Button tocarwashbutton;
    public Button toemployeesbutton;
    public Button logoutbutton;
    public Button tosupplierbutton;

//db connection
Connection connection;

    {
        try {
            connection = DriverManager
                            .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(900),
                () -> {
                    try {
                        config.login.put("loggedout", true);

                        panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);

menuListeners();
buttonListeners();
navigatoryButtonListeners();
loadTables();
time();
    }

    private void navigatoryButtonListeners() {
         topanelbutton.setOnMouseClicked(new EventHandler<MouseEvent>() {
             @Override
             public void handle(MouseEvent event) {
                 try {
                     panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panelAdmin.fxml")))));
                 } catch (IOException e) {
                     e.printStackTrace();
                 }

             }
         });
         tocarwashbutton.setOnMouseClicked(new EventHandler<MouseEvent>() {
             @Override
             public void handle(MouseEvent event) {
                 try {
                     panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/carwashFiles/carwash.fxml")))));
                 } catch (IOException e) {
                     e.printStackTrace();
                 }
             }
         });
        toemployeesbutton.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                try {
                    panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/employees.fxml")))));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
         logoutbutton.setOnMouseClicked(new EventHandler<MouseEvent>() {
             @Override
             public void handle(MouseEvent event) {
                 logout();
             }
         });
        tosupplierbutton.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                try {
                    //todo change link to supplier site
                    Desktop.getDesktop().browse(new URL(site).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
    }

    private void menuListeners() {
        logoutmenu.setOnAction(event -> {
            logout();
        });
        importmenu.setOnAction(event -> {
//todo import data from file
        });
        quitmenu.setOnAction(event -> {
            System.exit(1);
            Platform.exit();
        });
        getdocumentation.setOnAction(event -> {
            try {
                //todo change link to documentation page
                Desktop.getDesktop().browse(new URL(site).toURI());
            } catch (IOException e) {
                e.printStackTrace();
            } catch (URISyntaxException e) {
                e.printStackTrace();
            }
        });
    }

    private void logout() {
        config.login.put("loggedout", true);

        try {
            panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    private void buttonListeners() {

    }
    private void loadTables(){
        loadCashiersTable();
        loadCashierSalesTable();
//        loadSpecificItemsTable();// todo v1.2
//        loadCategoricalSalesTable();// todo v1.2
//        costsTableAndInput();// todo v1.2
    }
    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }

    // todo v1.2

//    private void costsTableAndInput() {
////        public TextField newcostsamount;
////    //amount
////    public TextField newcostsname;
////    //name
////    public TextField newcostsactiveinactivestatus;
////    //status
////    public DatePicker newcostsdatecreated;
//newcostssubmit.setOnMouseClicked(event -> {
//    if(newcostsamount.getText().isEmpty()||newcostsname.getText().isEmpty()||newcostsactiveinactivestatus.getText().isEmpty()||newcostsdatecreated.getConverter().toString().isEmpty()){
//        showAlert(Alert.AlertType.ERROR,panel.getScene().getWindow(),"FILL ALL FIELDS","FILL ALL FIELDS TO PROCEED");
//    }
//    else{
//        String cost=newcostsamount.getText().toUpperCase();
//        String name=newcostsname.getText().toUpperCase();
//        String status=newcostsactiveinactivestatus.getText().toUpperCase();
//        String date=newcostsdatecreated.getConverter().toString();
//        newcostsname.clear();


//        newcostsamount.clear();
//        newcostsactiveinactivestatus.clear();
//
//        if(!status.equals("active".toUpperCase())||!status.equals("inactive".toUpperCase())){
//            showAlert(Alert.AlertType.INFORMATION,panel.getScene().getWindow()
//                    ,"WRONG INPUT","STATUS CAN ONLY BE ACTIVE OR INACTIVE");
//
//        }
//        else{
//            try{
//                PreparedStatement insertCosts=connection.prepareStatement("INSERT INTO costs(name,amount,date,status)VALUES (?,?,?,?)");
//                insertCosts.setString(1,name);
//                insertCosts.setString(2,cost);
//                insertCosts.setString(3,date);
//                insertCosts.setString(4,status);
//
//                insertCosts.executeUpdate();
//            }
//            catch (SQLException e){
//                e.printStackTrace();
//            }
//        }
//
//    }
//});
//
//    }

//    private void loadSpecificItemsTable() {
////  public TableView <ItemStocksMaster>itemsalestable;
////    public TableColumn <ItemStocksMaster,String> itemsalesid;
////    public TableColumn <ItemStocksMaster,String> itemsalesname;
////    public TableColumn <ItemStocksMaster,String> itemsalespayout;
////    public TableColumn <ItemStocksMaster,Double> itemsalessalesperday;
////    public TableColumn <ItemStocksMaster,String> itemsalessalesremainingstock;
////    private ObservableList<ItemStocksMaster> itemStocksMasterObservableList = FXCollections.observableArrayList();
//
//        try {
//            PreparedStatement preparedStatement=connection.prepareStatement("SELECT * FROM solditems");
//            ResultSet rs=preparedStatement.executeQuery();
//            HashMap<String,Integer>exists=new HashMap<>();
//            HashMap<String,Integer>cash=new HashMap<>();
//            while(rs.next()){
//String keys=rs.getString("name");
//Integer count= Integer.valueOf(rs.getString("quantitysold"));
//Integer cashperunit= Integer.valueOf(rs.getString("price"));
//if(exists.containsKey(keys)){
//    exists.replace(keys,exists.get(keys),exists.get(keys)+count);
//    cash.replace(keys,cash.get(keys),cash.get(keys)+(count*cashperunit));
//
//}else{
//    exists.put(keys,count);
//    cash.put(keys,cashperunit*count);
//}
//            }
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//
//
//        itemsalestable.setItems(itemStocksMasterObservableList);
//        assert itemsalestable != null : "fx:id=\"tab\" was not injected: check your FXML ";
//        itemsalesname.setCellValueFactory(
//                new PropertyValueFactory<>("Name"));
//        itemsalesid.setCellValueFactory(
//                new PropertyValueFactory<>("Id"));
//        itemsalespayout.setCellValueFactory(new PropertyValueFactory<>("payout"));
//        itemsalessalesperday.setCellValueFactory(new PropertyValueFactory<>("salesperday"));
//        itemsalessalesremainingstock.setCellValueFactory(new PropertyValueFactory<>("quantity"));
//
//        itemsalestable.refresh();
//    }
// todo v1.2

//    private void loadCategoricalSalesTable() {
//
///*
//         public TableView <CategorySalesMasterClass> categorysalestable;
//    public TableColumn <CategorySalesMasterClass,String> categorysalesname;
//    public TableColumn <CategorySalesMasterClass,String> categorysalesid;
//    public TableColumn <CategorySalesMasterClass,String> categorysalespayout;
//    public TableColumn <CategorySalesMasterClass,String> categorysalessalesperday;
// done with these
//fetch from sold,group by category,display by category
//use a map for category name and sring name
//use a map for category id and sring id
//use a map for category payout and sring payout
//use a map for category avgsalesperday and sring sales/day value
//hold these map objects in a list
//*/
////first insert into tableofcategoricalsales
//
//
//        try {
//            if (connection != null) {
//                PreparedStatement statement = connection.prepareStatement("SELECT * FROM solditems group by category");
////                                statement.setString(1, String.valueOf(key.get("key")));
////                                statement.setBoolean(2, false);
//                ResultSet resultSet = statement.executeQuery();
//                while (resultSet.next()) {
//                    CategorySalesMasterClass selectedCategoricalSale = new CategorySalesMasterClass();
////                    todo continue tomorrow
////                    selectedCategoricalSale.setName(resultSet.getString("employeename"));
////                    selectedCategoricalSale.setEmail(resultSet.getString("email"));
////                    selectedCategoricalSale.setId(resultSet.getString("id"));
//                    categorySalesMasterClassObservableList.add(selectedCategoricalSale);
//                }
//                categorysalestable.setItems(categorySalesMasterClassObservableList);
//
//
//
//                assert categorysalestable != null : "fx:id=\"categorysalestable\" was not injected: check your FXML ";
//                categorysalesname.setCellValueFactory(
//                        new PropertyValueFactory<>("categorysalesname"));
//                categorysalesid.setCellValueFactory(
//                        new PropertyValueFactory<>("categorysalesid"));
//                categorysalespayout.setCellValueFactory(new PropertyValueFactory<>("categorysalespayout"));
//                categorysalessalesperday.setCellValueFactory(new PropertyValueFactory<>("categorysalessalesperday"));
//                categorysalestable.refresh();
//
//            }
//        } catch (SQLException e) {
//            e.printStackTrace();
//        }
//
//    }
//todo add v1.2// todo v1.2
    private void loadCashiersTable(){
        try {
//                        DISPLAYING EMPLOYEES
            if (connection != null) {
                PreparedStatement statement = connection.prepareStatement("SELECT * FROM users ");
//                                statement.setString(1, String.valueOf(key.get("key")));
//                                statement.setBoolean(2, false);
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {
                    EmployeeMaster employeeMaster = new EmployeeMaster();
                    employeeMaster.setName(resultSet.getString("employeename"));
                    employeeMaster.setEmail(resultSet.getString("email"));
                    employeeMaster.setId(resultSet.getString("id"));
                    employeeMasterObservableList.add(employeeMaster);
                }
                tableemployeelist.setItems(employeeMasterObservableList);



                assert tableemployeelist != null : "fx:id=\"tab\" was not injected: check your FXML ";
                employeename.setCellValueFactory(
                        new PropertyValueFactory<>("Name"));
                employeeid.setCellValueFactory(
                        new PropertyValueFactory<>("Id"));
                employeeemail.setCellValueFactory(new PropertyValueFactory<>("email"));
                tableemployeelist.refresh();

            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }
    private void loadCashierSalesTable(){
        tableemployeelist.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                salesMasterObservableList.clear();
                EmployeeMaster selectedEmployee=tableemployeelist.getSelectionModel().getSelectedItem();
                try {
                    PreparedStatement preparedStatement=connection.prepareStatement("SELECT  * FROM sales WHERE seller=?");
                    preparedStatement.setString(1,selectedEmployee.getEmail());
                    ResultSet salesResultSet=preparedStatement.executeQuery();
                    while(salesResultSet.next()){


                        SalesMaster salesMaster=new SalesMaster();
                        salesMaster.setEmployeetransid(salesResultSet.getString("transactionid"));
                        salesMaster.setTransbalance(salesResultSet.getString("balance"));
                        salesMaster.setTranscompletion(salesResultSet.getString("completed"));
                        salesMaster.setTransmethod(salesResultSet.getString("method"));
                        salesMaster.setTranspaid(salesResultSet.getString("moneypaid"));
                        salesMaster.setTransprice(salesResultSet.getString("cash"));
                        salesMasterObservableList.add(salesMaster);
                    }
                    tableemployeesales.setItems(salesMasterObservableList);

                    assert tableemployeesales != null : "fx:id=\"tableemployeesales\" was not injected: check your FXML ";
                    transprice.setCellValueFactory(
                            new PropertyValueFactory<>("transprice"));
                    employeetransid.setCellValueFactory(
                            new PropertyValueFactory<>("employeetransid"));
                    transpaid.setCellValueFactory(new PropertyValueFactory<>("transpaid"));
                    transmethod.setCellValueFactory(new PropertyValueFactory<>("transmethod"));
                    transbalance.setCellValueFactory(new PropertyValueFactory<>("transbalance"));
                    transcompletion.setCellValueFactory(new PropertyValueFactory<>("transcompletion"));
                    tableemployeelist.refresh();
                } catch (SQLException e) {
                    e.printStackTrace();
                }

            }

        });


    }
//    fixme template pdf generator
    private void pdfGenTemplate() {
        Document document = new Document(PageSize.A4_LANDSCAPE, 20, 20, 20, 20);
        Timestamp timestamp = new Timestamp(System.currentTimeMillis());
       String time = String.valueOf(timestamp.getTime() + "employeesreport.pdf");
        System.out.println(time);
        try {
            PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(time));
        } catch (DocumentException | FileNotFoundException e) {
            e.printStackTrace();
        }
//        cryptography
//        writer.setEncryption("concretepage".getBytes(), "cp123".getBytes(), PdfWriter.ALLOW_COPY, PdfWriter.STANDARD_ENCRYPTION_40);
//        writer.createXmpMetadata();
        document.open();

        Paragraph introtable = new Paragraph("EMPLOYEE TABLE",

                FontFactory.getFont(FontFactory.HELVETICA,

                        18, com.itextpdf.text.Font.BOLDITALIC));
        introtable.setAlignment(Element.ALIGN_CENTER);
        try {
            document.add(introtable);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        Paragraph welcome = new Paragraph("This is the table having all your employees");

        try {
            document.add(welcome);
        } catch (DocumentException e) {
            e.printStackTrace();
        }


        PdfPTable t = new PdfPTable(3);

        t.setSpacingBefore(25);

        t.setSpacingAfter(25);

        PdfPCell c1 = new PdfPCell(new Phrase("ID"));

        t.addCell(c1);

        PdfPCell c2 = new PdfPCell(new Phrase("NAME"));

        t.addCell(c2);

        PdfPCell c3 = new PdfPCell(new Phrase("EMAIL"));

        t.addCell(c3);

//        adding headers
        Connection connection = null;
        try {
            connection = DriverManager.getConnection(des[2], "root", "");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        PreparedStatement statement = null;
        try {
            statement = connection.prepareStatement("SELECT * FROM users  ");
//            WHERE subscriberkey=? and admin=?
//            statement.setString(1, key.get("key"));
//            statement.setBoolean(2, false);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        ResultSet resultSet = null;
        try {
            resultSet = statement.executeQuery();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        while (true) {
            try {
                if (!resultSet.next()) break;
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("id"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("employeename"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                t.addCell(resultSet.getString("email"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        try {
            document.add(t);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
//        audits section
        Paragraph employeeaudits = new Paragraph("EMPLOYEE AUDITS TABLE",

                FontFactory.getFont(FontFactory.HELVETICA,

                        18, Font.BOLDITALIC));
        employeeaudits.setAlignment(Element.ALIGN_CENTER);
        try {
            document.add(employeeaudits);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        Paragraph audits = new Paragraph("This is the table having all your employees audits");
        try {
            document.add(audits);
        } catch (DocumentException e) {
            e.printStackTrace();
        }
        document.close();

    }

    public void time() {
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            String mins = null, hrs = null, secs = null, pmam = null;
            try {
                int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
                int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
                int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

                if (hours >= 12) {
//                    hrs= "0"+String.valueOf(hours-12);
                    pmam = "PM";
                } else {
                    pmam = "AM";

                }
                if (minutes > 9) {
                    mins = String.valueOf(minutes);
                } else {
                    mins = "0" + String.valueOf(minutes);

                }
                if (seconds > 9) {
                    secs = String.valueOf(seconds);
                } else {
                    secs = "0" + String.valueOf(seconds);

                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            try {
                clock.setText(CheckConn.timelogin().getHours() + ":" + (mins) + ":" + (secs) + " " + pmam);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }),
                new KeyFrame(Duration.seconds(1))
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }
    public TabPane getMaintabpane() {
        return maintabpane;
    }

    public void setMaintabpane(TabPane maintabpane) {
        this.maintabpane = maintabpane;
    }

    public Tab getTabemployeeaudits() {
        return tabemployeeaudits;
    }

    public void setTabemployeeaudits(Tab tabemployeeaudits) {
        this.tabemployeeaudits = tabemployeeaudits;
    }

    public TableView<EmployeeMaster> getTableemployeelist() {
        return tableemployeelist;
    }

    public void setTableemployeelist(TableView<EmployeeMaster> tableemployeelist) {
        this.tableemployeelist = tableemployeelist;
    }

    public TableColumn<EmployeeMaster, String> getEmployeeid() {
        return employeeid;
    }

    public void setEmployeeid(TableColumn<EmployeeMaster, String> employeeid) {
        this.employeeid = employeeid;
    }

    public TableColumn<EmployeeMaster, String> getEmployeename() {
        return employeename;
    }

    public void setEmployeename(TableColumn<EmployeeMaster, String> employeename) {
        this.employeename = employeename;
    }

    public TableColumn<EmployeeMaster, String> getEmployeeemail() {
        return employeeemail;
    }

    public void setEmployeeemail(TableColumn<EmployeeMaster, String> employeeemail) {
        this.employeeemail = employeeemail;
    }

    public ObservableList<EmployeeMaster> getEmployeeMasterObservableList() {
        return employeeMasterObservableList;
    }

    public void setEmployeeMasterObservableList(ObservableList<EmployeeMaster> employeeMasterObservableList) {
        this.employeeMasterObservableList = employeeMasterObservableList;
    }

    public TextField getTf1period() {
        return tf1period;
    }

    public void setTf1period(TextField tf1period) {
        this.tf1period = tf1period;
    }

    public Button getQuerytf1() {
        return querytf1;
    }

    public void setQuerytf1(Button querytf1) {
        this.querytf1 = querytf1;
    }

    public TableView<SalesMaster> getTableemployeesales() {
        return tableemployeesales;
    }

    public void setTableemployeesales(TableView<SalesMaster> tableemployeesales) {
        this.tableemployeesales = tableemployeesales;
    }

    public TableColumn<SalesMaster, String> getEmployeetransid() {
        return employeetransid;
    }

    public void setEmployeetransid(TableColumn<SalesMaster, String> employeetransid) {
        this.employeetransid = employeetransid;
    }

    public TableColumn<SalesMaster, String> getTransprice() {
        return transprice;
    }

    public void setTransprice(TableColumn<SalesMaster, String> transprice) {
        this.transprice = transprice;
    }

    public TableColumn<SalesMaster, String> getTranspaid() {
        return transpaid;
    }

    public void setTranspaid(TableColumn<SalesMaster, String> transpaid) {
        this.transpaid = transpaid;
    }

    public TableColumn<SalesMaster, String> getTransmethod() {
        return transmethod;
    }

    public void setTransmethod(TableColumn<SalesMaster, String> transmethod) {
        this.transmethod = transmethod;
    }

    public TableColumn<SalesMaster, String> getTransbalance() {
        return transbalance;
    }

    public void setTransbalance(TableColumn<SalesMaster, String> transbalance) {
        this.transbalance = transbalance;
    }

    public TableColumn<SalesMaster, String> getTranscompletion() {
        return transcompletion;
    }

    public void setTranscompletion(TableColumn<SalesMaster, String> transcompletion) {
        this.transcompletion = transcompletion;
    }

    public ObservableList<SalesMaster> getSalesMasterObservableList() {
        return salesMasterObservableList;
    }

    public void setSalesMasterObservableList(ObservableList<SalesMaster> salesMasterObservableList) {
        this.salesMasterObservableList = salesMasterObservableList;
    }

    public Button getShowempperformancegraph() {
        return showempperformancegraph;
    }

    public void setShowempperformancegraph(Button showempperformancegraph) {
        this.showempperformancegraph = showempperformancegraph;
    }

    public Button getExportfirstempreport() {
        return exportfirstempreport;
    }

    public void setExportfirstempreport(Button exportfirstempreport) {
        this.exportfirstempreport = exportfirstempreport;
    }

    public Tab getTabsalesaudits() {
        return tabsalesaudits;
    }

    public void setTabsalesaudits(Tab tabsalesaudits) {
        this.tabsalesaudits = tabsalesaudits;
    }

    public Tab getTabstockalerts() {
        return tabstockalerts;
    }

    public void setTabstockalerts(Tab tabstockalerts) {
        this.tabstockalerts = tabstockalerts;
    }

    public TableView getStockalerttable() {
        return stockalerttable;
    }

    public void setStockalerttable(TableView stockalerttable) {
        this.stockalerttable = stockalerttable;
    }

    public TableColumn getStockalerttableid() {
        return stockalerttableid;
    }

    public void setStockalerttableid(TableColumn stockalerttableid) {
        this.stockalerttableid = stockalerttableid;
    }

    public TableColumn getStockalerttablename() {
        return stockalerttablename;
    }

    public void setStockalerttablename(TableColumn stockalerttablename) {
        this.stockalerttablename = stockalerttablename;
    }

    public TableColumn getStockalerttabledate() {
        return stockalerttabledate;
    }

    public void setStockalerttabledate(TableColumn stockalerttabledate) {
        this.stockalerttabledate = stockalerttabledate;
    }

    public TableColumn getStockalerttablemarkasread() {
        return stockalerttablemarkasread;
    }

    public void setStockalerttablemarkasread(TableColumn stockalerttablemarkasread) {
        this.stockalerttablemarkasread = stockalerttablemarkasread;
    }

    public Tab getTaballaudits() {
        return taballaudits;
    }

    public void setTaballaudits(Tab taballaudits) {
        this.taballaudits = taballaudits;
    }

    public Button getExportfullreport() {
        return exportfullreport;
    }

    public void setExportfullreport(Button exportfullreport) {
        this.exportfullreport = exportfullreport;
    }

    public Button getExportcategoryreport() {
        return exportcategoryreport;
    }

    public void setExportcategoryreport(Button exportcategoryreport) {
        this.exportcategoryreport = exportcategoryreport;
    }

    public Button getExportemployeereport() {
        return exportemployeereport;
    }

    public void setExportemployeereport(Button exportemployeereport) {
        this.exportemployeereport = exportemployeereport;
    }

    public Button getGetdetailedgraph() {
        return getdetailedgraph;
    }

    public void setGetdetailedgraph(Button getdetailedgraph) {
        this.getdetailedgraph = getdetailedgraph;
    }

    public Button getGetcateegorygraph() {
        return getcateegorygraph;
    }

    public void setGetcateegorygraph(Button getcateegorygraph) {
        this.getcateegorygraph = getcateegorygraph;
    }

    public Button getGetemployeegraph() {
        return getemployeegraph;
    }

    public void setGetemployeegraph(Button getemployeegraph) {
        this.getemployeegraph = getemployeegraph;
    }

    public Label getClock() {
        return clock;
    }

    public void setClock(Label clock) {
        this.clock = clock;
    }

    public MenuItem getLogoutmenu() {
        return logoutmenu;
    }

    public void setLogoutmenu(MenuItem logoutmenu) {
        this.logoutmenu = logoutmenu;
    }

    public MenuItem getImportmenu() {
        return importmenu;
    }

    public void setImportmenu(MenuItem importmenu) {
        this.importmenu = importmenu;
    }

    public MenuItem getQuitmenu() {
        return quitmenu;
    }

    public void setQuitmenu(MenuItem quitmenu) {
        this.quitmenu = quitmenu;
    }

    public MenuItem getGetdocumentation() {
        return getdocumentation;
    }

    public void setGetdocumentation(MenuItem getdocumentation) {
        this.getdocumentation = getdocumentation;
    }

    public VBox getPanel() {
        return panel;
    }

    public void setPanel(VBox panel) {
        this.panel = panel;
    }

    public Button getTopanelbutton() {
        return topanelbutton;
    }

    public void setTopanelbutton(Button topanelbutton) {
        this.topanelbutton = topanelbutton;
    }

    public Button getTocarwashbutton() {
        return tocarwashbutton;
    }

    public void setTocarwashbutton(Button tocarwashbutton) {
        this.tocarwashbutton = tocarwashbutton;
    }

    public Button getToemployeesbutton() {
        return toemployeesbutton;
    }

    public void setToemployeesbutton(Button toemployeesbutton) {
        this.toemployeesbutton = toemployeesbutton;
    }

    public Button getLogoutbutton() {
        return logoutbutton;
    }

    public void setLogoutbutton(Button logoutbutton) {
        this.logoutbutton = logoutbutton;
    }

    public Button getTosupplierbutton() {
        return tosupplierbutton;
    }

    public void setTosupplierbutton(Button tosupplierbutton) {
        this.tosupplierbutton = tosupplierbutton;
    }

    public Connection getConnection() {
        return connection;
    }

    public void setConnection(Connection connection) {
        this.connection = connection;
    }
}
package Controllers.ShopControllers;

import java.sql.Timestamp;

import static securityandtime.config.cartid;

public class CartIdGenerator {
    public String getIdcart() {
        return idcart;
    }

    public void setIdcart(String idcart) {
        this.idcart = idcart;
    }

    public String idcart;

    public CartIdGenerator() {
        String x = String.valueOf(new Timestamp(System.currentTimeMillis()));
        idcart = cartid.put("cartKey", x);
        System.out.println(cartid.isEmpty());
    }
}
package Controllers.ShopControllers;

import Controllers.UserAccountManagementControllers.IdleMonitor;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.ButtonType;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import javafx.stage.Stage;
import javafx.util.Duration;
import securityandtime.config;

import java.io.IOException;
import java.net.URL;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;
import java.util.ResourceBundle;

import static securityandtime.config.pricegot;

public class OnlinePaymentsController implements Initializable {
    public Button mpesa;
    public Button kcb;
    public Button back;
    public AnchorPane panel;
    public Label price;
    public Button goofflinepayments;
    private Integer pricevalue;


    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(3600),
                () -> {
                    try {
                        config.login.put("loggedout", true);
                        panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);
        idleMonitor.register(panel, Event.ANY);
        buttonListeners();
        utilities();
    }

    private void utilities() {
        pricevalue = pricegot.get("price");
        price.setText(String.valueOf(pricegot.get("price")));
    }

    private void buttonListeners() {
        //button listeners
        goofflinepayments.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                try {
                    panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/shopFiles/showpriceexitcash.fxml")))));
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        });
        back.setOnMouseClicked(event -> {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("BACK TO PANEL");
            alert.setHeaderText(null);
            alert.setContentText("GO BACK TO PANEL?");

            Optional<ButtonType> result = alert.showAndWait();
            if (result.get() == ButtonType.OK) {
                Stage stage = (Stage) back.getScene().getWindow();
                stage.close();

            }
        });
    }
}
package Controllers.ShopControllers;

import Controllers.UserAccountManagementControllers.IdleMonitor;
import Controllers.SuperClass;
import MasterClasses.ReceiptMasterClass;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.Window;
import javafx.util.Duration;
import securityandtime.config;

import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.Collections;
import java.util.Objects;
import java.util.Optional;
import java.util.ResourceBundle;
import java.util.concurrent.atomic.AtomicInteger;

import static securityandtime.config.*;

public class PriceCashControllerExit implements Initializable {
    public Label price;
    public Button complete;
    public Button done;
    public Label balance;
    public Button goonlinepayments;
    public Button back;
    public VBox panel;
    public TextField cash;
    private int pricevalue;
    private boolean completedPayment;
    private Connection connectionDbLocal;
    private int bal;
    Connection connection = null;

    {

        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
            connectionDbLocal = DriverManager.getConnection(localCartDb);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private Statement statementLocal;

    {
        try {
            assert false;
            statementLocal = connectionDbLocal.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(3600),
                () -> {
                    try {
                        config.login.put("loggedout", true);
                        panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);
        idleMonitor.register(panel, Event.ANY);
        buttonListeners();
        load();
        setPrice();
    }

    private void setPrice() {
        AtomicInteger x = new AtomicInteger();
        x.set(Integer.parseInt(String.valueOf(pricevalue)));
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            if (!cash.getText().isEmpty()) {
                x.set(Integer.parseInt(cash.getText()) - pricevalue);
                if (x.get() >= 0) {
                    balance.setText(String.valueOf(x.get()));
                    completedPayment = true;
                } else {
                    balance.setText("0.00");
                    completedPayment = false;
                }
                bal = x.get();
            }
        }),
                new KeyFrame(Duration.seconds(1))
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

    private void load() {
        cash.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
//                complete transaction
                completetransaction();
            }
        });
        pricevalue = pricegot.get("price");
        price.setText(String.valueOf(pricevalue));
    }

    private void completetransaction() {
        SuperClass superClass = new SuperClass();
        superClass.completetransaction();


    }


    private void buttonListeners() {
        complete.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                if (completedPayment) {
                    payment();
                } else {

                    showAlert(Alert.AlertType.ERROR, panel.getScene().getWindow(), "ERROR", "THE AMOUNT PAID IS NOT COMPLETE");
                }
            }

            private void payment() {
                // complete the transaction by first removing from db

                try {
                    ResultSet resultset = statementLocal.executeQuery("SELECT * FROM cartItems");
                    String transid = "";
                    while (resultset.next()) {
                        String code = resultset.getString("code");
                        String amount = resultset.getString("amount");
//    transid=user.get("user")+" "+resultset.getString("transactionid");
                        transid = resultset.getString("transactionid");
                        String priceCumulative=resultset.getString("cumulativeprice");

                        PreparedStatement statement = connection.prepareStatement("SELECT * FROM stocks where itemcode=?");
                        statement.setString(1, code);
                        ResultSet resultSetStocks = statement.executeQuery();
                        if (resultSetStocks.isBeforeFirst()) {
                            while (resultSetStocks.next()) {
                                PreparedStatement statementUpdate = connection.prepareStatement("UPDATE stocks SET amount=? where itemcode=?");
                                statementUpdate.setString(1, String.valueOf(Integer.parseInt(resultSetStocks.getString("amount")) - Integer.parseInt(amount)));
                                statementUpdate.setString(2, code);
                                statementUpdate.execute();
                                PreparedStatement insertIntoSales=connection.prepareStatement("INSERT INTO solditems(name,price,quantitysold,transactionid,category)VALUES (?,?,?,?,?)");
                                insertIntoSales.setString(1,resultset.getString("itemname"));
                                insertIntoSales.setString(2,resultset.getString("itemprice"));
                                insertIntoSales.setString(3,resultset.getString("amount"));
                                insertIntoSales.setString(4,resultset.getString("transactionid"));
                                insertIntoSales.setString(5,resultSetStocks.getString("category"));
                                insertIntoSales.executeUpdate();
//                                    check if category exists,if exists update its records,elseinsert records
//                                todo categorical audits v1.2
//                                PreparedStatement checkIfExists=connection.prepareStatement("SELECT * FROM salespercategory where category=?");
//                                checkIfExists.setString(1,resultSetStocks.getString("category"));
//                                ResultSet rs=checkIfExists.executeQuery();
//                                if(rs.isBeforeFirst()){
//                                    //exists
//                                    PreparedStatement updateCategories=connection.prepareStatement("UPDATE salespercategory set price=?, sales=? where category=?");
//
//                                }else{
//                                    //does not exist
//                                    PreparedStatement insertCategories=connection.prepareStatement("INSERT INTO salespercategory(category,price,sales)VALUES (?,?,?)");
//                                    insertCategories.setString(1,resultSetStocks.getString("category"));
//                                    insertCategories.setString(2,);
//                                        insertCategories.setString(3,amount);
////
//                                }


                            }
                        }

                    }
                    PreparedStatement statement = connection.prepareStatement("insert into sales(transactionid,balance,seller,cash,moneypaid,method,completed)values (?,?,?,?,?,?,?)");
                    statement.setString(1, transid);
                    statement.setInt(2, Integer.parseInt(balance.getText()));
                    statement.setString(3, user.get("user"));
                    statement.setString(4, String.valueOf(pricevalue));
                    statement.setString(5, cash.getText());
                    statement.setString(6,"CASH");
                    statement.setString(7,"TRUE");

                    statement.execute();
                } catch (SQLException e) {
                    e.printStackTrace();
                }


                completedPayment = false;
                //todo print a receipt to customer
                ReceiptMasterClass receiptMasterClass = new ReceiptMasterClass();


                pricevalue = 0;

//    delete from sqlite table
                try {
                    statementLocal.execute("DELETE FROM cartItems");
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                action.put("shopcontroller", "reload");
                Stage stage = (Stage) complete.getScene().getWindow();
                stage.close();


                //todo add a way of supporting multiple ways of payment eg start with cash complete with online payment

            }
        });
        goonlinepayments.setOnMouseClicked(event -> {
            try {
                panel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/shopFiles/onlinepayments.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }

        });
        back.setOnMouseClicked(event -> {
            Alert alert = new Alert(Alert.AlertType.CONFIRMATION);
            alert.setTitle("BACK TO PANEL");
            alert.setHeaderText(null);
            alert.setContentText("GO BACK TO PANEL?");

            Optional<ButtonType> result = alert.showAndWait();
            if (result.get() == ButtonType.OK) {
                Stage stage = (Stage) back.getScene().getWindow();
                stage.close();

            }
        });
    }

    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }
}
package Controllers.ShopControllers;

import javafx.fxml.Initializable;
import javafx.scene.layout.VBox;

import java.net.URL;
import java.util.ResourceBundle;

public class scannerController implements Initializable {
    public VBox scanner;

    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {

    }
}
package Controllers.ShopControllers;

import Controllers.UserAccountManagementControllers.IdleMonitor;
import MasterClasses.CartMaster;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.scene.control.MenuItem;
import javafx.scene.control.TextField;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.image.Image;
import javafx.scene.image.ImageView;
import javafx.scene.input.KeyCode;
import javafx.scene.input.MouseButton;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.stage.Window;
import javafx.util.Duration;
import scanhandler.BarcodeScanner;
import securityandtime.CheckConn;
import securityandtime.config;

import java.awt.*;
import java.io.IOException;
import java.net.URISyntaxException;
import java.net.URL;
import java.sql.*;
import java.util.*;
import java.util.concurrent.atomic.AtomicReference;

import static securityandtime.config.*;

public class ShopController extends CartIdGenerator implements Initializable {
    public VBox shopPanel;
    public Label clock;
    public Label username;
    public Button logoutb;
    public ImageView logoimage;
    public TextField barcodetext;
    public Button searchb;
    public TableView<CartMaster> cart;
    public TableColumn<CartMaster, String> name;
    public TableColumn<CartMaster, String> code;
    public TableColumn<CartMaster, String> price;
    public TableColumn<CartMaster, String> amount;
    public TableColumn<CartMaster, Integer> cumulativeprice;
    public Button deletefromcartb;
    public Button onlinepayments;
    public Button paycash;
    public Button holduserdatab;
    public Button panel;
    public Button clearb;
    public Label totalprice;
    public TableView<CartMaster> listViewHeldItems;
    public TableColumn<CartMaster, String> heldname, heldid;
    public Button loyaltiesB;
    public TextField searchname;
    public MenuItem logoutMenu;
    public MenuItem exitMenu;
    public MenuItem accountdetailsMenu;
    public MenuItem CreatorsMenu;
    public MenuItem helpMenu;
    public MenuItem stores;
    public MenuItem stocks;
    private String uniqueid;
    private ObservableList<CartMaster> data;
    private int counter = 0;
    ArrayList<CartMaster> arrayList = new ArrayList<CartMaster>();
    private String transID;
    private Connection connectionDbLocal;

    {
        try {
            connectionDbLocal = DriverManager.getConnection(localCartDb);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private Statement statementLocal = null;

    /**
     * Called to initialize a controller after its root element has been
     * completely processed.
     *
     * @param location  The location used to resolve relative paths for the root object, or
     *                  <tt>null</tt> if the location is not known.
     * @param resources The resources used to localize the root object, or <tt>null</tt> if
     */
    @Override
    public void initialize(URL location, ResourceBundle resources) {
        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(3600),
                () -> {
                    try {
                        config.login.put("loggedout", true);
                        shopPanel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);
        idleMonitor.register(panel, Event.ANY);
        getLogo();
        menuclick();
        buttonListeners();
        setName();
        time();
        tableLoad();
        setListViewHeldItems();
        editTable();
        checkCart();
        transID = cartid.get("cartKey");
        barcodetext.setOnKeyPressed(event -> {
            KeyCode keyCode = event.getCode();
            if (keyCode.equals(KeyCode.ENTER)) {
                searchButton();
            }
        });

//        link.setOnMousePressed(event -> {
//            try {
////                    todo change when created website
//                Desktop.getDesktop().browse(new URL("https://nanotechsoftwares.co.ke").toURI());
//            } catch (IOException | URISyntaxException e) {
//                e.printStackTrace();
//            }
//        });
    }

    public VBox getShopPanel() {
        return shopPanel;
    }

    public void setShopPanel(VBox shopPanel) {
        this.shopPanel = shopPanel;
    }


    public Label getClock() {
        return clock;
    }

    public void setClock(Label clock) {
        this.clock = clock;
    }

    public Label getUsername() {
        return username;
    }

    public void setUsername(Label username) {
        this.username = username;
    }

    public Button getLogoutb() {
        return logoutb;
    }

    public void setLogoutb(Button logoutb) {
        this.logoutb = logoutb;
    }

    public ImageView getLogoimage() {
        return logoimage;
    }

    public void setLogoimage(ImageView logoimage) {
        this.logoimage = logoimage;
    }

    public TextField getBarcodetext() {
        return barcodetext;
    }

    public void setBarcodetext(TextField barcodetext) {
        this.barcodetext = barcodetext;
    }

    public Button getSearchb() {
        return searchb;
    }

    public void setSearchb(Button searchb) {
        this.searchb = searchb;
    }

    public TableView<CartMaster> getCart() {
        return cart;
    }

    public void setCart(TableView<CartMaster> cart) {
        this.cart = cart;
    }

    public TableColumn<CartMaster, String> getName() {
        return name;
    }

    public void setName(TableColumn<CartMaster, String> name) {
        this.name = name;
    }

    public TableColumn<CartMaster, String> getCode() {
        return code;
    }

    public void setCode(TableColumn<CartMaster, String> code) {
        this.code = code;
    }

    public TableColumn<CartMaster, String> getPrice() {
        return price;
    }

    public void setPrice(TableColumn<CartMaster, String> price) {
        this.price = price;
    }

    public TableColumn<CartMaster, String> getAmount() {
        return amount;
    }

    public void setAmount(TableColumn<CartMaster, String> amount) {
        this.amount = amount;
    }

    public TableColumn<CartMaster, Integer> getCumulativeprice() {
        return cumulativeprice;
    }

    public void setCumulativeprice(TableColumn<CartMaster, Integer> cumulativeprice) {
        this.cumulativeprice = cumulativeprice;
    }

    public Button getDeletefromcartb() {
        return deletefromcartb;
    }

    public void setDeletefromcartb(Button deletefromcartb) {
        this.deletefromcartb = deletefromcartb;
    }

    public Button getOnlinepayments() {
        return onlinepayments;
    }

    public void setOnlinepayments(Button onlinepayments) {
        this.onlinepayments = onlinepayments;
    }

    public Button getPaycash() {
        return paycash;
    }

    public void setPaycash(Button paycash) {
        this.paycash = paycash;
    }

    public Button getHolduserdatab() {
        return holduserdatab;
    }

    public void setHolduserdatab(Button holduserdatab) {
        this.holduserdatab = holduserdatab;
    }

    public Button getPanel() {
        return panel;
    }

    public void setPanel(Button panel) {
        this.panel = panel;
    }

    public Button getClearb() {
        return clearb;
    }

    public void setClearb(Button clearb) {
        this.clearb = clearb;
    }

    public Label getTotalprice() {
        return totalprice;
    }

    public void setTotalprice(Label totalprice) {
        this.totalprice = totalprice;
    }

    public TableView<CartMaster> getListViewHeldItems() {
        return listViewHeldItems;
    }

    public void setListViewHeldItems(TableView<CartMaster> listViewHeldItems) {
        this.listViewHeldItems = listViewHeldItems;
    }

    public TableColumn<CartMaster, String> getHeldname() {
        return heldname;
    }

    public void setHeldname(TableColumn<CartMaster, String> heldname) {
        this.heldname = heldname;
    }

    public TableColumn<CartMaster, String> getHeldid() {
        return heldid;
    }

    public void setHeldid(TableColumn<CartMaster, String> heldid) {
        this.heldid = heldid;
    }


    public Button getLoyaltiesB() {
        return loyaltiesB;
    }

    public void setLoyaltiesB(Button loyaltiesB) {
        this.loyaltiesB = loyaltiesB;
    }

    public TextField getSearchname() {
        return searchname;
    }

    public void setSearchname(TextField searchname) {
        this.searchname = searchname;
    }

    public String getUniqueid() {
        return uniqueid;
    }

    public void setUniqueid(String uniqueid) {
        this.uniqueid = uniqueid;
    }

    public ObservableList<CartMaster> getData() {
        return data;
    }

    public void setData(ObservableList<CartMaster> data) {
        this.data = data;
    }

    public int getCounter() {
        return counter;
    }

    public void setCounter(int counter) {
        this.counter = counter;
    }

    public ArrayList<CartMaster> getArrayList() {
        return arrayList;
    }

    public void setArrayList(ArrayList<CartMaster> arrayList) {
        this.arrayList = arrayList;
    }

    public void setTransID(String transID) {
        this.transID = transID;
    }

    public Connection getConnectionDbLocal() {
        return connectionDbLocal;
    }

    public void setConnectionDbLocal(Connection connectionDbLocal) {
        this.connectionDbLocal = connectionDbLocal;
    }

    public Statement getStatementLocal() {
        return statementLocal;
    }

    public void setStatementLocal(Statement statementLocal) {
        this.statementLocal = statementLocal;
    }



    public void setListViewHeldItems() {
        try {
            data = FXCollections.observableArrayList();
            ResultSet resultSet = statementLocal.executeQuery("SELECT * FROM heldTransactionList");
            while (resultSet.next()) {
                CartMaster cartMaster = new CartMaster();
                cartMaster.setTransactionId(resultSet.getString("transactionid"));
                cartMaster.setItemName(resultSet.getString("name"));
                cartMaster.setItemId(Integer.parseInt(resultSet.getString("id")));
                data.add(cartMaster);
            }
            listViewHeldItems.setItems(data);

            assert listViewHeldItems != null : "fx:id=\"listViewHeldItems\" was not injected: check your FXML ";
            heldname.setCellValueFactory(
                    new PropertyValueFactory<CartMaster, String>("itemName"));
            heldid.setCellValueFactory(
                    new PropertyValueFactory<CartMaster, String>("itemId"));

            listViewHeldItems.refresh();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        //restore to cart
        listViewHeldItems.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent mouseEvent) {
                if (mouseEvent.getButton().equals(MouseButton.PRIMARY)) {
                    if (mouseEvent.getClickCount() == 2) {
                        restore();
                    }
                }
            }

            private void restore() {
//            todo check if cart is empty during restoration,if empty restore,otherwise save existing cart then restore
                try {
                    ResultSet resultSet = statementLocal.executeQuery("SELECT * FROM cartItems");
                    if (resultSet.isBeforeFirst()) {
//                    exists
                        String name;
                        TextInputDialog dialog = new TextInputDialog("");
                        dialog.setTitle("TRANSACTION IN CART");
                        dialog.setHeaderText(null);
                        dialog.setContentText("Save existing items by entering something that uniquely identifies the transaction(eg customer name):");

// Traditional way to get the response value.
                        Optional<String> result = dialog.showAndWait();
                        if (result.isPresent()) {
                            name = result.get();
                        } else {
                            name = null;
                        }
                        holdUserData(name);
                    }
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                CartMaster store = listViewHeldItems.getSelectionModel().getSelectedItem();
                String transid = store.getTransactionId();
                String insert = "INSERT INTO cartItems(itemname, itemprice, itemid, code, amount, cumulativeprice, transactionid)SELECT itemname,itemprice,itemid,code,amount,cumulativeprice,transactionid from heldItems where transactionid='" + transid + "'";
                try {
                    statementLocal.execute(insert);
                } catch (SQLException e) {
                    e.printStackTrace();
                }
                try {
                    PreparedStatement preparedStatement = connectionDbLocal.prepareStatement("DELETE FROM heldItems where transactionid=?");
                    preparedStatement.setString(1, transid);
                    preparedStatement.executeUpdate();
                    PreparedStatement preparedStatement1 = connectionDbLocal.prepareStatement("DELETE FROM heldTransactionList where transactionid=?");
                    preparedStatement1.setString(1, transid);
                    preparedStatement1.executeUpdate();
                } catch (SQLException e) {
                    e.printStackTrace();
                }
//            tableLoad();
//            setListViewHeldItems();
                try {
                    shopPanel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/shopFiles/shop.fxml")))));
                } catch (IOException e) {
                    e.printStackTrace();
                }

                setTransID();
                System.out.println(getTransID());
            }
        });


    }

    public void reload() {
        tableLoad();
    }
    public String getTransID() {
        return transID;
    }

    public void setTransID() {
        transID = new CartIdGenerator().getIdcart();
    }

    void checkCart() {
        try {
            if (statementLocal.execute("SELECT  * FROM cartItems where transactionid not null ")) {
                ResultSet rs = statementLocal.executeQuery("SELECT  * FROM cartItems where transactionid is not null ");
                if (rs.isBeforeFirst()) {
//                    new CartIdGenerator().idcart = rs.getString("transactionid");
                    cartid.put("cartKey", rs.getString("transactionid"));
                    statementLocal.close();

                }
            } else {
                String x = new Timestamp(System.currentTimeMillis()).toString();
                new CartIdGenerator().setIdcart(x);
                idcart = cartid.put("cartKey", x);
                transID = idcart;
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }


    }
    private void editTable() {
//        edit amount and cumulative price
        cart.setEditable(true);
        amount.setCellFactory(TextFieldTableCell.forTableColumn());
        amount.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<CartMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<CartMaster, String> t) {
                        ((CartMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setItemNumber(t.getNewValue());
                        String newval = t.getNewValue();

                        String price = String.valueOf(Integer.parseInt(newval) * Integer.parseInt(((CartMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).getItemPrice()));

                        ((CartMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setItemCumulativeCost(Integer.parseInt(price));

                        System.out.println("price=" + price);
                        try {
                            statementLocal.executeUpdate("UPDATE cartItems set amount=" + newval + " ,cumulativeprice=" + price + " WHERE itemid=" + ((CartMaster) t.getTableView().getItems().get(
                                    t.getTablePosition().getRow())
                            ).getItemId());
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }
//                        update total price
                        try {
                            totalprice.setText(String.valueOf(countTotalPrice()));
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }


                    }
                }
        );
    }

    void tableLoad() {
/*
       1 create a sqlite database
       2 create a transaction id each time a new transaction is started
       3  insert items and transaction id into sqlite database
       4  fetch items from sqlite  database and display them to user
       5  on delete,remove item from sqlite database
*/

        /*
         *  scan for reading in barcode
         *  else enter manually
         *
         * */
        String zcode = null;
        String itemname = null;
        BarcodeScanner barcodeScanner = new BarcodeScanner();
        StringBuffer stringBuffer = barcodeScanner.getBarcode();
        if (!stringBuffer.toString().equals("")) {
//            if bar code reads
            if (stringBuffer.toString().length() < 8) {
                showAlert(Alert.AlertType.ERROR, shopPanel.getScene().getWindow(), "ERROR", "ERROR READING CODE");
            } else {
                zcode = stringBuffer.toString();
                barcodetext.setText(zcode);
            }
//
//  todo to test later when with bar code scanner
        } else {
            zcode = barcodetext.getText();
            itemname = searchname.getText();
        }
        searchname.clear();
        barcodetext.clear();
        data = FXCollections.observableArrayList();
        Connection connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }


        //            for local storage
        try {
            assert connectionDbLocal != null;
            statementLocal = connectionDbLocal.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            assert statementLocal != null;
            statementLocal.setQueryTimeout(30); // set timeout to 30 sec.
        } catch (SQLException e) {
            e.printStackTrace();
        }

        try {
//                        insert into sqlite
//                        String cartItems = "CREATE TABLE IF NOT EXISTS cartItems
//                        (itemname text,itemprice text,
//                        itemid text,code text,amount text,cumulativeprice text ,transactionid text)";
            if (connection != null) {

                PreparedStatement statement = connection.prepareStatement("SELECT * FROM stocks where itemcode=?");
                statement.setString(1, zcode);
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {

                    CartMaster cartmaster = new CartMaster();
                    cartmaster.setItemId(resultSet.getInt("id"));
                    cartmaster.setItemName(resultSet.getString("name"));
                    cartmaster.setItemNumber("1");
                    cartmaster.setItemPrice(resultSet.getString("price"));
                    cartmaster.setItemBarCode(zcode);
                    cartmaster.setItemCumulativeCost(Integer.parseInt(resultSet.getString("price")) * Integer.parseInt(cartmaster.getItemNumber()));

                    ResultSet rs = statementLocal.executeQuery("SELECT  * FROM cartItems where itemid=" + cartmaster.getItemId());
                    if (rs.isBeforeFirst()) {
//                        String updateCount=;
                        statementLocal.executeUpdate("UPDATE cartItems set amount=amount+1,cumulativeprice=(amount+1)*itemprice where itemid=" + cartmaster.getItemId());
                        statementLocal.close();
                    } else {
                        String insert = "INSERT INTO cartItems(itemname, itemprice, itemid, code, amount, cumulativeprice, transactionid)VALUES ('" + cartmaster.getItemName() + "','" + cartmaster.getItemPrice() + "','" +
                                cartmaster.getItemId() + "','" + cartmaster.getItemBarCode() + "','" + cartmaster.getItemNumber() + "','" +
                                cartmaster.getItemCumulativeCost() + "','" + getTransID() + "')";
                        int i = statementLocal.executeUpdate(insert);
                        statementLocal.close();
                    }

                }

                ResultSet rs = statementLocal.executeQuery("SELECT  * FROM cartItems");
                while (rs.next()) {
                    CartMaster cartMaster = new CartMaster();
//                        totalprice.setText(String.valueOf(totalpricetext));

//                        totalpricetext+=Integer.parseInt(rs.getString("cumulativeprice"));
                    cartMaster.setItemId(rs.getInt("itemid"));
                    cartMaster.setItemName(rs.getString("itemname"));
                    cartMaster.setItemNumber(rs.getString("amount"));
                    cartMaster.setItemPrice(rs.getString("itemprice"));
                    cartMaster.setItemBarCode(rs.getString("code"));
                    cartMaster.setItemCumulativeCost(Integer.parseInt(rs.getString("cumulativeprice")));
                    cartMaster.setTransactionId(rs.getString("transactionid"));
//                    cartMaster.itemCumulativeCostProperty().addListener(new ChangeListener<Number>() {
//                        @Override
//                        public void changed(ObservableValue<? extends Number> observable, Number oldValue, Number newValue) {
//                            try {
//                                countTotalPrice();
//                                totalprice.setText(String.valueOf(countTotalPrice()));
//                            } catch (SQLException e) {
//                                e.printStackTrace();
//                            }
//                        }
//                    });
//
//                    cartMaster.itemNumberProperty().addListener(new ChangeListener<String>() {
//                        @Override
//                        public void changed(ObservableValue<? extends String> observable, String oldValue, String newValue) {
//                            try {
//                                countTotalPrice();
//                            } catch (SQLException e) {
//                                e.printStackTrace();
//                            }
//                            try {
//                                totalprice.setText(String.valueOf(countTotalPrice()));
//                            } catch (SQLException e) {
//                                e.printStackTrace();
//                            }
//                        }
//                    });

                    data.add(cartMaster);
                }
                statementLocal.close();

                totalprice.setText(String.valueOf(countTotalPrice()));
                cart.setItems(data);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        assert cart != null : "fx:id=\"cart\" was not injected: check your FXML ";
        name.setCellValueFactory(
                new PropertyValueFactory<CartMaster, String>("itemName"));
        code.setCellValueFactory(
                new PropertyValueFactory<CartMaster, String>("itemBarCode"));
        price.setCellValueFactory(
                new PropertyValueFactory<CartMaster, String>("itemPrice"));
        cumulativeprice.setCellValueFactory(
                new PropertyValueFactory<CartMaster, Integer>("itemCumulativeCost"));
        amount.setCellValueFactory(new PropertyValueFactory<CartMaster, String>("itemNumber"));
        cart.refresh();
    }

    private int countTotalPrice() throws SQLException {
        int price = 0;
        ResultSet rs = statementLocal.executeQuery("SELECT  * FROM cartItems");
        while (rs.next()) {
            price += Integer.parseInt(rs.getString("cumulativeprice"));
        }
        statementLocal.close();

        return price;
    }
    private void getLogo() {
        Image image = new Image("resourcefiles/images/banner_hardware.png");
        logoimage.setImage(image);
    }

    private void setName() {
        String name = config.user.get("user");
        username.setText(name);
        System.out.println();
    }

    private void menuclick() {



        helpMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    Desktop.getDesktop().browse(new URL(sitedocs).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
        CreatorsMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                try {
                    Desktop.getDesktop().browse(new URL(site).toURI());
                } catch (IOException e) {
                    e.printStackTrace();
                } catch (URISyntaxException e) {
                    e.printStackTrace();
                }
            }
        });
        exitMenu.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                Platform.exit();
                System.exit(1);
            }
        });
        logoutMenu.setOnAction(event -> {
            config.login.put("loggedout", true);

            try {
//                System.out.println("logging out");
                shopPanel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
    }

    private void deletefromcart() {
        CartMaster store = cart.getSelectionModel().getSelectedItem();
        if (store == null) {
            showAlert(Alert.AlertType.WARNING, shopPanel.getScene().getWindow(), "NO ITEM SELECTED", "SELECT ITEM TO REMOVE");

        } else {
            try {

                PreparedStatement preparedStatement = connectionDbLocal.prepareStatement("DELETE FROM cartItems WHERE itemid=?");

                preparedStatement.setString(1, String.valueOf(store.getItemId()));
                int updated = preparedStatement.executeUpdate();
                if (updated > 0) {
                    tableLoad();
                } else {
                    showAlert(Alert.AlertType.WARNING, shopPanel.getScene().getWindow(), "ERROR", "EROR REMOVING ITEM");
                }
            } catch (Exception e) {
                showAlert(Alert.AlertType.WARNING, shopPanel.getScene().getWindow(), "CONNECTION ERROR", "EROR REMOVING ITEM.CHECK YOUR CONNECTION TO THE SERVER");

            }
        }
    }

    private void buttonListeners() {
        onlinepayments.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                pricegot.put("price", Integer.valueOf(totalprice.getText()));
                FXMLLoader fxmlLoader = new FXMLLoader(getClass().getClassLoader().getResource("resourcefiles/shopFiles/onlinepayments.fxml"));
                try {
                    Parent parent = (Parent) fxmlLoader.load();
                    Stage stage = new Stage();
                    stage.setScene(new Scene(parent));
                    stage.initStyle(StageStyle.UNDECORATED);
                    stage.show();
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        deletefromcartb.setOnMouseClicked(event -> deletefromcart());

        searchb.setOnMouseClicked(event -> {

            searchButton();
        });
        paycash.setOnMouseClicked(event -> {
//pricegot= Integer.parseInt(totalprice.getText());
            pricegot.put("price", Integer.valueOf(totalprice.getText()));
            FXMLLoader fxmlLoader = new FXMLLoader(getClass().getClassLoader().getResource("resourcefiles/shopFiles/showpriceexitcash.fxml"));
            try {
                Parent parent = (Parent) fxmlLoader.load();
                Stage stage = new Stage();
                stage.setScene(new Scene(parent));
                stage.initStyle(StageStyle.UNDECORATED);
                stage.show();
            } catch (IOException e) {
                e.printStackTrace();
            }
        });
//        checkoutb.setOnMouseClicked(event -> {
//            transID = new CartIdGenerator().idcart;
//
//            ShopController shopController = new ShopController();
//            //                shopController.setTransID(CheckConn.timelogin().toString());
//        });
        clearb.setOnMouseClicked(event -> {
            clearCart();
            showAlert(Alert.AlertType.INFORMATION, shopPanel.getScene().getWindow(), "CART CLEARED", "YOU HAVE CLEARED YOUR CART");
        });
        logoutb.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                //logout button destroy session variables
                config.login.put("loggedout", true);
                try {
                    shopPanel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
                } catch (IOException e) {
                    e.printStackTrace();
                }
            }
        });
        panel.setOnMouseClicked(new EventHandler<MouseEvent>() {
            @Override
            public void handle(MouseEvent event) {
                try {
//                    shopPanel.getChildren().removeAll();
                    shopPanel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panel.fxml")))));
                } catch (IOException e) {
                    e.printStackTrace();
                }

            }
        });
        holduserdatab.setOnMouseClicked(event -> {
            String name;
            TextInputDialog dialog = new TextInputDialog("");
            dialog.setTitle("TRANSACTION IDENTIFIER");
            dialog.setHeaderText(null);
            dialog.setContentText("Please enter something that identifies the transaction(eg customer name):");

// Traditional way to get the response value.
            Optional<String> result = dialog.showAndWait();
            name = result.orElse(null);

            holdUserData(name);
        });
    }

    private void holdUserData(String name) {


        try {

            String id = tableCartTransfer("heldItems", "cartItems");
            statementLocal.execute("INSERT INTO heldTransactionList(name, transactionid) VALUES ('" + name + "','" + id + "')");
            statementLocal.execute("DELETE FROM cartItems");

            checkCart();
            tableLoad();

//                    System.out.println(getTransID());
//                    fixme find a better way of doing this(setting the transaction id)
            try {
                shopPanel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/shopFiles/shop.fxml")))));
                setTransID();
                System.out.println(getTransID());
            } catch (IOException e) {
                e.printStackTrace();
            }
            showAlert(Alert.AlertType.INFORMATION, shopPanel.getScene().getWindow(), "SUCCESS", "HOLDING SUCCESSFULL");

        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    //fixme channge how unique transaction id is created after a sale or hold
    private String tableCartTransfer(String to, String from) {
        AtomicReference<String> id = new AtomicReference<>("");
        try {

            if (connectionDbLocal != null) {
                String insert = "INSERT INTO " + to + "(itemname, itemprice, itemid, code, amount, cumulativeprice, transactionid)SELECT itemname,itemprice,itemid,code,amount,cumulativeprice,transactionid from " + from + "";
                int i = statementLocal.executeUpdate(insert);
                ResultSet rs = statementLocal.executeQuery("SELECT transactionid from " + from + "");
                if (rs.isBeforeFirst()) id.set(rs.getString("transactionid"));
//            ResultSet resultSet = statementLocal.executeQuery("SELECT  * FROM cartItems");
//            while (resultSet.next()) {
//
//                CartMaster cartmaster = new CartMaster();
//                id= Integer.parseInt(resultSet.getString("transactionid"));
//                cartmaster.setTransactionId(resultSet.getString("transactionid"));
//                cartmaster.setItemId(resultSet.getInt("itemid"));
//                cartmaster.setItemName(resultSet.getString("itemname"));
//                cartmaster.setItemNumber(resultSet.getString("amount"));
//                cartmaster.setItemPrice(resultSet.getString("itemprice"));
//                cartmaster.setItemBarCode(resultSet.getString("code"));
//                cartmaster.setItemCumulativeCost(Integer.parseInt(resultSet.getString("cumulativeprice")));
////move to new table
//                System.out.println(cartmaster.getItemBarCode()+" is the code");
//
////                    remove from old table
//                System.out.println(counters+" done");
//counters++;
//            }

            }
            statementLocal.close();
        } catch (Exception e) {
            e.printStackTrace();
        }
        return id.get();
    }

    private void clearCart() {
        try {
            statementLocal.execute("DROP TABLE cartItems");
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            Statement Cart = connectionDbLocal.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        String cartItems = "CREATE TABLE IF NOT EXISTS cartItems (id integer primary key autoincrement,itemname text,itemprice text,itemid integer,code text,amount text,cumulativeprice text ,transactionid text)";
        try {
            statementLocal.executeUpdate(cartItems);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        tableLoad();
    }

    public void time() {
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            String mins = null, hrs = null, secs = null, pmam = null;
            try {
                int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
                int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
                int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

                if (hours >= 12) {
//                    hrs= "0"+String.valueOf(hours-12);
                    pmam = "PM";
                } else {
                    pmam = "AM";

                }
                if (minutes > 9) {
                    mins = String.valueOf(minutes);
                } else {
                    mins = "0" + String.valueOf(minutes);

                }
                if (seconds > 9) {
                    secs = String.valueOf(seconds);
                } else {
                    secs = "0" + String.valueOf(seconds);

                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            if (Objects.equals(action.get("shopcontroller"), "reload")) {
                reload();
                action.remove("shopcontroller", "reload");
            }

            try {
                clock.setText(String.format("%d:%s:%s %s", CheckConn.timelogin().getHours(), mins, secs, pmam));
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }),
                new KeyFrame(Duration.seconds(1))
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

    private void searchButton() {

        if (counter == 0) {
            try {
                uniqueid = CheckConn.timelogin().getTime() + user.get("user");
                System.out.println(uniqueid);

            } catch (IOException e) {
                e.printStackTrace();
            }
            counter++;
        }
        tableLoad();
    }
    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }



}
package Controllers.ShopControllers;

import Controllers.UserAccountManagementControllers.IdleMonitor;
import MasterClasses.StockMaster;
import javafx.animation.Animation;
import javafx.animation.KeyFrame;
import javafx.animation.Timeline;
import javafx.application.Platform;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.embed.swing.SwingFXUtils;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;
import javafx.scene.control.cell.TextFieldTableCell;
import javafx.scene.image.Image;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.VBox;
import javafx.scene.text.Font;
import javafx.stage.FileChooser;
import javafx.stage.Window;
import javafx.util.Duration;
import logging.LogClass;
import org.apache.commons.io.FileUtils;
import securityandtime.CheckConn;
import securityandtime.config;

import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.net.URL;
import java.sql.*;
import java.util.Arrays;
import java.util.Collections;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.logging.Level;

import static securityandtime.config.des;
import static securityandtime.config.user;

public class StocksController implements Initializable {
    public MenuItem logout;
    public Label clock;
    public Font x1;
    public TabPane tabpane;
    public Tab existingstockdtab;
    public TableView<StockMaster> table;
    public TableColumn<StockMaster, String> name;
    public TableColumn<StockMaster, String> price;
    public TableColumn<StockMaster, String> category;
    public TableColumn<StockMaster, String> barcode;
    public TableColumn<StockMaster, String> quantity;
    public Button delete;
    public VBox parentsstocks;
    public TextField itemname;
    public TextField itemprice;
    public TextField itemcategory;
    //todo continue from here by adding menu item functionality
    public TextField itemcode;
    public Button addmanually;
    public Button usescanner;
    public MenuItem employees;
    public TextField amount;
    public Button home;
    public Button image;
    private File file;
    private int length;
    private BufferedImage bufferedImage;
    private ObservableList<StockMaster> data;

    @Override
    public void initialize(URL location, ResourceBundle resources) {
        time();
        menuclick();
        buttonclick();
        IdleMonitor idleMonitor = new IdleMonitor(Duration.seconds(9000),
                () -> {
                    try {

                        config.login.put("loggedout", true);
                        parentsstocks.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));

                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }, true);
        idleMonitor.register(parentsstocks, Event.ANY);
    }

    public MenuItem getLogout() {
        return logout;
    }

    public void setLogout(MenuItem logout) {
        this.logout = logout;
    }

    public Label getClock() {
        return clock;
    }

    public void setClock(Label clock) {
        this.clock = clock;
    }

    public Font getX1() {
        return x1;
    }

    public void setX1(Font x1) {
        this.x1 = x1;
    }

    public TabPane getTabpane() {
        return tabpane;
    }

    public void setTabpane(TabPane tabpane) {
        this.tabpane = tabpane;
    }

    public Tab getExistingstockdtab() {
        return existingstockdtab;
    }

    public void setExistingstockdtab(Tab existingstockdtab) {
        this.existingstockdtab = existingstockdtab;
    }

    public TableView<StockMaster> getTable() {
        return table;
    }

    public void setTable(TableView<StockMaster> table) {
        this.table = table;
    }

    public TableColumn<StockMaster, String> getName() {
        return name;
    }

    public void setName(TableColumn<StockMaster, String> name) {
        this.name = name;
    }

    public TableColumn<StockMaster, String> getPrice() {
        return price;
    }

    public void setPrice(TableColumn<StockMaster, String> price) {
        this.price = price;
    }

    public TableColumn<StockMaster, String> getCategory() {
        return category;
    }

    public void setCategory(TableColumn<StockMaster, String> category) {
        this.category = category;
    }

    public TableColumn<StockMaster, String> getBarcode() {
        return barcode;
    }

    public void setBarcode(TableColumn<StockMaster, String> barcode) {
        this.barcode = barcode;
    }

    public TableColumn<StockMaster, String> getQuantity() {
        return quantity;
    }

    public void setQuantity(TableColumn<StockMaster, String> quantity) {
        this.quantity = quantity;
    }

    public Button getDelete() {
        return delete;
    }

    public void setDelete(Button delete) {
        this.delete = delete;
    }

    public VBox getParentsstocks() {
        return parentsstocks;
    }

    public void setParentsstocks(VBox parentsstocks) {
        this.parentsstocks = parentsstocks;
    }

    public TextField getItemname() {
        return itemname;
    }

    public void setItemname(TextField itemname) {
        this.itemname = itemname;
    }

    public TextField getItemprice() {
        return itemprice;
    }

    public void setItemprice(TextField itemprice) {
        this.itemprice = itemprice;
    }

    public TextField getItemcategory() {
        return itemcategory;
    }

    public void setItemcategory(TextField itemcategory) {
        this.itemcategory = itemcategory;
    }

    public TextField getItemcode() {
        return itemcode;
    }

    public void setItemcode(TextField itemcode) {
        this.itemcode = itemcode;
    }

    public Button getAddmanually() {
        return addmanually;
    }

    public void setAddmanually(Button addmanually) {
        this.addmanually = addmanually;
    }

    public Button getUsescanner() {
        return usescanner;
    }

    public void setUsescanner(Button usescanner) {
        this.usescanner = usescanner;
    }

    public MenuItem getEmployees() {
        return employees;
    }

    public void setEmployees(MenuItem employees) {
        this.employees = employees;
    }

    public TextField getAmount() {
        return amount;
    }

    public void setAmount(TextField amount) {
        this.amount = amount;
    }

    public Button getHome() {
        return home;
    }

    public void setHome(Button home) {
        this.home = home;
    }

    public Button getImage() {
        return image;
    }

    public void setImage(Button image) {
        this.image = image;
    }

    public File getFile() {
        return file;
    }

    public void setFile(File file) {
        this.file = file;
    }

    public int getLength() {
        return length;
    }

    public void setLength(int length) {
        this.length = length;
    }

    public BufferedImage getBufferedImage() {
        return bufferedImage;
    }

    public void setBufferedImage(BufferedImage bufferedImage) {
        this.bufferedImage = bufferedImage;
    }

    public ObservableList<StockMaster> getData() {
        return data;
    }

    public void setData(ObservableList<StockMaster> data) {
        this.data = data;
    }

    private void buttonclick() {
        image.setOnMouseClicked(event -> {
            FileChooser fileChooser = new FileChooser();

            //Set extension filter
            FileChooser.ExtensionFilter extFilterALL = new FileChooser.ExtensionFilter("ALL files (*.*)", "*.*");

            FileChooser.ExtensionFilter extFilterPNG = new FileChooser.ExtensionFilter("PNG files (*.png)", "*.PNG");

            FileChooser.ExtensionFilter extFilterJPG = new FileChooser.ExtensionFilter("JPG files (*.jpg)", "*.JPG");
            FileChooser.ExtensionFilter extFilterJPEG = new FileChooser.ExtensionFilter("JPEG files (*.jpeg)", "*.JPEG");
            fileChooser.getExtensionFilters().addAll(extFilterALL, extFilterPNG, extFilterJPG, extFilterJPEG);
            fileChooser.setTitle("SELECT STORE IMAGE");
            //Show open file dialog
            file = fileChooser.showOpenDialog(null);
            length = (int) file.length();
            try {
                bufferedImage = ImageIO.read(file);
                Image image = SwingFXUtils.toFXImage(bufferedImage, null);
//                    storeimageselected.setImage(image);
            } catch (IOException ex) {
                LogClass.getLogger().log(Level.SEVERE, "image input error");
                showAlert(Alert.AlertType.WARNING, parentsstocks.getScene().getWindow(), "ERROR!!", "IMAGE INPUT ERROR");
            }
        });
        data = FXCollections.observableArrayList();
        Connection connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Connection finalConnection = connection;
        home.setOnAction(event -> {
            try {
                parentsstocks.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panelAdmin.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }

        });
        addmanually.setOnMousePressed(event -> {
            //        todo add amount input
            String name, barcode, price, quantity, category;
            name = itemname.getText().toUpperCase();
            price = itemprice.getText().toUpperCase();
            barcode = itemcode.getText().toUpperCase();
            category = itemcategory.getText().toUpperCase();
            quantity = amount.getText().toUpperCase();
            PreparedStatement preparedStatement = null;

            try {
                assert finalConnection != null;
                preparedStatement = finalConnection.prepareStatement("INSERT INTO stocks(name,itemcode,amount,category,price,image)VALUES(?,?,?,?,?,?)");
            } catch (SQLException e) {
                e.printStackTrace();
            }

            try {
                if (preparedStatement != null) {
                    preparedStatement.setString(1, name.toUpperCase());
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (preparedStatement != null) {
                    preparedStatement.setString(2, barcode.toUpperCase());
                    //                System.out.println("user name=="+user);
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (preparedStatement != null) {
                    preparedStatement.setString(3, quantity.toUpperCase());
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (preparedStatement != null) {
                    preparedStatement.setString(4, category.toUpperCase());
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (preparedStatement != null) {
                    preparedStatement.setString(5, price.toUpperCase());
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                if (preparedStatement != null) {
                    try {
                        preparedStatement.setBinaryStream(6, FileUtils.openInputStream(file), length);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                //executequery
                if (preparedStatement != null) {
                    int rows = preparedStatement.executeUpdate();
                    if (rows > 0) {
                        System.out.println(rows);
                        showAlert(Alert.AlertType.INFORMATION, parentsstocks.getScene().getWindow(), "SUCCESS ", "YOUR ITEM WAS ADDED SUCCESSFULLY");
                        itemcode.clear();
                        itemname.clear();
                        itemprice.clear();
                        itemcategory.clear();
                        amount.clear();
                    } else {
                        showAlert(Alert.AlertType.WARNING, parentsstocks.getScene().getWindow(), "  FAILURE", "ERROR WHEN INSERTING ITEMS");

                    }
                }
            } catch (SQLException e) {
                e.printStackTrace();
            }
        });
        usescanner.setOnMousePressed(event -> {

//todo using scanner
        });
        employees.setOnAction(new EventHandler<ActionEvent>() {
            @Override
            public void handle(ActionEvent event) {
                parentsstocks.getChildren().removeAll();
                try {
                    parentsstocks.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/employees.fxml")))));
                } catch (IOException e) {
                    System.out.println(Arrays.toString(e.getStackTrace()));
                }
            }
        });
        delete.setOnAction(event -> {
            StockMaster store = table.getSelectionModel().getSelectedItem();

            try {
                assert finalConnection != null;
                PreparedStatement preparedStatement = finalConnection.prepareStatement("DELETE FROM stocks WHERE id=?");

                preparedStatement.setInt(1, store.getId());
                int updated = preparedStatement.executeUpdate();
                if (updated > 0) {
//                                updated
                    data = FXCollections.observableArrayList();

                    try {
                        if (finalConnection != null) {
                            PreparedStatement statement = finalConnection.prepareStatement("SELECT * FROM stores WHERE owner=?");
                            statement.setString(1, String.valueOf(user));
                            ResultSet resultSet = statement.executeQuery();
                            while (resultSet.next()) {
                                StockMaster stockMaster = new StockMaster();
                                stockMaster.setName(resultSet.getString("name"));
                                stockMaster.setAmount(resultSet.getString("amount"));
                                stockMaster.setBarcode(resultSet.getString("itemcode"));
                                stockMaster.setCategory(resultSet.getString("category"));
                                stockMaster.setPrice(resultSet.getString("price"));
                                stockMaster.setId(resultSet.getInt("id"));
                                data.add(stockMaster);
                                data.add(stockMaster);
                            }
                            table.setItems(data);
                        }
                    } catch (SQLException e) {
                        e.printStackTrace();
                    }

                    assert table != null : "fx:id=\"table\" was not injected: check your FXML ";
                    name.setCellValueFactory(
                            new PropertyValueFactory<StockMaster, String>("Name"));
                    price.setCellValueFactory(
                            new PropertyValueFactory<StockMaster, String>("Price"));
                    category.setCellValueFactory(
                            new PropertyValueFactory<StockMaster, String>("Category"));
                    quantity.setCellValueFactory(new PropertyValueFactory<StockMaster, String>("Amount"));
                    fetchItems();
                    table.refresh();
                    showAlert(Alert.AlertType.INFORMATION, parentsstocks.getScene().getWindow(), "ITEM REMOVED SUCCESSFULLY", "THE ITEM HAS BEEN REMOVED SUCCESSFULLY");

                } else {
//                                not updated
                    showAlert(Alert.AlertType.WARNING, parentsstocks.getScene().getWindow(), "ITEM COULDN'T BE REMOVED SUCCESSFULLY", "THE ITEM HAS NOT BEEN REMOVED SUCCESSFULLY");

                }

            } catch (SQLException e) {
                e.printStackTrace();
            }


        });
        existingstockdtab.setOnSelectionChanged(new EventHandler<Event>() {
            @Override
            public void handle(Event event) {
                fetchItems();
            }
        });
        fetchItems();

    }

    private void fetchItems() {

        data = FXCollections.observableArrayList();
        Connection connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        Connection finalConnection = connection;
        connection = null;
        try {
            connection = DriverManager
                    .getConnection(des[2], des[0], des[1]);
        } catch (SQLException e) {
            e.printStackTrace();
        }
        try {
            if (connection != null) {
                PreparedStatement statement = connection.prepareStatement("SELECT * FROM stocks order by id ASC ");
                ResultSet resultSet = statement.executeQuery();
                while (resultSet.next()) {
                    StockMaster storemaster = new StockMaster();
                    storemaster.setName(resultSet.getString("name"));
                    storemaster.setAmount(resultSet.getString("amount"));
                    storemaster.setBarcode(resultSet.getString("itemcode"));
                    storemaster.setCategory(resultSet.getString("category"));
                    storemaster.setPrice(resultSet.getString("price"));
                    storemaster.setId(resultSet.getInt("id"));
                    data.add(storemaster);
                }
                table.setItems(data);
            }
        } catch (SQLException e) {
            e.printStackTrace();
        }
        assert table != null : "fx:id=\"table\" was not injected: check your FXML ";
        name.setCellValueFactory(
                new PropertyValueFactory<StockMaster, String>("Name"));
        price.setCellValueFactory(
                new PropertyValueFactory<StockMaster, String>("Price"));
        category.setCellValueFactory(
                new PropertyValueFactory<StockMaster, String>("Category"));
        quantity.setCellValueFactory(new PropertyValueFactory<StockMaster, String>("Amount"));
        barcode.setCellValueFactory(new PropertyValueFactory<StockMaster, String>("Barcode"));
        table.refresh();

        table.setEditable(true);
        name.setCellFactory(TextFieldTableCell.forTableColumn());
        name.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<StockMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<StockMaster, String> t) {
                        ((StockMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue().toUpperCase();
                        PreparedStatement preparedStatement = null;
                        try {
                            StockMaster store = table.getSelectionModel().getSelectedItem();
                            String id = store.getId().toString();
                            preparedStatement = finalConnection.prepareStatement("UPDATE stocks set name=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        price.setCellFactory(TextFieldTableCell.forTableColumn());
        price.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<StockMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<StockMaster, String> t) {
                        ((StockMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            StockMaster store = table.getSelectionModel().getSelectedItem();
                            String id = store.getId().toString();
                            assert finalConnection != null;
                            preparedStatement = finalConnection.prepareStatement("UPDATE stocks set price=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        barcode.setCellFactory(TextFieldTableCell.forTableColumn());
        barcode.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<StockMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<StockMaster, String> t) {
                        ((StockMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            StockMaster store = table.getSelectionModel().getSelectedItem();
                            String id = store.getId().toString();
                            preparedStatement = finalConnection.prepareStatement("UPDATE stocks set itemcode=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        quantity.setCellFactory(TextFieldTableCell.forTableColumn());
        quantity.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<StockMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<StockMaster, String> t) {
                        ((StockMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            StockMaster store = table.getSelectionModel().getSelectedItem();
                            String id = store.getId().toString();
                            assert finalConnection != null;
                            preparedStatement = finalConnection.prepareStatement("UPDATE stocks set amount=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
        category.setCellFactory(TextFieldTableCell.forTableColumn());
        category.setOnEditCommit(
                new EventHandler<TableColumn.CellEditEvent<StockMaster, String>>() {
                    @Override
                    public void handle(TableColumn.CellEditEvent<StockMaster, String> t) {
                        ((StockMaster) t.getTableView().getItems().get(
                                t.getTablePosition().getRow())
                        ).setName(t.getNewValue());
                        String newval = t.getNewValue();
                        PreparedStatement preparedStatement = null;
                        try {
                            StockMaster store = table.getSelectionModel().getSelectedItem();
                            String id = store.getId().toString();
                            assert finalConnection != null;
                            preparedStatement = finalConnection.prepareStatement("UPDATE stocks set category=? where id=?");
                            preparedStatement.setString(1, newval.toUpperCase());
                            preparedStatement.setString(2, id);
                            preparedStatement.executeUpdate();
                        } catch (SQLException e) {
                            e.printStackTrace();
                        }

//                        preparedStatement.setString(1, name.getText());
                    }
                }
        );
    }

    private void menuclick() {
        logout.setOnAction(event -> {
            config.login.put("loggedout", true);

            try {
                parentsstocks.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/AuthenticationFiles/Login.fxml")))));
            } catch (IOException e) {
                e.printStackTrace();
            }

        });
    }

    @FXML
    private void close_app(MouseEvent event) {
        System.exit(0);
        Platform.exit();
    }

    private void showAlert(Alert.AlertType alertType, Window owner, String title, String message) {
        Alert alert = new Alert(alertType);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.initOwner(owner);
        alert.showAndWait();
    }

    private void time() {
        Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
            String mins = null, hrs = null, secs = null, pmam = null;
            try {
                int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
                int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
                int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

                if (hours >= 12) {
//                    hrs= "0"+String.valueOf(hours-12);
                    pmam = "PM";
                } else {
                    pmam = "AM";

                }
                if (minutes > 9) {
                    mins = String.valueOf(minutes);
                } else {
                    mins = "0" + minutes;

                }
                if (seconds > 9) {
                    secs = String.valueOf(seconds);
                } else {
                    secs = "0" + String.valueOf(seconds);

                }
            } catch (IOException e1) {
                e1.printStackTrace();
            }
            try {
                clock.setText(CheckConn.timelogin().getHours() + ":" + (mins) + ":" + (secs) + " " + pmam);
            } catch (IOException e1) {
                e1.printStackTrace();
            }
        }),
                new KeyFrame(Duration.seconds(1))
        );
        timeline.setCycleCount(Animation.INDEFINITE);
        timeline.play();
    }

}
package Controllers;

import Controllers.AuthenticationControllers.AnimationGenerator;
import javafx.event.EventHandler;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.Button;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.AnchorPane;
import securityandtime.config;

import java.io.IOException;
import java.net.URL;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

public class SleepingController implements Initializable {

    AnimationGenerator animationGenerator = null;
    private double xOffset = 0;
    private double yOffset = 0;
    @FXML
    private
    AnchorPane sleeping;
    @FXML
    private Button resume;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            assert false;
            Parent fxml;
            if (config.login.containsKey("logged in as admin")) {
                fxml = FXMLLoader.load(getClass().getResource("resourcefiles/panelAdmin.fxml"));
            } else {
                fxml = FXMLLoader.load(getClass().getResource("resourcefiles/panel.fxml"));
            }
            resume.setOnMousePressed(new EventHandler<MouseEvent>() {
                @Override
                public void handle(MouseEvent event) {
                    sleeping.getChildren().removeAll();
                    sleeping.getChildren().setAll(fxml);
                }
            });
//                }
//            });
        } catch (IOException ex) {
            Logger.getLogger(SleepingController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }


    public AnimationGenerator getAnimationGenerator() {
        return animationGenerator;
    }

    public void setAnimationGenerator(AnimationGenerator animationGenerator) {
        this.animationGenerator = animationGenerator;
    }

    public double getxOffset() {
        return xOffset;
    }

    public void setxOffset(double xOffset) {
        this.xOffset = xOffset;
    }

    public double getyOffset() {
        return yOffset;
    }

    public void setyOffset(double yOffset) {
        this.yOffset = yOffset;
    }

    public AnchorPane getSleeping() {
        return sleeping;
    }

    public void setSleeping(AnchorPane sleeping) {
        this.sleeping = sleeping;
    }

    public Button getResume() {
        return resume;
    }

    public void setResume(Button resume) {
        this.resume = resume;
    }
}
package Controllers;

import static securityandtime.config.pricegot;

public class SuperClass {
    public void completetransaction() {
// todo complete transaction and continue from here
//     unset price variables
        pricegot.clear();
//    print receipt

    }
}
package logging;

import java.io.IOException;
import java.util.logging.*;

public class LogClass {
    private static final Logger logger = Logger.getLogger(LogClass.class.getName());
    private Handler filehandler = null;
    private Handler consolehandler = null;

    public Handler getFilehandler() {
        return filehandler;
    }

    public void setFilehandler(Handler filehandler) {
        this.filehandler = filehandler;
    }

    public Handler getConsolehandler() {
        return consolehandler;
    }

    public void setConsolehandler(Handler consolehandler) {
        this.consolehandler = consolehandler;
    }

    LogClass() {
        try {
            consolehandler = new ConsoleHandler();
            filehandler = new FileHandler("./nanotechPOS.log");
        } catch (IOException e) {
            e.printStackTrace();
        }
        assert filehandler != null;
        logger.addHandler(filehandler);
        logger.addHandler(consolehandler);
        logger.setLevel(Level.ALL);
        logger.config("configuration level is set");
        logger.removeHandler(consolehandler);
    }

    public static Logger getLogger() {
        return logger;
    }
}

package MasterClasses;

import javafx.beans.property.SimpleStringProperty;

public class CategorySalesMasterClass {
    SimpleStringProperty categorysalesid=new SimpleStringProperty();
    SimpleStringProperty categorysalespayout=new SimpleStringProperty();
    SimpleStringProperty categorysalessalesperday=new SimpleStringProperty();

   SimpleStringProperty categorysalesname=new SimpleStringProperty();

    public String getCategorysalesid() {
        return categorysalesid.get();
    }

    public SimpleStringProperty categorysalesidProperty() {
        return categorysalesid;
    }

    public void setCategorysalesid(String categorysalesid) {
        this.categorysalesid.set(categorysalesid);
    }

    public String getCategorysalespayout() {
        return categorysalespayout.get();
    }

    public SimpleStringProperty categorysalespayoutProperty() {
        return categorysalespayout;
    }

    public void setCategorysalespayout(String categorysalespayout) {
        this.categorysalespayout.set(categorysalespayout);
    }

    public String getCategorysalessalesperday() {
        return categorysalessalesperday.get();
    }

    public SimpleStringProperty categorysalessalesperdayProperty() {
        return categorysalessalesperday;
    }

    public void setCategorysalessalesperday(String categorysalessalesperday) {
        this.categorysalessalesperday.set(categorysalessalesperday);
    }

    public String getCategorysalesname() {
        return categorysalesname.get();
    }

    public SimpleStringProperty categorysalesnameProperty() {
        return categorysalesname;
    }

    public void setCategorysalesname(String categorysalesname) {
        this.categorysalesname.set(categorysalesname);
    }
}
package MasterClasses;

import javafx.beans.property.SimpleStringProperty;

public class CarWashMaster {
    public SimpleStringProperty Id = new SimpleStringProperty();
    public SimpleStringProperty idnum = new SimpleStringProperty();
    public SimpleStringProperty Name = new SimpleStringProperty();
    public SimpleStringProperty regno = new SimpleStringProperty();
    public SimpleStringProperty contact = new SimpleStringProperty();
    public SimpleStringProperty date = new SimpleStringProperty();
    public SimpleStringProperty status = new SimpleStringProperty();
    public SimpleStringProperty operator = new SimpleStringProperty();
    public SimpleStringProperty cash = new SimpleStringProperty();

    public String getCash() {
        return cash.get();
    }

    public void setCash(String cash) {
        this.cash.set(cash);
    }

    public SimpleStringProperty cashProperty() {
        return cash;
    }

    public String getIdnum() {
        return idnum.get();
    }

    public void setIdnum(String idnum) {
        this.idnum.set(idnum);
    }

    public SimpleStringProperty idnumProperty() {
        return idnum;
    }

    public String getId() {
        return Id.get();
    }

    public void setId(String id) {
        this.Id.set(id);
    }

    public SimpleStringProperty idProperty() {
        return Id;
    }

    public String getName() {
        return Name.get();
    }

    public void setName(String name) {
        this.Name.set(name);
    }

    public SimpleStringProperty nameProperty() {
        return Name;
    }

    public String getRegno() {
        return regno.get();
    }

    public void setRegno(String regno) {
        this.regno.set(regno);
    }

    public SimpleStringProperty regnoProperty() {
        return regno;
    }

    public String getContact() {
        return contact.get();
    }

    public void setContact(String contact) {
        this.contact.set(contact);
    }

    public SimpleStringProperty contactProperty() {
        return contact;
    }

    public String getDate() {
        return date.get();
    }

    public void setDate(String date) {
        this.date.set(date);
    }

    public SimpleStringProperty dateProperty() {
        return date;
    }

    public String getStatus() {
        return status.get();
    }

    public void setStatus(String status) {
        this.status.set(status);
    }

    public SimpleStringProperty statusProperty() {
        return status;
    }

    public String getOperator() {
        return operator.get();
    }

    public void setOperator(String operator) {
        this.operator.set(operator);
    }

    public SimpleStringProperty operatorProperty() {
        return operator;
    }


}
package MasterClasses;

public class ChatMaster {
}
package MasterClasses;

import javafx.beans.property.SimpleStringProperty;

public class EmployeeMaster {
    public SimpleStringProperty Id = new SimpleStringProperty();
    public SimpleStringProperty Name = new SimpleStringProperty();
    public SimpleStringProperty storeLocation = new SimpleStringProperty();
    public SimpleStringProperty email = new SimpleStringProperty();
    public SimpleStringProperty dateAdded = new SimpleStringProperty();
    public SimpleStringProperty number = new SimpleStringProperty();

    public String getDateAdded() {
        return dateAdded.get();
    }

    public void setDateAdded(String dateAdded) {
        this.dateAdded.set(dateAdded);
    }

    public String getEmail() {
        return email.get();
    }

    public void setEmail(String email) {
        this.email.set(email);
    }

    public String getId() {
        return Id.get();
    }

    public void setId(String id) {
        this.Id.set(id);
    }

    public String getName() {
        return Name.get();
    }

    public void setName(String name) {
        this.Name.set(name);
    }

    public String getStoreLocation() {
        return storeLocation.get();
    }

    public void setStoreLocation(String storeLocation) {
        this.storeLocation.set(storeLocation);
    }

    public String getNumber() {
        return number.get();
    }

    public void setNumber(String number) {
        this.number.set(number);
    }
}
package MasterClasses;

import javafx.beans.property.SimpleDoubleProperty;
import javafx.beans.property.SimpleStringProperty;

public class ItemStocksMaster extends StockMaster{
//use name,id and amount from superclass
private SimpleStringProperty payout=new SimpleStringProperty();
    private SimpleDoubleProperty salesperday=new SimpleDoubleProperty();

    public String getPayout() {
        return payout.get();
    }

    public SimpleStringProperty payoutProperty() {
        return payout;
    }

    public void setPayout(String payout) {
        this.payout.set(payout);
    }

    public double getSalesperday() {
        return salesperday.get();
    }

    public SimpleDoubleProperty salesperdayProperty() {
        return salesperday;
    }

    public void setSalesperday(double salesperday) {
        this.salesperday.set(salesperday);
    }
}
package MasterClasses;

public class OnlineUsersMaster {
}
package MasterClasses;

import java.awt.*;
import java.awt.print.*;
import java.sql.*;

import static securityandtime.config.localCartDb;

public class ReceiptMasterClass {

    private Connection connectionDbLocal;

    {
        try {
            connectionDbLocal = DriverManager.getConnection(localCartDb);
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    private Statement statementLocal;

    {
        try {
            assert false;
            statementLocal = connectionDbLocal.createStatement();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    ResultSet resultSet;

    {
        try {
            resultSet = statementLocal.executeQuery("SELECT itemname,itemprice,amount,cumulativeprice FROM cartItems");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public ReceiptMasterClass() {
        StringBuffer billBuffer = new StringBuffer();
        while (true) {
            try {
                if (!resultSet.next()) break;
            } catch (SQLException e) {
                e.printStackTrace();
            }
            try {
                billBuffer.append(resultSet.getString("itemname")).append("\t\t    ").
                        append(resultSet.getString("itemprice")).append("\t\t    ").
                        append(resultSet.getString("amount")).append("\t\t    ").
                        append(resultSet.getString("cumulativeprice")).append("\n\n");
                billBuffer.append(System.getProperty("line.separator"));
            } catch (SQLException e) {
                e.printStackTrace();
            }
        }
        printCard(billBuffer.toString());
    }

    public boolean printCard(final String bill) {
        final PrinterJob job = PrinterJob.getPrinterJob();


        Printable contentToPrint = new Printable() {
            @Override
            public int print(Graphics graphics, PageFormat pageFormat, int pageIndex) throws PrinterException {


                Graphics2D g2d = (Graphics2D) graphics;

                g2d.translate(pageFormat.getImageableX(), pageFormat.getImageableY());
                g2d.setFont(new Font("Algerian", Font.BOLD, 10));

                String[] billz = bill.split(";");
                int y = 15;
                //draw each String in a separate line
                for (String s : billz) {
                    graphics.drawString(s, 5, y);
                    y = y + 15;
                }

                if (pageIndex > 0) {
                    return NO_SUCH_PAGE;
                } //Only one page


                return PAGE_EXISTS;
            }


        };
        PageFormat pageFormat = new PageFormat();
        pageFormat.setOrientation(PageFormat.PORTRAIT);
        Paper pPaper = pageFormat.getPaper();

        pPaper.setSize(8000, 10000000);
        pPaper.setImageableArea(0, 0, pPaper.getWidth(), pPaper.getHeight() - 2);
        pageFormat.setPaper(pPaper);

        job.setPrintable(contentToPrint, pageFormat);


        try {
            job.print();

        } catch (PrinterException e) {
            System.err.println(e.getMessage());
        }
        return true;
    }

}
package MasterClasses;

import javafx.beans.property.SimpleStringProperty;

public class SalesMaster {
    protected SimpleStringProperty employeetransid = new SimpleStringProperty();
    protected SimpleStringProperty transprice = new SimpleStringProperty();
    protected SimpleStringProperty transpaid = new SimpleStringProperty();
    protected SimpleStringProperty transmethod = new SimpleStringProperty();
    protected SimpleStringProperty transbalance = new SimpleStringProperty();
    protected SimpleStringProperty transcompletion = new SimpleStringProperty();

    public String getEmployeetransid() {
        return employeetransid.get();
    }

    public SimpleStringProperty employeetransidProperty() {
        return employeetransid;
    }

    public void setEmployeetransid(String employeetransid) {
        this.employeetransid.set(employeetransid);
    }

    public String getTransprice() {
        return transprice.get();
    }

    public SimpleStringProperty transpriceProperty() {
        return transprice;
    }

    public void setTransprice(String transprice) {
        this.transprice.set(transprice);
    }

    public String getTranspaid() {
        return transpaid.get();
    }

    public SimpleStringProperty transpaidProperty() {
        return transpaid;
    }

    public void setTranspaid(String transpaid) {
        this.transpaid.set(transpaid);
    }

    public String getTransmethod() {
        return transmethod.get();
    }

    public SimpleStringProperty transmethodProperty() {
        return transmethod;
    }

    public void setTransmethod(String transmethod) {
        this.transmethod.set(transmethod);
    }

    public String getTransbalance() {
        return transbalance.get();
    }

    public SimpleStringProperty transbalanceProperty() {
        return transbalance;
    }

    public void setTransbalance(String transbalance) {
        this.transbalance.set(transbalance);
    }

    public String getTranscompletion() {
        return transcompletion.get();
    }

    public SimpleStringProperty transcompletionProperty() {
        return transcompletion;
    }

    public void setTranscompletion(String transcompletion) {
        this.transcompletion.set(transcompletion);
    }
}
package MasterClasses;

import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;

public class StockMaster {
    public ObjectProperty itemPic = new SimpleObjectProperty();
    public SimpleStringProperty amount = new SimpleStringProperty();
    private SimpleIntegerProperty Id = new SimpleIntegerProperty();
    private ObjectProperty Pic = new SimpleObjectProperty();
    private SimpleStringProperty Name = new SimpleStringProperty();
    private SimpleStringProperty barcode = new SimpleStringProperty();
    private SimpleStringProperty price = new SimpleStringProperty();
    private SimpleStringProperty dateAdded = new SimpleStringProperty();
    private SimpleStringProperty category = new SimpleStringProperty();
    private SimpleStringProperty quantity = new SimpleStringProperty();

    public Object getItemPic() {
        return itemPic.get();
    }

    public void setItemPic(Object itemPic) {
        this.itemPic.set(itemPic);
    }

    public ObjectProperty itemPicProperty() {
        return itemPic;
    }

    public String getCategory() {
        return category.get();
    }

    public void setCategory(String category) {
        this.category.set(category);
    }

    public SimpleStringProperty categoryProperty() {
        return category;
    }

    public String getQuantity() {
        return quantity.get();
    }

    public void setQuantity(String quantity) {
        this.quantity.set(quantity);
    }

    public SimpleStringProperty quantityProperty() {
        return quantity;
    }

    public Integer getId() {
        return Id.get();
    }

    public void setId(Integer id) {
        this.Id.set(id);
    }

    public SimpleIntegerProperty idProperty() {
        return Id;
    }

    public Object getPic() {
        return Pic.get();
    }

    public void setPic(Object pic) {
        this.Pic.set(pic);
    }

    public ObjectProperty picProperty() {
        return Pic;
    }

    public String getName() {
        return Name.get();
    }

    public void setName(String name) {
        this.Name.set(name);
    }

    public SimpleStringProperty nameProperty() {
        return Name;
    }

    public String getBarcode() {
        return barcode.get();
    }

    public void setBarcode(String barcode) {
        this.barcode.set(barcode);
    }

    public SimpleStringProperty barcodeProperty() {
        return barcode;
    }

    public String getPrice() {
        return price.get();
    }

    public void setPrice(String price) {
        this.price.set(price);
    }

    public SimpleStringProperty priceProperty() {
        return price;
    }

    public String getDateAdded() {
        return dateAdded.get();
    }

    public void setDateAdded(String dateAdded) {
        this.dateAdded.set(dateAdded);
    }

    public SimpleStringProperty dateAddedProperty() {
        return dateAdded;
    }

    public String getAmount() {
        return amount.get();
    }

    public void setAmount(String amount) {
        this.amount.set(amount);
    }

    public SimpleStringProperty amountProperty() {
        return amount;
    }

}
package MasterClasses;

import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;

public class Storemaster {
    public SimpleStringProperty storeId = new SimpleStringProperty();
    public SimpleStringProperty storeName = new SimpleStringProperty();
    public SimpleStringProperty storeLocation = new SimpleStringProperty();
    public SimpleStringProperty employeeNumber = new SimpleStringProperty();
    private ObjectProperty storePic = new SimpleObjectProperty();
    private SimpleStringProperty storeDescription = new SimpleStringProperty();
    private SimpleStringProperty dateAdded = new SimpleStringProperty();

    public String getStoreId() {
        return storeId.get();
    }

    public void setStoreId(String storeId) {
        this.storeId.set(storeId);
    }

    public Object getStorePic() {
        return storePic.get();
    }

    public String getStoreName() {
        return storeName.get();
    }

    public void setStoreName(String storeName) {
        this.storeName.set(storeName);
    }

    public String getStoreLocation() {
        return storeLocation.get();
    }

    public void setStoreLocation(String storeLocation) {
        this.storeLocation.set(storeLocation);
    }

    public String getStoreDescription() {
        return storeDescription.get();
    }

    public void setStoreDescription(String storeDescription) {
        this.storeDescription.set(storeDescription);
    }

    public String getDateAdded() {
        return dateAdded.get();
    }

    public String getEmployeeNumber() {
        return employeeNumber.get();
    }

    public void setEmployeeNumber(String employeeNumber) {
        this.employeeNumber.set(employeeNumber);
    }

}
package OnlinePayments.Mpesa;//Please try again later.
//        Creating a HTTP Server Listener

//Requires the following libraries. Maven repositories given below

import com.sun.net.httpserver.HttpExchange;
import com.sun.net.httpserver.HttpHandler;
import com.sun.net.httpserver.HttpServer;
import org.json.simple.JSONObject;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.InetSocketAddress;

public class Hookah {
    private HttpServer server;

    public Hookah() {
        try {
            //Define the port over which the listener will accept requests
            int port = 80;

            server = HttpServer.create(new InetSocketAddress(port), 0);
            /**
             * Create the context (endpoint/URL) which will be triggered when the request
             * hits the above specified port. This will resolve to a URL like
             * 'http://address:port/context'. E.g. the context below would
             * resolve to 'http://127.0.0.1:80/confirm' on the local computer. Then
             * the Handler will handle the request received via the given URL.
             *
             * You may create a separate context for every endpoint you need
             */
            server.createContext("http://faa094a9.ngrok.io", new ConfirmHandler());

            server.setExecutor(null);

            //start the server
            server.start();
            System.out.println("Server started");
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String args[]) {
        Hookah main = new Hookah();
    }

    /**
     * Class to handle incoming requests based on specified Contexts, you can
     * create a class for each separate context/URL
     */
    public class ConfirmHandler implements HttpHandler {
        @Override
        public void handle(HttpExchange he) throws IOException {
            /**
             * handle the request which comes through the '/confirm' context
             */
            System.out.println("Request received");

            /**
             * Buffer and store the response in a string
             */
            BufferedReader br = new BufferedReader(new InputStreamReader(he.getRequestBody(), "UTF-8"));
            String line = "";
            StringBuilder buffer = new StringBuilder();
            while ((line = br.readLine()) != null) {
                buffer.append(line);
            }

            /**
             * Once buffered, you can perform any other processing
             * you need on the buffered response e.g. print out the response...
             */
            System.out.println("Res: " + buffer.toString());

            /**
             * Prepare the response, assuming no errors have occurred. Any response
             * other than a 0 (zero) for the 'ResultCode' during Validation means an
             * error occurred and the transaction is cancelled
             */
            JSONObject obj = new JSONObject();
            obj.put("ResultCode", 0);
            obj.put("ResultDesc", "The service was accepted successfully");
            obj.put("ThirdPartyTransID", "1234567890");

            /**
             * Respond to the server appropriately
             */
            String res = obj.toJSONString();
            he.sendResponseHeaders(200, res.length());
            OutputStream os = he.getResponseBody();
            os.write(res.getBytes("UTF-8"));
            os.close();
        }
    }
}
package OnlinePayments.Mpesa;

import okhttp3.*;
import org.json.JSONArray;
import org.json.JSONObject;

import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.util.Base64;

public class Mpesa {
    String appKey;
    String appSecret;

    public Mpesa(String app_key, String app_secret) {
        appKey = app_key;
        appSecret = app_secret;
    }

    public static void main(String[] args) throws IOException {
        Mpesa m = new Mpesa(" TUwV9xjSRFjtuGbWHciwm1Tz1ol9sYJy ", "ahp5qBo9c3YMtG3S");
        m.STKPushSimulation("601506", "bfb279f9aa9bdbcf158e97dd71a467cd2e0c893059b10f78e6b72ada1ed2c919", "20170824155055", "CustomerPayBillOnline", "1", "254702653268", "254702653268", "601506", "http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation", "http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation", "sasas", "asdasd");

        m.authenticate();
        /*m.C2BSimulation("600576","CustomerPayBillOnline","2","254708374149","hkjhjkhjkh");
        m.authenticate();*/
/*
        m.B2CRequest("testapi","BVeDP3XWGFG+NCQri04jHp6c0rCajO1JAOccQ7Bsu/Mup3Rh2Gd9IHQEE0SeA1oBXAt/VBAL/cJP+VKU9qRF6voqCa0P1XG8pcv5hTZUcBkbbb8Qqvqn28+s/tBvsLXwsB4QaageFDDZgS6b6gbK1p7+UZ/hRYHL8WclTpYBrQGfhqKZxduh0bPWvK4rt+uqR3hdVlO0RdJSkcOVCVp+FxizPSk3nI6LFq14Jj2G0TwuQ4a13J/KVu5eeFG65gzE1NnIVouHKeBPz9b9xvove156aR16uxh4rBq5U6UAKC/kUhaJ0wOLTvb762CioudL87C6xaPVdTF4qcSD6jM4PA==","BusinessPayment","22","600576","254708374149","This","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BConfirmation","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation");
*/
/*
        m.B2BRequest("testapi","his","BVeDP3XWGFG+NCQri04jHp6c0rCajO1JAOccQ7Bsu/Mup3Rh2Gd9IHQEE0SeA1oBXAt/VBAL/cJP+VKU9qRF6voqCa0P1XG8pcv5hTZUcBkbbb8Qqvqn28+s/tBvsLXwsB4QaageFDDZgS6b6gbK1p7+UZ/hRYHL8WclTpYBrQGfhqKZxduh0bPWvK4rt+uqR3hdVlO0RdJSkcOVCVp+FxizPSk3nI6LFq14Jj2G0TwuQ4a13J/KVu5eeFG65gzE1NnIVouHKeBPz9b9xvove156aR16uxh4rBq5U6UAKC/kUhaJ0wOLTvb762CioudL87C6xaPVdTF4qcSD6jM4PA==","BusinessPayBill","1", "4",22,"600576","600000","This","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BConfirmation","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation");
*/


/*
        m.reversal("testapi","BVeDP3XWGFG+NCQri04jHp6c0rCajO1JAOccQ7Bsu/Mup3Rh2Gd9IHQEE0SeA1oBXAt/VBAL/cJP+VKU9qRF6voqCa0P1XG8pcv5hTZUcBkbbb8Qqvqn28+s/tBvsLXwsB4QaageFDDZgS6b6gbK1p7+UZ/hRYHL8WclTpYBrQGfhqKZxduh0bPWvK4rt+uqR3hdVlO0RdJSkcOVCVp+FxizPSk3nI6LFq14Jj2G0TwuQ4a13J/KVu5eeFG65gzE1NnIVouHKeBPz9b9xvove156aR16uxh4rBq5U6UAKC/kUhaJ0wOLTvb762CioudL87C6xaPVdTF4qcSD6jM4PA==","TransactionReversal","2121","2","22","4","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BConfirmation","Remarks","Ocassions");
*/
/*
        m.registerURL("600576","Cancelled","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BValidation");
*/
/*
        System.out.println("Hello World!");
*/
/*
        m.balanceInquiry("testapi","AccountBalance","BVeDP3XWGFG+NCQri04jHp6c0rCajO1JAOccQ7Bsu/Mup3Rh2Gd9IHQEE0SeA1oBXAt/VBAL/cJP+VKU9qRF6voqCa0P1XG8pcv5hTZUcBkbbb8Qqvqn28+s/tBvsLXwsB4QaageFDDZgS6b6gbK1p7+UZ/hRYHL8WclTpYBrQGfhqKZxduh0bPWvK4rt+uqR3hdVlO0RdJSkcOVCVp+FxizPSk3nI6LFq14Jj2G0TwuQ4a13J/KVu5eeFG65gzE1NnIVouHKeBPz9b9xvove156aR16uxh4rBq5U6UAKC/kUhaJ0wOLTvb762CioudL87C6xaPVdTF4qcSD6jM4PA==", "600576","4","These","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BConfirmation","http://obscure-bayou-52273.herokuapp.com/api/Mpesa/C2BConfirmation");
*/
/*
        m.STKPushTransactionStatus("174379","MTc0Mzc5YmZiMjc5ZjlhYTliZGJjZjE1OGU5N2RkNzFhNDY3Y2QyZTBjODkzMDU5YjEwZjc4ZTZiNzJhZGExZWQyYzkxOTIwMTcwODI0MTU1MDU1","20170824155055","ws_CO_27102017101215530");
*/
    }

    public String authenticate() throws IOException {
        String app_key = appKey/*"GvzjNnYgNJtwgwfLBkZh65VPwfuKvs0V"*/;
        String app_secret = appSecret;
        String appKeySecret = app_key + ":" + app_secret;
        byte[] bytes = appKeySecret.getBytes(StandardCharsets.ISO_8859_1);
        String encoded = Base64.getEncoder().encodeToString(bytes);


        OkHttpClient client = new OkHttpClient();

        Request request = new Request.Builder()
                .url("https://sandbox.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials")
                .get()
                .addHeader("authorization", "Basic " + encoded)
                .addHeader("cache-control", "no-cache")

                .build();

        Response response = client.newCall(request).execute();
        assert response.body() != null;
        JSONObject jsonObject = new JSONObject(response.body().string());
        System.out.println(jsonObject.getString("access_token"));
        return jsonObject.getString("access_token");
    }

    public String C2BSimulation(String shortCode, String commandID, String amount, String MSISDN, String billRefNumber) throws IOException {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("ShortCode", shortCode);
        jsonObject.put("CommandID", commandID);
        jsonObject.put("Amount", amount);
        jsonObject.put("Msisdn", MSISDN);
        jsonObject.put("BillRefNumber", billRefNumber);

        jsonArray.put(jsonObject);

        String requestJson = jsonArray.toString().replaceAll("[\\[\\]]", "");
        System.out.println(requestJson);
        OkHttpClient client = new OkHttpClient();

        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, requestJson);
        Request request = new Request.Builder()
                .url("https://sandbox.safaricom.co.ke/safaricom/c2b/v1/simulate")
                .post(body)
                .addHeader("content-type", "application/json")
                .addHeader("authorization", "Bearer " + authenticate())
                .addHeader("cache-control", "no-cache")
                .build();

        Response response = client.newCall(request).execute();
        assert response.body() != null;
        System.out.println(response.body().string());
        return response.body().toString();
    }

    public String B2CRequest(String initiatorName, String securityCredential, String commandID, String amount, String partyA, String partyB, String remarks, String queueTimeOutURL, String resultURL, String occassion) throws IOException {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("InitiatorName", initiatorName);
        jsonObject.put("SecurityCredential", securityCredential);
        jsonObject.put("CommandID", commandID);
        jsonObject.put("Amount", amount);
        jsonObject.put("PartyA", partyA);
        jsonObject.put("PartyB", partyB);
        jsonObject.put("Remarks", remarks);
        jsonObject.put("QueueTimeOutURL", queueTimeOutURL);
        jsonObject.put("ResultURL", resultURL);
        jsonObject.put("Occassion", occassion);


        jsonArray.put(jsonObject);

        String requestJson = jsonArray.toString().replaceAll("[\\[\\]]", "");


        OkHttpClient client = new OkHttpClient();
        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, requestJson);
        Request request = new Request.Builder()
                .url("https://sandbox.safaricom.co.ke/mpesa/b2c/v1/paymentrequest")
                .post(body)
                .addHeader("content-type", "application/json")
                .addHeader("authorization", "Bearer " + authenticate())
                .addHeader("cache-control", "no-cache")
                .build();

        Response response = client.newCall(request).execute();
        assert response.body() != null;
        System.out.println(response.body().string());
        return response.body().toString();
    }

    public String B2BRequest(String initiatorName, String accountReference, String securityCredential, String commandID, String senderIdentifierType, String receiverIdentifierType, float amount, String partyA, String partyB, String remarks, String queueTimeOutURL, String resultURL, String occassion) throws IOException {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("Initiator", initiatorName);
        jsonObject.put("SecurityCredential", securityCredential);
        jsonObject.put("CommandID", commandID);
        jsonObject.put("SenderIdentifierType", senderIdentifierType);
        jsonObject.put("RecieverIdentifierType", receiverIdentifierType);
        jsonObject.put("Amount", amount);
        jsonObject.put("PartyA", partyA);
        jsonObject.put("PartyB", partyB);
        jsonObject.put("Remarks", remarks);
        jsonObject.put("AccountReference", accountReference);
        jsonObject.put("QueueTimeOutURL", queueTimeOutURL);
        jsonObject.put("ResultURL", resultURL);


        jsonArray.put(jsonObject);

        String requestJson = jsonArray.toString().replaceAll("[\\[\\]]", "");
        System.out.println(requestJson);

        OkHttpClient client = new OkHttpClient();

        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, requestJson);
        Request request = new Request.Builder()
                .url("https://sandbox.safaricom.co.ke/safaricom/b2b/v1/paymentrequest")
                .post(body)
                .addHeader("content-type", "application/json")
                .addHeader("authorization", "Bearer " + authenticate())
                .addHeader("cache-control", "no-cache")

                .build();

        Response response = client.newCall(request).execute();
        return response.body().string();

    }

    public String STKPushSimulation(String businessShortCode, String password, String timestamp, String transactionType, String amount, String phoneNumber, String partyA, String partyB, String callBackURL, String queueTimeOutURL, String accountReference, String transactionDesc) throws IOException {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("BusinessShortCode", businessShortCode);
        jsonObject.put("Password", password);
        jsonObject.put("Timestamp", timestamp);
        jsonObject.put("TransactionType", transactionType);
        jsonObject.put("Amount", amount);
        jsonObject.put("PhoneNumber", phoneNumber);
        jsonObject.put("PartyA", partyA);
        jsonObject.put("PartyB", partyB);
        jsonObject.put("CallBackURL", callBackURL);
        jsonObject.put("AccountReference", accountReference);
        jsonObject.put("QueueTimeOutURL", queueTimeOutURL);
        jsonObject.put("TransactionDesc", transactionDesc);


        jsonArray.put(jsonObject);

        String requestJson = jsonArray.toString().replaceAll("[\\[\\]]", "");

        OkHttpClient client = new OkHttpClient();
        String url = "https://sandbox.safaricom.co.ke/mpesa/stkpush/v1/processrequest";
        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, requestJson);
        Request request = new Request.Builder()
                .url(url)
                .post(body)
                .addHeader("content-type", "application/json")
                .addHeader("authorization", "Bearer " + authenticate())
                .addHeader("cache-control", "no-cache")
                .build();


        Response response = client.newCall(request).execute();
        assert response.body() != null;
        System.out.println(response.body().string());
        return response.body().toString();
    }

    public String STKPushTransactionStatus(String businessShortCode, String password, String timestamp, String checkoutRequestID) throws IOException {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("BusinessShortCode", businessShortCode);
        jsonObject.put("Password", password);
        jsonObject.put("Timestamp", timestamp);
        jsonObject.put("CheckoutRequestID", checkoutRequestID);


        jsonArray.put(jsonObject);

        String requestJson = jsonArray.toString().replaceAll("[\\[\\]]", "");


        OkHttpClient client = new OkHttpClient();

        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, requestJson);
        Request request = new Request.Builder()
                .url("https://sandbox.safaricom.co.ke/mpesa/stkpushquery/v1/query")
                .post(body)
                .addHeader("authorization", "Bearer " + authenticate())
                .addHeader("content-type", "application/json")
                .build();

        Response response = client.newCall(request).execute();
        assert response.body() != null;
        System.out.println(response.body().string());
        return response.body().toString();

    }

    public String reversal(String initiator, String securityCredential, String commandID, String transactionID, String amount, String receiverParty, String recieverIdentifierType, String resultURL, String queueTimeOutURL, String remarks, String ocassion) throws IOException {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("Initiator", initiator);
        jsonObject.put("SecurityCredential", securityCredential);
        jsonObject.put("CommandID", commandID);
        jsonObject.put("TransactionID", transactionID);
        jsonObject.put("Amount", amount);
        jsonObject.put("ReceiverParty", receiverParty);
        jsonObject.put("RecieverIdentifierType", recieverIdentifierType);
        jsonObject.put("QueueTimeOutURL", queueTimeOutURL);
        jsonObject.put("ResultURL", resultURL);
        jsonObject.put("Remarks", remarks);
        jsonObject.put("Occasion", ocassion);


        jsonArray.put(jsonObject);

        String requestJson = jsonArray.toString().replaceAll("[\\[\\]]", "");
        System.out.println(requestJson);

        OkHttpClient client = new OkHttpClient();

        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, requestJson);
        Request request = new Request.Builder()
                .url("https://sandbox.safaricom.co.ke/safaricom/reversal/v1/request")
                .post(body)
                .addHeader("content-type", "application/json")
                .addHeader("authorization", "Bearer xNA3e9KhKQ8qkdTxJJo7IDGkpFNV")
                .addHeader("cache-control", "no-cache")
                .build();

        Response response = client.newCall(request).execute();
        assert response.body() != null;
        System.out.println(response.body().string());
        return response.body().string();
    }

    public String balanceInquiry(String initiator, String commandID, String securityCredential, String partyA, String identifierType, String remarks, String queueTimeOutURL, String resultURL) throws IOException {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("Initiator", initiator);
        jsonObject.put("SecurityCredential", securityCredential);
        jsonObject.put("CommandID", commandID);
        jsonObject.put("PartyA", partyA);
        jsonObject.put("IdentifierType", identifierType);
        jsonObject.put("Remarks", remarks);
        jsonObject.put("QueueTimeOutURL", queueTimeOutURL);
        jsonObject.put("ResultURL", resultURL);


        jsonArray.put(jsonObject);

        String requestJson = jsonArray.toString().replaceAll("[\\[\\]]", "");
        System.out.println(requestJson);

        OkHttpClient client = new OkHttpClient();

        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, requestJson);
        Request request = new Request.Builder()
                .url("https://sandbox.safaricom.co.ke/safaricom/accountbalance/v1/query")
                .post(body)
                .addHeader("content-type", "application/json")
                .addHeader("authorization", "Bearer fwu89P2Jf6MB1A2VJoouPg0BFHFM")
                .addHeader("cache-control", "no-cache")
                .addHeader("postman-token", "2aa448be-7d56-a796-065f-b378ede8b136")
                .build();

        Response response = client.newCall(request).execute();
        assert response.body() != null;
        return response.body().string();
    }

    public String registerURL(String shortCode, String responseType, String confirmationURL, String validationURL) throws IOException {
        JSONArray jsonArray = new JSONArray();
        JSONObject jsonObject = new JSONObject();
        jsonObject.put("ShortCode", shortCode);
        jsonObject.put("ResponseType", responseType);
        jsonObject.put("ConfirmationURL", confirmationURL);
        jsonObject.put("ValidationURL", validationURL);


        jsonArray.put(jsonObject);

        String requestJson = jsonArray.toString().replaceAll("[\\[\\]]", "");
        System.out.println(requestJson);

        OkHttpClient client = new OkHttpClient();

        MediaType mediaType = MediaType.parse("application/json");
        RequestBody body = RequestBody.create(mediaType, requestJson);
        Request request = new Request.Builder()
                .url("https://sandbox.safaricom.co.ke/mpesa/c2b/v1/registerurl")
                .post(body)
                .addHeader("content-type", "application/json")
                .addHeader("authorization", "Bearer " + authenticate())
                .addHeader("cache-control", "no-cache")
                .build();

        Response response = client.newCall(request).execute();
        assert response.body() != null;
        System.out.println(response.body().string());
        return response.body().string();
    }
}


<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>

<AnchorPane fx:id="panel" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" style="-fx-background-color: white;" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.AuthenticationControllers.LicensingController">
   <children>
      <AnchorPane prefHeight="204.0" prefWidth="600.0" style="-fx-background-color: black;">
         <children>
            <Label alignment="CENTER" layoutX="68.0" layoutY="7.0" prefHeight="34.0" prefWidth="464.0" text="WELCOME TO YOUR POS OF CHOICE" textFill="RED">
               <font>
                  <Font name="Book Antiqua" size="25.0" />
               </font>
            </Label>
            <Button fx:id="getlicensebutton" layoutX="45.0" layoutY="81.0" mnemonicParsing="false" prefHeight="42.0" prefWidth="157.0" style="-fx-background-color: red;" text="GET LICENSE">
               <font>
                  <Font size="15.0" />
               </font>
            </Button>
            <Button fx:id="otherproducts" layoutX="362.0" layoutY="81.0" mnemonicParsing="false" prefHeight="42.0" prefWidth="157.0" style="-fx-background-color: yellow;" text="OTHER PRODUCTS">
               <font>
                  <Font size="15.0" />
               </font>
            </Button>
         </children>
      </AnchorPane>
      <AnchorPane fx:id="draggablepane" layoutY="204.0" prefHeight="204.0" prefWidth="600.0" style="-fx-background-color: black;">
         <children>
            <TextArea fx:id="licensearea" layoutX="14.0" layoutY="10.0" prefHeight="151.0" prefWidth="423.0" promptText="DRAG AND DROP YOUR LICENCE FILE HERE OR COPY ITS CONTENTS HERE" styleClass="licensetext" stylesheets="@../styles/licensing.css" />
            <Button fx:id="confirm" layoutX="446.0" layoutY="65.0" mnemonicParsing="false" prefHeight="42.0" prefWidth="125.0" text="CONFIRM LICENSE" />
         </children>
      </AnchorPane>
   </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.*?>
<?import java.net.URL?>
<AnchorPane xmlns:fx="http://javafx.com/fxml/1" fx:id="parent" prefHeight="700.0" prefWidth="1200.0"
            styleClass="form" xmlns="http://javafx.com/javafx/11.0.1"
            fx:controller="Controllers.AuthenticationControllers.LoginController">
    <Hyperlink fx:id="link" layoutX="629.0" layoutY="572.0" prefHeight="34.0" prefWidth="179.0" text="NanotechSoftwares"
               textFill="#f50707" underline="true">
        <font>
            <Font size="17.0"/>
        </font>
    </Hyperlink>
    <Label layoutX="530.0" layoutY="576.0" prefHeight="30.0" prefWidth="92.0" text="Powered by" textFill="#fff4f4">
        <font>
            <Font size="17.0"/>
        </font>
    </Label>
    <AnchorPane layoutX="284.0" layoutY="24.0" prefHeight="533.0" prefWidth="626.0" styleClass="forminner">
        <children>
            <Label fx:id="message" alignment="CENTER" layoutX="64.0" layoutY="61.0" prefHeight="49.0" prefWidth="502.0"
                   text="testing" textAlignment="CENTER">
                <font>
                    <Font name="FangSong" size="33.0"/>
                </font>
            </Label>
            <Label fx:id="clock" alignment="CENTER" contentDisplay="CENTER" layoutX="6.0" layoutY="120.0"
                   prefHeight="69.0" prefWidth="613.0" stylesheets="@../styles/Login.css" text="testing2"
                   textAlignment="CENTER">
                <font>
                    <Font name="Gabriola" size="57.0"/>
                </font>
            </Label>
            <TextField fx:id="email" alignment="CENTER" layoutX="177.0" layoutY="215.0" prefHeight="49.0"
                       prefWidth="276.0" promptText="USER NAME/EMAIL" styleClass="textfields" text="test">
                <font>
                    <Font name="Calibri Light" size="18.0"/>
                </font>
            </TextField>
            <PasswordField fx:id="password" alignment="CENTER" layoutX="177.0" layoutY="296.0" prefHeight="49.0"
                           prefWidth="276.0" promptText="PASSWORD" styleClass="textfields" text="test">
                <font>
                    <Font name="Calibri Light" size="17.0"/>
                </font>
            </PasswordField>
            <Button fx:id="signup" layoutX="380.0" layoutY="396.0" mnemonicParsing="false" prefHeight="59.0"
                    prefWidth="130.0" styleClass="buttons" text="SIGN UP"/>
            <Button fx:id="login" layoutX="112.0" layoutY="396.0" mnemonicParsing="false" prefHeight="59.0"
                    prefWidth="130.0" styleClass="buttons" text="LOGIN"/>
        </children>
    </AnchorPane>
    <stylesheets>
        <URL value="@../styles/css.css"/>
        <URL value="@../styles/Login.css"/>
    </stylesheets>
    <!--<FontAwesomeIcon fill="WHITE" iconName="CLOSE" layoutX="1004.0" layoutY="18.0" onMouseClicked="#close_app" size="1.5em" stroke="BLACK" />-->
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<!--10.0.1-->

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.*?>
<?import java.net.URL?>
<AnchorPane xmlns:fx="http://javafx.com/fxml/1" fx:id="parent1" prefHeight="700.0" prefWidth="1200.0"
            styleClass="form" xmlns="http://javafx.com/javafx/11.0.1"
            fx:controller="Controllers.AuthenticationControllers.SignupController">
    <AnchorPane layoutX="67.0" layoutY="8.0" prefHeight="392.0" prefWidth="200.0"/>
    <AnchorPane layoutX="306.0" layoutY="57.0" prefHeight="492.0" prefWidth="667.0" styleClass="forminner">
        <children>
            <Label fx:id="clock" alignment="CENTER" contentDisplay="CENTER" layoutX="1.0" layoutY="14.0"
                   prefHeight="49.0" prefWidth="634.0" text="label">
                <font>
                    <Font name="Gabriola" size="41.0"/>
                </font>
            </Label>
            <TextField fx:id="name" alignment="CENTER" layoutX="124.0" layoutY="76.0" prefHeight="42.0"
                       prefWidth="388.0" promptText="NAME" styleClass="textfields">
                <font>
                    <Font name="Calibri Light" size="14.0"/>
                </font>
            </TextField>
            <TextField fx:id="email" alignment="CENTER" layoutX="124.0" layoutY="131.0" prefHeight="42.0"
                       prefWidth="388.0" promptText="EMAIL" styleClass="textfields">
                <font>
                    <Font name="Calibri Light" size="14.0"/>
                </font>
            </TextField>
            <PasswordField fx:id="password" alignment="CENTER" layoutX="124.0" layoutY="189.0" prefHeight="42.0"
                           prefWidth="388.0" promptText="PASSWORD" styleClass="textfields">
                <font>
                    <Font name="Calibri Light" size="14.0"/>
                </font>
            </PasswordField>
            <PasswordField fx:id="passwordconfirmation" alignment="CENTER" layoutX="124.0" layoutY="248.0"
                           prefHeight="42.0" prefWidth="388.0" promptText="PASSWORD CONFIRMATION"
                           styleClass="textfields">
                <font>
                    <Font name="Calibri Light" size="14.0"/>
                </font>
            </PasswordField>
            <TextField fx:id="IDNUMBER" alignment="CENTER" layoutX="124.0" layoutY="304.0" prefHeight="42.0"
                       prefWidth="388.0" promptText="ID NUMBER" styleClass="textfields">
                <font>
                    <Font name="Calibri Light" size="14.0"/>
                </font>
            </TextField>
            <TextField fx:id="key" alignment="CENTER" layoutX="124.0" layoutY="364.0" prefHeight="42.0"
                       prefWidth="388.0" promptText="SUBSCRIBER KEY" styleClass="textfields">
                <font>
                    <Font name="Calibri Light" size="14.0"/>
                </font>
            </TextField>
            <Label layoutX="525.0" layoutY="391.0" prefHeight="42.0" prefWidth="142.0" text="GET FROM EMPLOYER"
                   textFill="#ff0505"/>
            <Button id="signup" fx:id="signup1" layoutX="396.0" layoutY="433.0" mnemonicParsing="false"
                    prefHeight="42.0" prefWidth="116.0" styleClass="buttons" text="SIGN UP"/>
            <Button id="login" fx:id="login1" layoutX="152.0" layoutY="433.0" mnemonicParsing="false" prefHeight="42.0"
                    prefWidth="110.0" styleClass="buttons" text="LOGIN"/>
        </children>
    </AnchorPane>
    <Label alignment="CENTER" layoutX="268.0" layoutY="8.0" prefHeight="49.0" prefWidth="665.0"
           text="CREATE A NEW ACCOUNT" textFill="#fcfaff">
        <font>
            <Font name="FangSong" size="33.0"/>
        </font>
    </Label>
    <Hyperlink fx:id="link" layoutX="632.0" layoutY="583.0" prefHeight="34.0" prefWidth="179.0" text="NanotechSoftwares"
               textFill="#f50707" underline="true">
        <font>
            <Font size="17.0"/>
        </font>
    </Hyperlink>
    <Label layoutX="527.0" layoutY="585.0" prefHeight="30.0" prefWidth="92.0" text="Powered by" textFill="#fff4f4">
        <font>
            <Font size="17.0"/>
        </font>
    </Label>
    <stylesheets>
        <URL value="@../styles/css.css"/>
        <URL value="@../styles/Login.css"/>
    </stylesheets>
    <!--<FontAwesomeIcon fill="WHITE" iconName="CLOSE" layoutX="1004.0" layoutY="18.0" onMouseClicked="#close_app" size="1.5em" stroke="BLACK" />-->
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Label?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>
<AnchorPane xmlns:fx="http://javafx.com/fxml/1" fx:id="parent" prefHeight="600.0" prefWidth="1024.0" styleClass="parent"
            stylesheets="@../styles/css.css" xmlns="http://javafx.com/javafx/11.0.1"
            fx:controller="SplashScreenController">
    <children>
        <Label fx:id="owner" layoutX="25.0" layoutY="316.0" prefHeight="35.0" prefWidth="857.0" text="test"
               textFill="RED">
            <font>
                <Font size="23.0"/>
            </font>
        </Label>
        <Label fx:id="expiry" layoutX="207.0" layoutY="360.0" prefHeight="35.0" prefWidth="590.0" text="test"
               textFill="RED">
            <font>
                <Font size="23.0"/>
            </font>
        </Label>
        <Label fx:id="expiry1" layoutX="14.0" layoutY="360.0" prefHeight="35.0" prefWidth="193.0"
               text="License expires on" textFill="RED">
            <font>
                <Font size="23.0"/>
            </font>
        </Label>
    </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.*?>
<?import javafx.scene.text.*?>
<?import java.net.URL?>
<VBox fx:id="parents" prefHeight="700.0" prefWidth="1200.0" xmlns="http://javafx.com/javafx/11.0.1"
      xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.CarWashControllers.CarwashController">
    <children>
        <MenuBar>
            <menus>
                <Menu mnemonicParsing="false" text="Account">
                    <items>
                        <MenuItem fx:id="logoutMenu" mnemonicParsing="false" text="Log out"/>
                        <MenuItem fx:id="exitMenu" mnemonicParsing="false" text="Quit"/>
                        <MenuItem fx:id="accountdetailsMenu" mnemonicParsing="false" text="Account Details"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Short Cuts">
                    <items>
                        <MenuItem fx:id="CreatorsMenu" mnemonicParsing="false" text="Creators"/>
                        <MenuItem fx:id="helpMenu" mnemonicParsing="false" text="Help"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Panel">
                    <items>
                        <MenuItem fx:id="stores" mnemonicParsing="false" text="Stores"/>
                        <MenuItem fx:id="stocks" mnemonicParsing="false" text="Stock management"/>
                        <MenuItem mnemonicParsing="false" text="Audits"/>
                    </items>
                </Menu>
            </menus>
        </MenuBar>
        <SplitPane dividerPositions="0.2505567928730512" focusTraversable="true" prefHeight="652.0" prefWidth="1200.0">
            <items>
                <AnchorPane styleClass="subPanel">
                    <children>
                        <Label fx:id="clock" alignment="CENTER" contentDisplay="CENTER" layoutX="1.0" layoutY="241.0"
                               prefHeight="66.0" prefWidth="226.0" text="time">
                            <font>
                                <Font name="Gabriola" size="44.0"/>
                            </font>
                            <textFill>
                                <LinearGradient endX="1.0" endY="0.19047619047619047">
                                    <stops>
                                        <Stop color="#ff0842"/>
                                        <Stop color="#7d7c38" offset="0.14559386973180072"/>
                                        <Stop color="#ff3a38" offset="0.48659003831417624"/>
                                        <Stop color="#100fb8" offset="0.8467432950191567"/>
                                        <Stop color="#1a10e0" offset="1.0"/>
                                    </stops>
                                </LinearGradient>
                            </textFill>
                        </Label>
                        <Button fx:id="home" layoutX="23.0" layoutY="439.0" mnemonicParsing="false" prefHeight="66.0"
                                prefWidth="206.0" styleClass="buttongreen" text="HOME"/>
                        <Label fx:id="cash" layoutX="97.0" layoutY="92.0" prefHeight="51.0" prefWidth="104.0"
                               text="cash"/>
                    </children>
                </AnchorPane>
                <AnchorPane id="Content" minHeight="-1.0" minWidth="-1.0" prefHeight="611.0" prefWidth="700.0"
                            styleClass="mainPanel">
                    <children>
                        <Label alignment="CENTER" layoutX="332.0" layoutY="-13.0" style="&#10;" text="CAR WASH PANEL"
                               textAlignment="CENTER" textFill="WHITE" wrapText="false">
                            <font>
                                <Font name="FangSong" size="37.0" fx:id="x1"/>
                            </font>
                        </Label>
                        <TabPane fx:id="tabpane" layoutX="14.0" layoutY="30.0" pickOnBounds="false" prefHeight="614.0"
                                 prefWidth="878.0" tabClosingPolicy="UNAVAILABLE">
                            <tabs>
                                <Tab text="DOWNLOAD LISTS">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="413.0" prefWidth="482.0">
                                            <children>
                                                <Button fx:id="sendtomail" layoutX="254.0" layoutY="389.0"
                                                        mnemonicParsing="false" prefHeight="61.0" prefWidth="411.0"
                                                        styleClass="buttongreen" text="SEND TO MY EMAIL AS SOFT COPY">
                                                    <font>
                                                        <Font name="Gabriola" size="28.0"/>
                                                    </font>
                                                </Button>
                                                <Button fx:id="printoutaspdf" layoutX="255.0" layoutY="201.0"
                                                        mnemonicParsing="false" prefHeight="61.0" prefWidth="409.0"
                                                        styleClass="buttongreen" text="EXPORT AS PDF"
                                                        textFill="#030303">
                                                    <font>
                                                        <Font name="Gabriola" size="28.0"/>
                                                    </font>
                                                </Button>
                                                <Label alignment="CENTER" layoutX="229.0" layoutY="36.0"
                                                       prefHeight="27.0" prefWidth="344.0" text="Export your operations"
                                                       textFill="WHITE">
                                                    <font>
                                                        <Font size="18.0"/>
                                                    </font>
                                                </Label>
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </Tab>
                                <Tab fx:id="pastclients" text="PAST CLIENTS">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                                            <children>
                                                <ScrollPane layoutX="11.0" layoutY="9.0" prefHeight="502.0"
                                                            prefWidth="865.0">
                                                    <content>
                                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="496.0"
                                                                    prefWidth="862.0">
                                                            <children>
                                                                <TableView fx:id="tab" layoutY="-1.0" prefHeight="498.0"
                                                                           prefWidth="861.0">
                                                                    <placeholder>
                                                                        <Label text=""/>
                                                                    </placeholder>
                                                                    <columns>
                                                                        <TableColumn fx:id="Name" prefWidth="104.0"
                                                                                     text="NAME"/>
                                                                        <TableColumn fx:id="reg" prefWidth="129.0"
                                                                                     text="REGISTRATION"/>
                                                                        <TableColumn fx:id="id" prefWidth="173.0"
                                                                                     text="CONTACT"/>
                                                                        <TableColumn fx:id="status" prefWidth="129.0"
                                                                                     text="STATUS"/>
                                                                        <TableColumn fx:id="operator" prefWidth="179.0"
                                                                                     text="OPERATOR"/>
                                                                        <TableColumn fx:id="payout" prefWidth="146.0"
                                                                                     text="CASH PAID"/>
                                                                    </columns>
                                                                </TableView>
                                                            </children>
                                                        </AnchorPane>
                                                    </content>
                                                </ScrollPane>
                                                <Button fx:id="delete" layoutX="305.0" layoutY="523.0"
                                                        mnemonicParsing="false" prefHeight="54.0" prefWidth="204.0"
                                                        styleClass="buttonred" text="DELETE SELECTED DETAILS"/>
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </Tab>
                            </tabs>
                        </TabPane>
                    </children>
                </AnchorPane>
            </items>
        </SplitPane>
        <HBox id="HBox" alignment="CENTER_LEFT" spacing="5.0" VBox.vgrow="NEVER">
            <children>
                <Pane prefHeight="-1.0" prefWidth="-1.0" HBox.hgrow="ALWAYS">
                    <children>
                        <Label layoutX="417.0" maxHeight="1.7976931348623157E308" maxWidth="-1.0"
                               text="PRODUCT OF NANOTECHSOFTWARES" textFill="#f50808">
                            <font>
                                <Font size="11.0" fx:id="x3"/>
                            </font>
                        </Label>
                    </children>
                </Pane>
            </children>
            <padding>
                <Insets bottom="3.0" left="3.0" right="3.0" top="3.0"/>
            </padding>
        </HBox>
    </children>
    <stylesheets>
        <URL value="@../styles/buttons.css"/>
        <URL value="@../styles/css.css"/>
        <URL value="@../styles/Login.css"/>
        <URL value="@../styles/panels.css"/>
    </stylesheets>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>


<AnchorPane maxHeight="-Infinity" fx:id="carwashcomplete" fx:controller="Controllers.CarWashControllers.CarwashCompleteController" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1">
   <children>
      <TextField fx:id="washershername" alignment="CENTER" layoutX="184.0" layoutY="76.0" prefHeight="34.0" prefWidth="183.0" promptText="WASHER" />
      <TextField fx:id="cashpaid" alignment="CENTER" layoutX="184.0" layoutY="127.0" prefHeight="34.0" prefWidth="183.0" promptText="CASH PAID" />
      <Button fx:id="complete" alignment="CENTER" contentDisplay="CENTER" layoutX="209.0" layoutY="212.0" mnemonicParsing="false" prefHeight="48.0" prefWidth="149.0" text="COMPLETE" />
   </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.*?>
<?import javafx.scene.text.Font?>
<?import java.net.URL?>
<VBox fx:id="carWash" prefHeight="700.0" prefWidth="1200.0" xmlns="http://javafx.com/javafx/11.0.1"
      xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.CarWashControllers.CarwashSalesController">
    <children>
        <MenuBar>
            <menus>
                <Menu mnemonicParsing="false" text="Account">
                    <items>
                        <MenuItem fx:id="logoutMenu" mnemonicParsing="false" text="Log out"/>
                        <MenuItem fx:id="exitMenu" mnemonicParsing="false" text="Quit"/>
                        <MenuItem fx:id="accountdetailsMenu" mnemonicParsing="false" text="Account Details"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Short Cuts">
                    <items>
                        <MenuItem fx:id="CreatorsMenu" mnemonicParsing="false" text="Creators"/>
                        <MenuItem fx:id="helpMenu" mnemonicParsing="false" text="Help"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Panel">
                    <items>
                        <MenuItem fx:id="stores" mnemonicParsing="false" text="Stores"/>
                        <MenuItem fx:id="stocks" mnemonicParsing="false" text="Stock management"/>
                        <MenuItem mnemonicParsing="false" text="Audits"/>
                    </items>
                </Menu>
            </menus>
        </MenuBar>

        <SplitPane dividerPositions="0.2505567928730512" focusTraversable="true" prefHeight="653.0" prefWidth="1200.0">
            <items>
                <AnchorPane styleClass="subPanel" stylesheets="@../styles/panels.css">
                    <children>
                        <Label fx:id="clock" alignment="CENTER" contentDisplay="CENTER" layoutX="23.0" layoutY="118.0"
                               prefHeight="66.0" prefWidth="226.0" text="TIME">
                            <font>
                                <Font name="Gabriola" size="44.0"/>
                            </font>
                            <textFill>
                                <LinearGradient endX="1.0" endY="0.19047619047619047">
                                    <stops>
                                        <Stop color="#ff0842"/>
                                        <Stop color="#7d7c38" offset="0.14559386973180072"/>
                                        <Stop color="#ff3a38" offset="0.48659003831417624"/>
                                        <Stop color="#100fb8" offset="0.8467432950191567"/>
                                        <Stop color="#1a10e0" offset="1.0"/>
                                    </stops>
                                </LinearGradient>
                            </textFill>
                        </Label>
                        <Button fx:id="home" layoutX="31.0" layoutY="407.0" mnemonicParsing="false" prefHeight="72.0"
                                prefWidth="209.0" styleClass="buttons" text="HOME"/>
                        <Button fx:id="home1" layoutX="31.0" layoutY="232.0" mnemonicParsing="false" prefHeight="72.0"
                                prefWidth="209.0" styleClass="buttons" text="LOYALTY POINTS"/>
                    </children>
                </AnchorPane>
                <AnchorPane id="Content" minHeight="-1.0" minWidth="-1.0" prefHeight="647.0" prefWidth="888.0"
                            styleClass="form" stylesheets="@../styles/Login.css">
                    <children>
                        <Label alignment="CENTER" layoutX="418.0" layoutY="-13.0" style="&#10;" text="CAR WASH"
                               textAlignment="CENTER" textFill="WHITE" wrapText="false">
                            <font>
                                <Font name="FangSong" size="37.0" fx:id="x1"/>
                            </font>
                        </Label>
                        <TabPane fx:id="tabpane" layoutY="34.0" pickOnBounds="false" prefHeight="617.0"
                                 prefWidth="874.0" tabClosingPolicy="UNAVAILABLE">
                            <tabs>
                                <Tab fx:id="newclients" text="NEW CUSTOMERS">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="413.0" prefWidth="482.0">
                                            <children>
                                                <AnchorPane layoutX="234.0" layoutY="22.0" prefHeight="488.0"
                                                            prefWidth="421.0" styleClass="forminner">
                                                    <children>
                                                        <Button fx:id="submit" layoutX="96.0" layoutY="381.0"
                                                                mnemonicParsing="false" prefHeight="66.0"
                                                                prefWidth="243.0" styleClass="buttons"
                                                                stylesheets="@../styles/css.css" text="SUBMIT"/>
                                                        <TextField fx:id="contact" alignment="CENTER" layoutX="56.0"
                                                                   layoutY="289.0" prefHeight="54.0" prefWidth="321.0"
                                                                   promptText="CONTACT" styleClass="textfields"/>
                                                        <TextField fx:id="registration" alignment="CENTER"
                                                                   layoutX="56.0" layoutY="194.0" prefHeight="54.0"
                                                                   prefWidth="321.0" promptText="REGISTRATION"
                                                                   styleClass="textfields"/>
                                                        <TextField fx:id="identification" alignment="CENTER"
                                                                   layoutX="56.0" layoutY="106.0" prefHeight="54.0"
                                                                   prefWidth="321.0"
                                                                   promptText="IDENTIFICATION/PASSPORT NUMBER"
                                                                   styleClass="textfields"/>
                                                        <TextField fx:id="name" alignment="CENTER" layoutX="57.0"
                                                                   layoutY="14.0" prefHeight="54.0" prefWidth="320.0"
                                                                   promptText="NAME" styleClass="textfields"/>
                                                    </children>
                                                </AnchorPane>
                                                <Hyperlink fx:id="link" layoutX="390.0" layoutY="527.0"
                                                           prefHeight="34.0" prefWidth="179.0" text="NanotechSoftwares"
                                                           textFill="#f50707" underline="true">
                                                    <font>
                                                        <Font size="17.0"/>
                                                    </font>
                                                </Hyperlink>
                                                <Label layoutX="287.0" layoutY="529.0" prefHeight="30.0"
                                                       prefWidth="92.0" text="Powered by" textFill="#fff4f4">
                                                    <font>
                                                        <Font size="17.0"/>
                                                    </font>
                                                </Label>
                                                <!--<TextField fx:id="amount" alignment="CENTER" layoutX="212.0" layoutY="315.0" prefHeight="25.0" prefWidth="321.0" promptText="AMOUNT" />-->
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </Tab>
                                <Tab fx:id="clients" text="PENDING JOBS">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                                            <children>
                                                <ScrollPane layoutX="11.0" layoutY="9.0" prefHeight="582.0"
                                                            prefWidth="858.0">
                                                    <content>
                                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="572.0"
                                                                    prefWidth="849.0">
                                                            <children>
                                                                <TableView fx:id="tab" layoutY="7.0" prefHeight="564.0"
                                                                           prefWidth="848.0">
                                                                    <placeholder>
                                                                        <Label text=""/>
                                                                    </placeholder>
                                                                    <columns>
                                                                        <TableColumn fx:id="Name" prefWidth="104.0"
                                                                                     text="NAME"/>
                                                                        <TableColumn fx:id="reg" prefWidth="129.0"
                                                                                     text="REGISTRATION"/>
                                                                        <TableColumn fx:id="id" prefWidth="156.0"
                                                                                     text="ID NUMBER"/>
                                                                        <TableColumn fx:id="status" prefWidth="126.0"
                                                                                     text="STATUS"/>
                                                                        <TableColumn fx:id="operator" prefWidth="215.0"
                                                                                     text="WASHER"/>
                                                                        <TableColumn fx:id="payout" prefWidth="113.0"
                                                                                     text="CASH PAID"/>
                                                                    </columns>
                                                                </TableView>
                                                            </children>
                                                        </AnchorPane>
                                                    </content>
                                                </ScrollPane>
                                                <!--<Button fx:id="delete" layoutX="139.0" layoutY="399.0"-->
                                                <!--mnemonicParsing="false" prefHeight="54.0"-->
                                                <!--prefWidth="204.0" style="-fx-background-color: RED;"-->
                                                <!--text="DELETE SELECTED DETAILS"/>-->
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </Tab>
                            </tabs>
                        </TabPane>
                    </children>
                </AnchorPane>
            </items>
        </SplitPane>
    </children>
    <stylesheets>
        <URL value="@../styles/Login.css"/>
        <URL value="@../styles/css.css"/>
    </stylesheets>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.geometry.Point3D?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.Font?>
<BorderPane xmlns:fx="http://javafx.com/fxml/1" fx:id="borderPane" maxHeight="700.0" maxWidth="1200.0"
            prefHeight="620.0"
            prefWidth="1040.0" xmlns="http://javafx.com/javafx/8.0.172-ea"
            fx:controller="Controllers.chats.ChatController">
    <center>
        <VBox fx:id="scrollchat" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308">
            <children>
                <ScrollPane fx:id="scrollpane" fitToHeight="true" fitToWidth="true" hbarPolicy="NEVER"
                            maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" pannable="true"
                            prefHeight="496.0" styleClass="backgroundchat" stylesheets="@../styles/css.css"
                            vbarPolicy="ALWAYS" vmin="1.0" vvalue="1.0" VBox.vgrow="ALWAYS">
                    <content>
                        <ListView fx:id="chatPane" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308"
                                  prefHeight="200.0" prefWidth="200.0"/>
                    </content>
                </ScrollPane>
                <HBox maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308" minHeight="-Infinity"
                      minWidth="100.0" VBox.vgrow="NEVER">
                    <children>
                        <TextArea fx:id="messageBox" maxHeight="1.7976931348623157E308"
                                  maxWidth="1.7976931348623157E308" minHeight="-Infinity" minWidth="100.0"
                                  nodeOrientation="LEFT_TO_RIGHT" prefHeight="16.0" prefWidth="698.0"
                                  promptText="Enter Message..." scaleShape="false" HBox.hgrow="ALWAYS">
                            <font>
                                <Font name="SansSerif Regular" size="14.0"/>
                            </font>
                        </TextArea>
                        <Button fx:id="buttonSend" alignment="CENTER" maxHeight="1.7976931348623157E308"
                                maxWidth="1.7976931348623157E308" minHeight="-Infinity" minWidth="-Infinity"
                                mnemonicParsing="false" prefHeight="43.0" prefWidth="140.0" scaleShape="false"
                                text="Send" textAlignment="CENTER" HBox.hgrow="NEVER"/>
                        <Button fx:id="recordBtn" maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308"
                                mnemonicParsing="false"/>
                    </children>
                </HBox>
            </children>
        </VBox>
    </center>
    <left>
        <VBox maxHeight="1.7976931348623157E308" BorderPane.alignment="CENTER">
            <children>
                <HBox fx:id="onlineUsersHbox" minHeight="-Infinity" minWidth="-Infinity" prefHeight="50.0"
                      prefWidth="217.0" stylesheets="@/resourcefiles/styles/ListViewStyle.css">
                    <children>
                        <Label prefHeight="50.0" prefWidth="124.0" text="Online Users:" textAlignment="CENTER"
                               textFill="#fc6747">
                            <font>
                                <Font name="SansSerif Regular" size="14.0"/>
                            </font>
                            <padding>
                                <Insets left="10.0"/>
                            </padding>
                            <opaqueInsets>
                                <Insets bottom="10.0"/>
                            </opaqueInsets>
                        </Label>
                        <Label fx:id="onlineCountLabel" prefHeight="48.0" prefWidth="94.0" text="0" textFill="#fc6747">
                            <opaqueInsets>
                                <Insets/>
                            </opaqueInsets>
                            <font>
                                <Font name="SansSerif Regular" size="14.0"/>
                            </font>
                        </Label>
                    </children>
                </HBox>
                <ListView fx:id="userList" focusTraversable="false" maxHeight="1.7976931348623157E308"
                          prefHeight="495.0" prefWidth="217.0" style="-fx-border-image-width: 0;"
                          stylesheets="@/resourcefiles/styles/ListViewStyle.css">
                </ListView>
            </children>
        </VBox>
    </left>
    <top>
        <BorderPane maxHeight="1.7976931348623157E308" maxWidth="1.7976931348623157E308"
                    style="-fx-background-color: white;" BorderPane.alignment="CENTER">
            <right>
            </right>
            <center>
                <Label prefHeight="53.0" prefWidth="272.0" text="HUMANS ARE SOCIAL CREATURES" textFill="#ff0101"
                       BorderPane.alignment="CENTER">
                    <font>
                        <Font name="Gabriola" size="23.0"/>
                    </font>
                </Label>
            </center>
        </BorderPane>
    </top>
    <rotationAxis>
        <Point3D/>
    </rotationAxis>
</BorderPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Label?>
<?import javafx.scene.Cursor?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.shape.Rectangle?>
<?import javafx.scene.text.Font?>
<AnchorPane xmlns:fx="http://javafx.com/fxml/1" fx:id="rootNode" maxHeight="-Infinity" maxWidth="-Infinity"
            minHeight="-Infinity"
            minWidth="-Infinity" prefHeight="87.0" prefWidth="461.0"
            style="-fx-border-color: gray; -fx-border-width: 1;" xmlns="http://javafx.com/javafx/8">
    <children>
        <Rectangle fx:id="rectangleColor" arcHeight="5.0" arcWidth="5.0" fill="GREY" height="85.0" layoutX="1.0"
                   layoutY="1.0" stroke="GREY" strokeType="INSIDE" style="-fx-arc-width: 0;" width="32.0"/>
        <ImageView fx:id="imageIcon" fitHeight="67.0" fitWidth="67.0" layoutX="47.0" layoutY="9.0" pickOnBounds="true"/>
        <Label fx:id="lblTitle" layoutX="126.0" layoutY="9.0" text="Title:" wrapText="true">
            <font>
                <Font name="System Bold" size="16.0"/>
            </font>
        </Label>
        <Label fx:id="lblMessage" layoutX="126.0" layoutY="52.0" text="Message:" wrapText="true">
            <font>
                <Font size="13.0"/>
            </font>
        </Label>
        <Label fx:id="lblClose" layoutX="441.0" text="x">
            <font>
                <Font size="20.0"/>
            </font>
            <cursor>
                <Cursor fx:constant="HAND"/>
            </cursor>
        </Label>
    </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.*?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.*?>
<?import javafx.scene.text.Font?>
<?import java.net.URL?>
<VBox fx:id="panel" prefHeight="700.0" prefWidth="1200.0" xmlns="http://javafx.com/javafx/11.0.1"
      xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.ShopControllers.AddshopController">
    <children>
        <MenuBar>
            <menus>
                <Menu mnemonicParsing="false" text="Account">
                    <items>
                        <MenuItem fx:id="logoutMenu" mnemonicParsing="false" text="Log out"/>
                        <MenuItem fx:id="exitMenu" mnemonicParsing="false" text="Quit"/>
                        <MenuItem fx:id="accountdetailsMenu" mnemonicParsing="false" text="Account Details"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Short Cuts">
                    <items>
                        <MenuItem fx:id="CreatorsMenu" mnemonicParsing="false" text="Creators"/>
                        <MenuItem fx:id="helpMenu" mnemonicParsing="false" text="Help"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Panel">
                    <items>
                        <MenuItem fx:id="stores" mnemonicParsing="false" text="Stores"/>
                        <MenuItem fx:id="stocks" mnemonicParsing="false" text="Stock management"/>
                        <MenuItem mnemonicParsing="false" text="Audits"/>
                    </items>
                </Menu>
            </menus>
        </MenuBar>

        <SplitPane dividerPositions="0.2505567928730512" focusTraversable="true" prefHeight="-1.0" prefWidth="-1.0">
            <items>
                <AnchorPane prefHeight="611.0" prefWidth="283.0" styleClass="subPanel">
                    <children>
                        <Label fx:id="clock" alignment="CENTER" contentDisplay="CENTER" layoutX="1.0" layoutY="241.0"
                               prefHeight="66.0" prefWidth="226.0" text="00:00:00">
                            <font>
                                <Font name="Gabriola" size="44.0"/>
                            </font>
                            <textFill>
                                <LinearGradient endX="1.0" endY="0.19047619047619047">
                                    <stops>
                                        <Stop color="#ff0842"/>
                                        <Stop color="#7d7c38" offset="0.14559386973180072"/>
                                        <Stop color="#ff3a38" offset="0.48659003831417624"/>
                                        <Stop color="#100fb8" offset="0.8467432950191567"/>
                                        <Stop color="#1a10e0" offset="1.0"/>
                                    </stops>
                                </LinearGradient>
                            </textFill>
                        </Label>
                        <Button fx:id="home" layoutX="47.0" layoutY="485.0" mnemonicParsing="false" prefHeight="60.0"
                                prefWidth="203.0" styleClass="buttongreen" text="HOME"/>
                    </children>
                </AnchorPane>
                <AnchorPane id="Content" minHeight="-1.0" minWidth="-1.0" prefHeight="611.0" prefWidth="892.0"
                            styleClass="mainPanel">
                    <children>
                        <Label alignment="CENTER" layoutX="138.0" layoutY="-13.0" style="&#10;"
                               text="SHOPS &amp; STORES " textAlignment="CENTER" wrapText="false">
                            <font>
                                <Font name="FangSong" size="37.0" fx:id="x1"/>
                            </font>
                        </Label>
                        <TabPane fx:id="tabpane" layoutX="14.0" layoutY="30.0" pickOnBounds="false" prefHeight="569.0"
                                 prefWidth="873.0" tabClosingPolicy="UNAVAILABLE">
                            <tabs>
                                <Tab text="ADD A NEW STORE">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="413.0" prefWidth="482.0"
                                                    styleClass="form">
                                            <children>
                                                <ImageView fx:id="storeimageselected" fitHeight="192.0" fitWidth="318.0"
                                                           layoutX="353.0" layoutY="252.0" pickOnBounds="true"
                                                           preserveRatio="true"/>
                                                <AnchorPane layoutX="65.0" layoutY="14.0" prefHeight="440.0"
                                                            prefWidth="755.0" styleClass="forminner">
                                                    <children>
                                                        <Button fx:id="storeimageselection" layoutX="63.0"
                                                                layoutY="202.0" mnemonicParsing="false"
                                                                prefHeight="59.0" prefWidth="158.0"
                                                                styleClass="buttonorange" text="STORE IMAGE"/>
                                                        <TextField fx:id="employeenum" layoutX="89.0" layoutY="83.0"
                                                                   prefHeight="43.0" prefWidth="235.0"
                                                                   promptText="EMPLOYEE NUMBER"
                                                                   styleClass="textfields"/>
                                                        <TextField fx:id="storename" layoutX="89.0" layoutY="14.0"
                                                                   prefHeight="43.0" prefWidth="235.0"
                                                                   promptText="STORE NAME" styleClass="textfields"/>
                                                        <TextArea fx:id="description" layoutX="402.0" layoutY="89.0"
                                                                  prefHeight="113.0" prefWidth="331.0"
                                                                  promptText="SHORT DESCRIPTION ABOUT THE STORE"
                                                                  styleClass="textfields"/>
                                                        <TextField fx:id="storelocation" layoutX="449.0" layoutY="14.0"
                                                                   prefHeight="43.0" prefWidth="236.0"
                                                                   promptText="STORE LOCATION" styleClass="textfields"/>
                                                        <Button fx:id="addstore" layoutX="271.0" layoutY="357.0"
                                                                mnemonicParsing="false" prefHeight="61.0"
                                                                prefWidth="226.0" styleClass="buttongreen"
                                                                text="ADD SHOP/STORE">
                                                            <font>
                                                                <Font name="Gabriola" size="28.0"/>
                                                            </font>
                                                        </Button>
                                                    </children>
                                                </AnchorPane>
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </Tab>
                                <Tab fx:id="existingstoredtab" text="VIEW EXISTING STORES">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                                            <children>
                                                <ScrollPane layoutX="11.0" layoutY="9.0" prefHeight="420.0"
                                                            prefWidth="850.0">
                                                    <content>
                                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="406.0"
                                                                    prefWidth="844.0">
                                                            <children>
                                                                <TableView fx:id="tab" layoutY="7.0" prefHeight="398.0"
                                                                           prefWidth="842.0">
                                                                    <placeholder>
                                                                        <Label text=""/>
                                                                    </placeholder>
                                                                    <columns>
                                                                        <TableColumn fx:id="storeName" prefWidth="116.0"
                                                                                     text="NAME"/>
                                                                        <TableColumn fx:id="storeLoc" prefWidth="228.0"
                                                                                     text="LOCATION"/>
                                                                        <TableColumn fx:id="employeeNumber"
                                                                                     prefWidth="260.0"
                                                                                     text="EMPLOYEES NUMBER"/>
                                                                        <TableColumn fx:id="storeId" prefWidth="236.0"
                                                                                     text="SHOP NUMBER"/>
                                                                    </columns>
                                                                </TableView>
                                                            </children>
                                                        </AnchorPane>
                                                    </content>
                                                </ScrollPane>
                                                <AnchorPane layoutX="31.0" layoutY="439.0" prefHeight="76.0"
                                                            prefWidth="608.0">
                                                    <children>
                                                        <Button fx:id="delete" layoutX="48.0" layoutY="12.0"
                                                                mnemonicParsing="false" prefHeight="54.0"
                                                                prefWidth="204.0" styleClass="buttonred"
                                                                text="DELETE SELECTED STORE"/>
                                                        <Button fx:id="storelistaspdf" layoutX="390.0" layoutY="12.0"
                                                                mnemonicParsing="false" prefHeight="54.0"
                                                                prefWidth="204.0" styleClass="buttongreen"
                                                                text="GET STORE LIST AS PDF"/>
                                                    </children>
                                                </AnchorPane>
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </Tab>
                            </tabs>
                        </TabPane>
                    </children>
                </AnchorPane>
            </items>
        </SplitPane>
        <HBox id="HBox" alignment="CENTER_LEFT" spacing="5.0">
            <children>
                <Pane prefHeight="43.0" prefWidth="894.0" style="-fx-background-color: #000000;" HBox.hgrow="ALWAYS">
                    <children>
                        <Hyperlink layoutX="399.0" layoutY="3.0" text="A product of nanotech softwares"
                                   textFill="#f51500"/>
                    </children>
                </Pane>
            </children>
            <padding>
                <Insets bottom="3.0" left="3.0" right="3.0" top="3.0"/>
            </padding>
        </HBox>
    </children>
    <stylesheets>
        <URL value="@../styles/buttons.css"/>
        <URL value="@../styles/Login.css"/>
        <URL value="@../styles/panels.css"/>
        <URL value="@../styles/css.css"/>
    </stylesheets>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import java.net.URL?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.ButtonBar?>
<?import javafx.scene.control.DatePicker?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.Menu?>
<?import javafx.scene.control.MenuBar?>
<?import javafx.scene.control.MenuItem?>
<?import javafx.scene.control.ScrollPane?>
<?import javafx.scene.control.Tab?>
<?import javafx.scene.control.TabPane?>
<?import javafx.scene.control.TableColumn?>
<?import javafx.scene.control.TableView?>
<?import javafx.scene.control.TextArea?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>

<VBox fx:id="panel" prefHeight="700.0" prefWidth="1200.0" styleClass="mainPanel" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.ShopControllers.AuditController">
  <children>
    <MenuBar VBox.vgrow="NEVER">
      <menus>
        <Menu mnemonicParsing="false" text="Actions">
          <items>
            <MenuItem fx:id="importmenu" mnemonicParsing="false" text="Import" />
                  <MenuItem fx:id="logoutmenu" mnemonicParsing="false" text="Log out" />
            <MenuItem fx:id="quitmenu" mnemonicParsing="false" text="Quit" />
          </items>
        </Menu>
        <Menu mnemonicParsing="false" text="Help">
          <items>
            <MenuItem fx:id="getdocumentation" mnemonicParsing="false" text="Get documentation" />
          </items>
        </Menu>
      </menus>
    </MenuBar>
    <AnchorPane maxHeight="-1.0" maxWidth="-1.0" prefHeight="-1.0" prefWidth="-1.0" VBox.vgrow="ALWAYS">
      <children>
<!--        <Label alignment="CENTER" layoutX="155.0" layoutY="177.0" style="&#10;" text="Drag components from Library here…" textAlignment="CENTER" textFill="#9f9f9f" wrapText="false">-->
<!--          <font>-->
<!--            <Font size="18.0" />-->
<!--          </font>-->
<!--        </Label>-->
            <TabPane fx:id="maintabpane" layoutX="3.0" layoutY="74.0" prefHeight="602.0" prefWidth="1203.0" tabClosingPolicy="UNAVAILABLE">
              <tabs>
                <Tab fx:id="tabemployeeaudits" text="EMPLOYEE AUDITS">
                  <content>
                    <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="569.0" prefWidth="1200.0">
                           <children>
                              <TableView fx:id="tableemployeelist" layoutX="22.0" layoutY="69.0" prefHeight="429.0" prefWidth="495.0">
                                <columns>
                                    <TableColumn fx:id="employeeid" prefWidth="114.0" text="ID" />
                                  <TableColumn fx:id="employeename" prefWidth="114.0" text="NAME" />
                                  <TableColumn fx:id="employeeemail" minWidth="0.0" prefWidth="221.0" text="EMAIL" />
                                </columns>
                              </TableView>
                              <TextField fx:id="tf1period" layoutX="45.0" layoutY="23.0" promptText="PERIOD IN DAYS" styleClass="textfields" />
                              <Button fx:id="querytf1" layoutX="295.0" layoutY="25.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="72.0" styleClass="buttonred" text="QUERY" />
                              <ScrollPane layoutX="538.0" layoutY="69.0" prefHeight="425.0" prefWidth="615.0">
                                 <content>
                                    <TableView fx:id="tableemployeesales" prefHeight="417.0" prefWidth="613.0">
                                      <columns>
                                        <TableColumn fx:id="employeetransid" prefWidth="75.0" text="ID" />
                                        <TableColumn fx:id="transprice" prefWidth="114.0" text="PRICE" />
                                          <TableColumn fx:id="transpaid" prefWidth="117.0" text="AMOUNT PAID" />
                                          <TableColumn fx:id="transbalance" prefWidth="97.0" text="BALANCE" />
                                          <TableColumn fx:id="transmethod" prefWidth="102.0" text=" METHOD" />
                                          <TableColumn fx:id="transcompletion" prefWidth="107.0" text="COMPLETION" />
                                      </columns>
                                    </TableView>
                                 </content>
                              </ScrollPane>
                              <Button fx:id="showempperformancegraph" layoutX="584.0" layoutY="507.0" mnemonicParsing="false" styleClass="buttongreen" text="SHOW PERFORMANCE GRAPH" />
                              <Button fx:id="exportfirstempreport" layoutX="786.0" layoutY="507.0" mnemonicParsing="false" styleClass="buttonorange" text="EXPORT EMPLOYEE REPORT" />
                              <Button fx:id="exportfirstempreport1" layoutX="958.0" layoutY="507.0" mnemonicParsing="false" styleClass="buttonred" text="EXPORT COMPLETE  EMPLOYEE REPORT" />
                           </children></AnchorPane>
                  </content>
                </Tab>
<!--                <Tab fx:id="tabsalesaudits" text="SALES AUDITS">-->
<!--                  <content>-->
<!--                    <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">-->
<!--                           <children>-->
<!--                              <TextField fx:id="tf2period" layoutX="63.0" layoutY="21.0" promptText="PERIOD IN DAYS" styleClass="textfields" />-->
<!--                              <Button fx:id="querytf2" layoutX="311.0" layoutY="23.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="88.0" styleClass="buttonred" text="QUERY" />-->
<!--&lt;!&ndash;                              <TableView fx:id="categorysalestable" layoutX="3.0" layoutY="79.0" prefHeight="490.0" prefWidth="524.0">&ndash;&gt;-->
<!--&lt;!&ndash;                                <columns>&ndash;&gt;-->
<!--&lt;!&ndash;                                  <TableColumn fx:id="categorysalesid" prefWidth="75.0" text="ID" />&ndash;&gt;-->
<!--&lt;!&ndash;                                  <TableColumn fx:id="categorysalesname" prefWidth="149.0" text="CATEGORY" />&ndash;&gt;-->
<!--&lt;!&ndash;                                    <TableColumn fx:id="categorysalespayout" prefWidth="149.0" text="PAY OUT" />&ndash;&gt;-->
<!--&lt;!&ndash;                                    <TableColumn fx:id="categorysalessalesperday" prefWidth="149.0" text="SALES/DAY" />&ndash;&gt;-->
<!--&lt;!&ndash;                                </columns>&ndash;&gt;-->
<!--&lt;!&ndash;                              </TableView>&ndash;&gt;-->
<!--&lt;!&ndash;                               todo uncomment for categorical audits&ndash;&gt;-->
<!--                              <TableView fx:id="itemsalestable" layoutX="-2.0" layoutY="79.0" prefHeight="490.0" prefWidth="897.0">-->
<!--                                 <columns>-->
<!--                                    <TableColumn fx:id="itemsalesid" prefWidth="75.0" text="ID" />-->
<!--                                    <TableColumn fx:id="itemsalesname" prefWidth="333.0" text="NAME" />-->
<!--                                    <TableColumn fx:id="itemsalespayout" prefWidth="215.0" text="PAY OUT" />-->
<!--                                    <TableColumn fx:id="itemsalessalesperday" prefWidth="135.0" text="SALES/DAY" />-->
<!--                                    <TableColumn fx:id="itemsalessalesremainingstock" prefWidth="135.0" text="REMAINING AMOUNT" />-->
<!--                                 </columns>-->
<!--                              </TableView>-->
<!--                              <Button layoutX="935.0" layoutY="150.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="168.0" styleClass="buttonorange" text="EXPORT ITEM REPORT" />-->
<!--                              <Button layoutX="935.0" layoutY="214.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="168.0" styleClass="buttonred" text="EXPORT SALES REPORT" />-->
<!--                           </children></AnchorPane>-->
<!--                  </content>-->
<!--                </Tab>-->
<!--                  <Tab fx:id="tabcapandcost" text="CAPITAL AND COST">-->
<!--                     <content>-->
<!--                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">-->
<!--                           <children>-->
<!--                              <TabPane fx:id="tapaneinnercapitalandcost" layoutX="12.0" layoutY="7.0" prefHeight="551.0" prefWidth="1185.0" tabClosingPolicy="UNAVAILABLE">-->
<!--                                <tabs>-->
<!--                                  <Tab fx:id="pastcosts" text="PAST COSTS">-->
<!--                                    <content>-->
<!--                                      <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">-->
<!--                                             <children>-->
<!--                                                <TableView fx:id="pastcoststable" layoutX="3.0" layoutY="5.0" prefHeight="518.0" prefWidth="993.0">-->
<!--                                                  <columns>-->
<!--                                                    <TableColumn fx:id="pastcoststableid" prefWidth="75.0" text="ID" />-->
<!--                                                    <TableColumn fx:id="pastcoststablename" prefWidth="176.0" text="NAME" />-->
<!--                                                      <TableColumn fx:id="pastcoststabledateadded" prefWidth="212.0" text="DATE ADDED" />-->
<!--                                                      <TableColumn fx:id="pastcoststableamount" prefWidth="185.0" text="AMOUNT" />-->
<!--                                                      <TableColumn fx:id="pastcoststableactiveinactivestatus" prefWidth="188.0" text="ACTIVE/INACTIVE" />-->
<!--                                                  </columns>-->
<!--                                                </TableView>-->
<!--                                                <Button layoutX="1053.0" layoutY="68.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="90.0" styleClass="buttonyellow" text="EXPORT" />-->
<!--                                             </children>-->
<!--                                          </AnchorPane>-->
<!--                                    </content>-->
<!--                                  </Tab>-->
<!--                                  <Tab fx:id="newcosts" text="NEW COSTS">-->
<!--                                    <content>-->
<!--                                      <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">-->
<!--                                             <children>-->
<!--                                                <ButtonBar layoutX="268.0" layoutY="283.0" prefHeight="40.0" prefWidth="200.0" />-->
<!--                                                <AnchorPane layoutX="282.0" layoutY="42.0" prefHeight="336.0" prefWidth="405.0" styleClass="forminner">-->
<!--                                                   <children>-->
<!--                                                      <DatePicker fx:id="newcostsdatecreated" layoutX="93.0" layoutY="20.0" prefHeight="39.0" prefWidth="225.0" promptText="DATE CREATED" styleClass="textfields" />-->
<!--                                                      <TextField fx:id="newcostsamount" layoutX="93.0" layoutY="91.0" prefHeight="39.0" prefWidth="223.0" promptText="AMOUNT" styleClass="textfields" />-->
<!--                                                      <TextField fx:id="newcostsname" layoutX="96.0" layoutY="149.0" prefHeight="39.0" prefWidth="218.0" promptText="NAME" styleClass="textfields" />-->
<!--                                                      <TextField fx:id="newcostsactiveinactivestatus" layoutX="98.0" layoutY="210.0" prefHeight="39.0" prefWidth="213.0" promptText="ACTIVE/INACTIVE" styleClass="textfields" />-->
<!--                                                    <Button fx:id="newcostssubmit" layoutX="126.0" layoutY="269.0" mnemonicParsing="false" prefHeight="45.0" prefWidth="185.0" styleClass="buttonorange" text="SUBMIT" />-->
<!--                                                   </children>-->
<!--                                                </AnchorPane>-->
<!--                                             </children>-->
<!--                                          </AnchorPane>-->
<!--                                    </content>-->
<!--                                  </Tab>-->
<!--                                </tabs>-->
<!--                              </TabPane>-->
<!--                           </children></AnchorPane>-->
<!--                     </content>-->
<!--                  </Tab>-->
<!--                  todo v1.2 -->
<!--                  <Tab fx:id="tabfutureplans" text="FUTURE PLANS">-->
<!--                     <content>-->
<!--                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">-->
<!--                           <children>-->
<!--&lt;!&ndash;                             table for future plans&ndash;&gt;-->
<!--                              <TableView layoutX="726.0" layoutY="20.0" prefHeight="376.0" prefWidth="467.0">-->
<!--                                <columns>-->
<!--                                  <TableColumn prefWidth="75.0" text="NAME" />-->
<!--                                  <TableColumn prefWidth="75.0" text="DATE" />-->
<!--                                    <TableColumn prefWidth="316.0" text="DESCRIPTION" />-->
<!--                                </columns>-->
<!--                              </TableView>-->
<!--                              <AnchorPane layoutX="53.0" layoutY="20.0" prefHeight="413.0" prefWidth="620.0" styleClass="forminner">-->
<!--                                 <children>-->
<!--                                    <TextField fx:id="tabfutureplansname" layoutX="137.0" layoutY="14.0" prefHeight="39.0" prefWidth="325.0" promptText="NAME" styleClass="textfields" />-->
<!--                                    <DatePicker fx:id="tabfutureplansdateofimplementation" layoutX="137.0" layoutY="78.0" prefHeight="39.0" prefWidth="325.0" promptText="DATE OF IMPLEMENTATION" styleClass="textfields" />-->
<!--                                    <TextArea fx:id="tabfutureplansdescription" layoutX="24.0" layoutY="134.0" prefHeight="200.0" prefWidth="574.0" promptText="SHORT DESCRIPTION OF THE PLANS........." styleClass="textfields" />-->
<!--                                    <Button fx:id="tabfutureplanssubmit" layoutX="264.0" layoutY="356.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="94.0" styleClass="buttonorange" text="SUBMIT" />-->
<!--                                 </children>-->
<!--                              </AnchorPane>-->
<!--                              <Button layoutX="886.0" layoutY="415.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="147.0" styleClass="buttonorange" text="EXPORT REPORT" />-->
<!--                           </children></AnchorPane>-->
<!--                     </content>-->
<!--                  </Tab>-->
<!--                  TODO V1.2-->
                  <Tab fx:id="tabstockalerts" text="STOCK ALERTS">
                     <content>
                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                           <children>
                              <TableView fx:id="stockalerttable" layoutX="3.0" layoutY="14.0" prefHeight="555.0" prefWidth="1197.0">
                                <columns>
                                  <TableColumn fx:id="stockalerttableid" prefWidth="75.0" text="ID" />
                                  <TableColumn fx:id="stockalerttablename" prefWidth="75.0" text="NAME" />
                                    <TableColumn fx:id="stockalerttabledate" prefWidth="103.0" text="DATE" />
                                    <TableColumn fx:id="stockalerttablemarkasread" prefWidth="149.0" text="MARK AS READ" />
                                </columns>
                              </TableView>
                           </children>
                        </AnchorPane>
                     </content>
                  </Tab>
                  <Tab fx:id="taballaudits" text="ALL AUDITS">
                     <content>
                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                           <children>
                              <AnchorPane layoutX="313.0" layoutY="98.0" prefHeight="378.0" prefWidth="578.0" styleClass="forminner">
                                 <children>
                                    <Button fx:id="exportcategoryreport" layoutX="30.0" layoutY="148.0" mnemonicParsing="false" prefHeight="41.0" prefWidth="225.0" styleClass="buttongreen" text="EXPORT CATEGORY SALES REPORT" />
                                    <Button fx:id="exportfullreport" layoutX="30.0" layoutY="46.0" mnemonicParsing="false" prefHeight="41.0" prefWidth="225.0" styleClass="buttongreen" text="EXPORT COMPLETE SALES REPORT" />
                                    <Button fx:id="exportemployeereport" layoutX="30.0" layoutY="247.0" mnemonicParsing="false" prefHeight="41.0" prefWidth="225.0" styleClass="buttongreen" text="EXPORT EMPLOYEE SALES REPORT" />
                                    <Button fx:id="getcateegorygraph" layoutX="339.0" layoutY="148.0" mnemonicParsing="false" prefHeight="41.0" prefWidth="225.0" styleClass="buttongreen" text="CATEGORY GRAPHS" />
                                    <Button fx:id="getdetailedgraph" layoutX="339.0" layoutY="46.0" mnemonicParsing="false" prefHeight="41.0" prefWidth="225.0" styleClass="buttongreen" text="DETAILED GRAPHS" />
                                    <Button fx:id="getemployeegraph" layoutX="339.0" layoutY="247.0" mnemonicParsing="false" prefHeight="41.0" prefWidth="225.0" styleClass="buttongreen" text="EMPLOYEE GRAPHS" />
                                 </children>
                              </AnchorPane>
                           </children>
                        </AnchorPane>
                     </content>
                  </Tab>
              </tabs>
            </TabPane>
            <Label fx:id="clock" layoutX="238.0" layoutY="22.0" prefHeight="36.0" prefWidth="181.0" text="TIME LABEL" textFill="#fffdfd" />
            <Button fx:id="topanelbutton" layoutX="659.0" layoutY="22.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="134.0" styleClass="buttonyellow" text="BACK TO PANEL" />
            <Button fx:id="tocarwashbutton" layoutX="819.0" layoutY="22.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="134.0" styleClass="buttonyellow" text="CARWASH" />
            <Button fx:id="toemployeesbutton" layoutX="963.0" layoutY="22.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="134.0" styleClass="buttonyellow" text="CASHIERS" />
            <Button fx:id="logoutbutton" layoutX="513.0" layoutY="22.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="134.0" styleClass="buttonred" text="LOG OUT" />
            <Button fx:id="tosupplierbutton" layoutX="1103.0" layoutY="22.0" mnemonicParsing="false" prefHeight="36.0" prefWidth="96.0" styleClass="buttonyellow" text="SUPPLIERS" />
      </children>
    </AnchorPane>
  </children>
   <stylesheets>
      <URL value="@../styles/buttons.css" />
      <URL value="@../styles/css.css" />
      <URL value="@../styles/Login.css" />
      <URL value="@../styles/panels.css" />
      <URL value="@../styles/tablecolors.css" />
   </stylesheets>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.text.Font?>
<AnchorPane fx:id="panel" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity"
            prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/11.0.1"
            xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.ShopControllers.OnlinePaymentsController">
    <children>
        <Button fx:id="mpesa" layoutX="33.0" layoutY="143.0" mnemonicParsing="false" prefHeight="57.0" prefWidth="537.0"
                style="-fx-background-color: GREEN;" text="ONLINE PAYMENTS"/>
        <Button fx:id="kcb" layoutX="33.0" layoutY="223.0" mnemonicParsing="false" prefHeight="57.0" prefWidth="537.0"
                style="-fx-background-color: LIGHTGREEN;" text="REDEEM LOYALTY POINTS"/>
        <Button fx:id="complete" layoutX="33.0" layoutY="293.0" mnemonicParsing="false" prefHeight="95.0"
                prefWidth="254.0" text="COMPLETE " textFill="RED">
            <font>
                <Font size="37.0"/>
            </font>
        </Button>
        <Button fx:id="goofflinepayments" layoutX="310.0" layoutY="293.0" mnemonicParsing="false" prefHeight="95.0"
                prefWidth="254.0" text="PAY CASH" textFill="RED">
            <font>
                <Font size="37.0"/>
            </font>
        </Button>
        <AnchorPane layoutX="-7.0" prefHeight="127.0" prefWidth="608.0" style="-fx-background-color: black;">
            <children>
                <Button fx:id="back" layoutX="496.0" layoutY="35.0" mnemonicParsing="false" prefHeight="44.0"
                        prefWidth="90.0" text="BACK"/>
                <Label fx:id="price" alignment="CENTER" contentDisplay="CENTER" layoutX="138.0" layoutY="33.0"
                       prefHeight="70.0" prefWidth="185.0" text="0.00" textAlignment="CENTER" textFill="#f20606">
                    <font>
                        <Font name="Clarendon BT Roman" size="43.0"/>
                    </font>
                </Label>
                <Label alignment="CENTER" layoutX="40.0" layoutY="41.0" prefHeight="41.0" prefWidth="72.0" text="PRICE"
                       textFill="#f8f8f8">
                    <font>
                        <Font name="Century751 BT Italic" size="17.0"/>
                    </font>
                </Label>
            </children>
        </AnchorPane>
        <!--        <Button layoutX="14.0" layoutY="156.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="537.0" text="COOP"-->
        <!--                fx:id="coop"/>-->
        <!--        <Button layoutX="14.0" layoutY="206.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="537.0"-->
        <!--                style="-fx-background-color: LIGHTBLUE;" text="BARCLAYS" fx:id="barclays"/>-->
        <!--        <Button layoutX="14.0" layoutY="249.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="537.0"-->
        <!--                text="" fx:id="loyalties"/>-->
        <!--        <Button layoutX="14.0" layoutY="299.0" mnemonicParsing="false" prefHeight="25.0" prefWidth="537.0"-->
        <!--                style="-fx-background-color: BROWN;" text="EQUITY BANK" fx:id="equity"/>-->
    </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Label?>
<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<VBox xmlns:fx="http://javafx.com/fxml/1" fx:id="scanner" maxHeight="-Infinity" maxWidth="-Infinity"
      minHeight="-Infinity"
      minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/10.0.1"
      fx:controller="Controllers.ShopControllers.scannerController">
    <children>
        <SplitPane dividerPositions="0.29797979797979796" prefHeight="401.0" prefWidth="600.0">
            <items>
                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
                    <children>
                        <Label layoutX="60.0" layoutY="111.0" text="Label"/>
                    </children>
                </AnchorPane>
                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="160.0" prefWidth="100.0">
                    <children>
                        <Label layoutX="253.0" layoutY="122.0" text="Label"/>
                    </children>
                </AnchorPane>
            </items>
        </SplitPane>
    </children>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.text.*?>
<?import java.net.URL?>
<VBox xmlns:fx="http://javafx.com/fxml/1" fx:id="shopPanel" prefHeight="700.0" prefWidth="1200.0" styleClass="form"
      stylesheets="@../styles/Login.css" xmlns="http://javafx.com/javafx/11.0.1"
      fx:controller="Controllers.ShopControllers.ShopController">
    <children>
        <MenuBar>
            <menus>
                <Menu mnemonicParsing="false" text="Account">
                    <items>
                        <MenuItem fx:id="logoutMenu" mnemonicParsing="false" text="Log out"/>
                        <MenuItem fx:id="exitMenu" mnemonicParsing="false" text="Quit"/>
                        <MenuItem fx:id="accountdetailsMenu" mnemonicParsing="false" text="Account Details"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Short Cuts">
                    <items>
                        <MenuItem fx:id="CreatorsMenu" mnemonicParsing="false" text="Creators"/>
                        <MenuItem fx:id="helpMenu" mnemonicParsing="false" text="Help"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Panel">
                    <items>
                        <MenuItem fx:id="stores" mnemonicParsing="false" text="Stores"/>
                        <MenuItem fx:id="stocks" mnemonicParsing="false" text="Stock management"/>
                        <MenuItem mnemonicParsing="false" text="Audits"/>
                    </items>
                </Menu>
            </menus>
        </MenuBar>

        <AnchorPane prefHeight="675.0" prefWidth="1200.0">
            <children>
                <SplitPane dividerPositions="0.15221238938053097" orientation="VERTICAL" prefHeight="698.0"
                           prefWidth="1200.0">
                    <items>
                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="83.0" prefWidth="947.0" styleClass="form"
                                    stylesheets="@../styles/css.css">
                            <children>
                                <Label fx:id="clock" alignment="CENTER" layoutX="14.0" layoutY="21.0" prefHeight="42.0"
                                       prefWidth="145.0" text="00:00:00" textAlignment="CENTER">
                                    <font>
                                        <Font size="25.0"/>
                                    </font>
                                </Label>
                                <ImageView fx:id="logoimage" fitHeight="54.0" fitWidth="200.0" layoutX="296.0"
                                           layoutY="15.0" pickOnBounds="true" preserveRatio="true"/>
                                <Label fx:id="username" alignment="CENTER" layoutX="806.0" layoutY="26.0"
                                       prefHeight="32.0" prefWidth="364.0" text="user name" textFill="WHITE">
                                    <font>
                                        <Font size="22.0"/>
                                    </font>
                                </Label>
                                <Button fx:id="logoutb" layoutX="680.0" layoutY="21.0" mnemonicParsing="false"
                                        prefHeight="42.0" prefWidth="116.0" styleClass="buttons" text="LOG OUT">
                                    <font>
                                        <Font size="18.0"/>
                                    </font>
                                </Button>
                                <Button fx:id="panel" layoutX="550.0" layoutY="21.0" mnemonicParsing="false"
                                        prefHeight="42.0" prefWidth="116.0" styleClass="buttons" text="PANEL">
                                    <font>
                                        <Font size="18.0"/>
                                    </font>
                                </Button>
                            </children>
                        </AnchorPane>
                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="600.0" prefWidth="900.0"
                                    styleClass="form" stylesheets="@../styles/panels.css">
                            <children>
                                <TextField fx:id="barcodetext" layoutX="14.0" layoutY="14.0" prefHeight="42.0"
                                           prefWidth="222.0" promptText="BAR CODE INPUT">
                                    <font>
                                        <Font size="19.0"/>
                                    </font>
                                </TextField>
                                <Button fx:id="searchb" layoutX="588.0" layoutY="16.0" mnemonicParsing="false"
                                        prefHeight="42.0" prefWidth="82.0" styleClass="buttonorange"
                                        stylesheets="@../styles/buttons.css" text="SEARCH"/>
                                <ScrollPane layoutX="14.0" layoutY="67.0" prefHeight="498.0" prefWidth="656.0">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="484.0" prefWidth="650.0"
                                                    stylesheets="@../styles/buttons.css">
                                            <children>
                                                <TableView fx:id="cart" layoutX="2.0" layoutY="3.0" prefHeight="399.0"
                                                           prefWidth="646.0">
                                                    <placeholder>
                                                        <Label text=""/>
                                                    </placeholder>
                                                    <columns>
                                                        <TableColumn fx:id="name" prefWidth="151.0" text="NAME"/>
                                                        <TableColumn fx:id="code" prefWidth="118.0" text="BAR CODE"/>
                                                        <TableColumn fx:id="price" minWidth="0.0" prefWidth="129.0"
                                                                     text="UNIT PRICE"/>
                                                        <TableColumn fx:id="amount" prefWidth="105.0" text="AMOUNT"/>
                                                        <TableColumn fx:id="cumulativeprice" prefWidth="140.0"
                                                                     text="TOTAL PRICE"/>
                                                    </columns>
                                                </TableView>
                                                <Button fx:id="deletefromcartb" layoutX="241.0" layoutY="414.0"
                                                        mnemonicParsing="false" prefHeight="42.0" prefWidth="145.0"
                                                        styleClass="buttonorange" text="DELETE SELECTED"
                                                        textFill="#fffefe"/>
                                                <Button fx:id="clearb" layoutX="43.0" layoutY="414.0"
                                                        mnemonicParsing="false" prefHeight="42.0" prefWidth="145.0"
                                                        styleClass="buttonred" text="CLEAR" textFill="#f5f3f3"/>
                                                <Label fx:id="totalprice" alignment="CENTER" layoutX="437.0"
                                                       layoutY="414.0" prefHeight="42.0" prefWidth="190.0" text="00.00 "
                                                       textAlignment="CENTER">
                                                    <font>
                                                        <Font size="21.0"/>
                                                    </font>
                                                </Label>
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </ScrollPane>
                                <SplitPane dividerPositions="0.5311778290993071" layoutX="680.0" layoutY="12.0"
                                           orientation="VERTICAL" prefHeight="540.0" prefWidth="510.0">
                                    <items>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0"
                                                    styleClass="form">
                                            <children>
                                                <ScrollPane layoutX="11.0" layoutY="36.0" prefHeight="237.0"
                                                            prefWidth="487.0">
                                                    <content>
                                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="228.0"
                                                                    prefWidth="470.0">
                                                            <children>
                                                                <TableView fx:id="listViewHeldItems" prefHeight="227.0"
                                                                           prefWidth="474.0">
                                                                    <placeholder>
                                                                        <Label text=""/>
                                                                    </placeholder>
                                                                    <columns>
                                                                        <TableColumn fx:id="heldid" prefWidth="134.0"
                                                                                     text="id"/>
                                                                        <TableColumn fx:id="heldname" prefWidth="334.0"
                                                                                     text="name"/>
                                                                    </columns>
                                                                </TableView>
                                                            </children>
                                                        </AnchorPane>
                                                    </content>
                                                </ScrollPane>
                                                <Label alignment="CENTER" layoutX="218.0" layoutY="14.0"
                                                       prefHeight="17.0" prefWidth="82.0" text="HELD ITEMS"/>
                                            </children>
                                        </AnchorPane>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="100.0" prefWidth="160.0"
                                                    styleClass="form">
                                            <children>
                                                <Button fx:id="onlinepayments" layoutX="11.0" layoutY="22.0"
                                                        mnemonicParsing="false" prefHeight="67.0" prefWidth="145.0"
                                                        styleClass="buttonred" text="ONLINE PAYMENT">
                                                    <font>
                                                        <Font size="15.0"/>
                                                    </font>
                                                </Button>
                                                <Button fx:id="holduserdatab" layoutX="11.0" layoutY="144.0"
                                                        mnemonicParsing="false" prefHeight="67.0" prefWidth="145.0"
                                                        styleClass="buttongreen" text="HOLD">
                                                    <font>
                                                        <Font size="15.0"/>
                                                    </font>
                                                </Button>
                                                <Button fx:id="paycash" layoutX="181.0" layoutY="22.0"
                                                        mnemonicParsing="false" prefHeight="67.0" prefWidth="130.0"
                                                        styleClass="buttonorange" text="PAY CASH">
                                                    <font>
                                                        <Font size="15.0"/>
                                                    </font>
                                                </Button>
                                                <Button fx:id="loyaltiesB" layoutX="354.0" layoutY="22.0"
                                                        mnemonicParsing="false" prefHeight="67.0" prefWidth="130.0"
                                                        styleClass="buttonyellow" text="LOYALTIES">
                                                    <font>
                                                        <Font size="15.0"/>
                                                    </font>
                                                </Button>
                                                <Button layoutX="354.0" layoutY="144.0" mnemonicParsing="false"
                                                        prefHeight="67.0" prefWidth="130.0" styleClass="buttonred"
                                                        text="END DAY">
                                                    <font>
                                                        <Font size="15.0"/>
                                                    </font>
                                                </Button>
                                                <Button fx:id="chatbox" layoutX="181.0" layoutY="144.0"
                                                        mnemonicParsing="false" prefHeight="67.0" prefWidth="130.0"
                                                        styleClass="buttonviolet" text="CHAT BOX">
                                                    <font>
                                                        <Font size="15.0"/>
                                                    </font>
                                                </Button>
                                            </children>
                                            <stylesheets>
                                                <URL value="@../styles/css.css"/>
                                                <URL value="@../styles/buttons.css"/>
                                            </stylesheets>
                                        </AnchorPane>
                                    </items>
                                </SplitPane>
                                <TextField fx:id="searchname" layoutX="262.0" layoutY="14.0" prefHeight="42.0"
                                           prefWidth="307.0" promptText="ITEM NAME">
                                    <font>
                                        <Font size="19.0"/>
                                    </font>
                                </TextField>

                            </children>
                        </AnchorPane>
                    </items>
                </SplitPane>
            </children>
        </AnchorPane>
    </children>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.TextField?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>

<VBox fx:id="panel" maxHeight="-Infinity" maxWidth="-Infinity" minHeight="-Infinity" minWidth="-Infinity" prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.ShopControllers.PriceCashControllerExit">
   <children>
      <AnchorPane prefHeight="500.0" prefWidth="600.0">
         <children>
            <Button fx:id="complete" layoutX="23.0" layoutY="283.0" mnemonicParsing="false" prefHeight="95.0" prefWidth="254.0" text="COMPLETE " textFill="RED">
               <font>
                  <Font size="37.0" />
               </font>
            </Button>
            <TextField fx:id="cash" alignment="CENTER" layoutX="23.0" layoutY="185.0" prefHeight="50.0" prefWidth="325.0" promptText="PRICE">
               <font>
                  <Font size="23.0" />
               </font>
            </TextField>
            <Button fx:id="goonlinepayments" layoutX="300.0" layoutY="283.0" mnemonicParsing="false" prefHeight="95.0" prefWidth="254.0" text="ONLINE" textFill="RED">
               <font>
                  <Font size="37.0" />
               </font>
            </Button>
            <AnchorPane prefHeight="138.0" prefWidth="600.0" style="-fx-background-color: black;">
               <children>
                  <Label fx:id="price" alignment="CENTER" contentDisplay="CENTER" layoutX="97.0" layoutY="49.0" prefHeight="70.0" prefWidth="185.0" text="0.00" textAlignment="CENTER" textFill="#f20606">
                     <font>
                        <Font name="Clarendon BT Roman" size="43.0" />
                     </font>
                  </Label>
                  <Label fx:id="balance" alignment="CENTER" contentDisplay="CENTER" layoutX="415.0" layoutY="49.0" prefHeight="70.0" prefWidth="165.0" text="0.00" textAlignment="CENTER" textFill="#f20606">
                     <font>
                        <Font name="Clarendon BT Roman" size="43.0" />
                     </font>
                  </Label>
                  <Label alignment="CENTER" layoutX="7.0" layoutY="64.0" prefHeight="41.0" prefWidth="72.0" text="PRICE" textFill="#f8f8f8">
                     <font>
                        <Font name="Century751 BT Italic" size="17.0" />
                     </font>
                  </Label>
                  <Label alignment="CENTER" layoutX="300.0" layoutY="64.0" prefHeight="41.0" prefWidth="96.0" text="BALANCE" textFill="WHITE">
                     <font>
                        <Font name="Century751 BT Italic" size="17.0" />
                     </font>
                  </Label>
                  <Button fx:id="back" layoutX="508.0" layoutY="8.0" mnemonicParsing="false" prefHeight="41.0" prefWidth="72.0" text="BACK" />
               </children>
            </AnchorPane>
            <Button fx:id="done" layoutX="458.0" layoutY="185.0" mnemonicParsing="false" prefHeight="50.0" prefWidth="90.0" text="DONE" />
         </children>
      </AnchorPane>
   </children>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.*?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.*?>
<?import javafx.scene.text.Font?>
<?import java.net.URL?>
<VBox fx:id="parentsstocks" prefHeight="700.0" prefWidth="1200.0" xmlns="http://javafx.com/javafx/11.0.1"
      xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.ShopControllers.StocksController">
    <children>
        <MenuBar>
            <menus>
                <Menu mnemonicParsing="false" text="Account">
                    <items>
                        <MenuItem fx:id="logout" mnemonicParsing="false" text="Log out"/>
                        <MenuItem fx:id="payments" mnemonicParsing="false" text="OnlinePayments"/>
                        <MenuItem fx:id="accountdetails" mnemonicParsing="false" text="Account Details"/>
                        <MenuItem fx:id="contactemployer" mnemonicParsing="false" text="Contact employer"/>
                        <MenuItem fx:id="history" mnemonicParsing="false" text="History"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="History">
                    <items>
                        <MenuItem fx:id="previoussales" mnemonicParsing="false" text="Previous sales"/>
                        <MenuItem fx:id="timeline" mnemonicParsing="false" text="Your timeline at work"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Help">
                    <items>
                        <MenuItem fx:id="aboutsoftware" mnemonicParsing="false" text="About this Software"/>
                        <MenuItem fx:id="creators" mnemonicParsing="false" text="Creator Page"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Panel">
                    <items>
                        <MenuItem fx:id="employees" mnemonicParsing="false" text="Stores"/>
                        <MenuItem mnemonicParsing="false" text="Stock management"/>
                        <MenuItem mnemonicParsing="false" text="Audits"/>
                    </items>
                </Menu>
            </menus>
        </MenuBar>
        <SplitPane dividerPositions="0.2505567928730512" focusTraversable="true" prefHeight="650.0" prefWidth="1200.0">
            <items>
                <AnchorPane styleClass="subPanel">
                    <children>
                        <Label fx:id="clock" alignment="CENTER" contentDisplay="CENTER" layoutX="1.0" layoutY="241.0"
                               prefHeight="66.0" prefWidth="226.0">
                            <font>
                                <Font name="Gabriola" size="44.0"/>
                            </font>
                            <textFill>
                                <LinearGradient endX="1.0" endY="0.19047619047619047">
                                    <stops>
                                        <Stop color="#ff0842"/>
                                        <Stop color="#7d7c38" offset="0.14559386973180072"/>
                                        <Stop color="#ff3a38" offset="0.48659003831417624"/>
                                        <Stop color="#100fb8" offset="0.8467432950191567"/>
                                        <Stop color="#1a10e0" offset="1.0"/>
                                    </stops>
                                </LinearGradient>
                            </textFill>
                        </Label>
                        <Button fx:id="home" layoutX="31.0" layoutY="391.0" mnemonicParsing="false" prefHeight="57.0"
                                prefWidth="160.0" styleClass="buttongreen" text="HOME"/>
                    </children>
                </AnchorPane>
                <AnchorPane id="Content" minHeight="-1.0" minWidth="-1.0" prefHeight="550.0" prefWidth="700.0"
                            styleClass="mainPanel">
                    <children>
                        <Label alignment="CENTER" layoutX="437.0" layoutY="-13.0" prefHeight="36.0" prefWidth="250.0"
                               style="&#10;" text="STOCKS PANEL" textAlignment="CENTER" wrapText="false">
                            <textFill>
                                <RadialGradient centerX="0.5055555555555555" centerY="0.561904761904762" radius="0.5">
                                    <stops>
                                        <Stop color="#65112a"/>
                                        <Stop color="#2f1ab5" offset="0.6590038314176243"/>
                                        <Stop color="#9a0000" offset="0.7338942212742426"/>
                                        <Stop color="#6b0b0b" offset="1.0"/>
                                    </stops>
                                </RadialGradient>
                            </textFill>
                            <font>
                                <Font size="32.0" fx:id="x1"/>
                            </font>
                        </Label>
                        <TabPane fx:id="tabpane" layoutX="4.0" layoutY="30.0" pickOnBounds="false" prefHeight="610.0"
                                 prefWidth="885.0" tabClosingPolicy="UNAVAILABLE">
                            <tabs>
                                <Tab text="ADDING ITEMS">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="413.0" prefWidth="482.0">
                                            <children>
                                                <Button fx:id="addmanually" layoutX="150.0" layoutY="491.0"
                                                        mnemonicParsing="false" prefHeight="66.0" prefWidth="243.0"
                                                        styleClass="buttonred" stylesheets="@../styles/css.css"
                                                        text="ADD STOCK ITEM MANUALLY"/>
                                                <Button fx:id="usescanner" layoutX="443.0" layoutY="491.0"
                                                        mnemonicParsing="false" prefHeight="66.0" prefWidth="243.0"
                                                        styleClass="buttonorange" stylesheets="@../styles/css.css"
                                                        text="ADD STOCK ITEM BY SCANNING"/>
                                                <ImageView fitHeight="293.0" fitWidth="297.0" layoutX="574.0"
                                                           layoutY="70.0" pickOnBounds="true" preserveRatio="true"/>
                                                <AnchorPane layoutX="137.0" prefHeight="452.0" prefWidth="612.0"
                                                            styleClass="forminner">
                                                    <children>
                                                        <TextField fx:id="itemname" alignment="CENTER" layoutX="146.0"
                                                                   layoutY="23.0" prefHeight="54.0" prefWidth="320.0"
                                                                   promptText="NAME" styleClass="textfields"/>
                                                        <TextField fx:id="itemcode" alignment="CENTER" layoutX="146.0"
                                                                   layoutY="90.0" prefHeight="54.0" prefWidth="321.0"
                                                                   promptText="BAR CODE" styleClass="textfields"/>
                                                        <TextField fx:id="itemprice" alignment="CENTER" layoutX="146.0"
                                                                   layoutY="158.0" prefHeight="54.0" prefWidth="321.0"
                                                                   promptText="PRICE" styleClass="textfields"/>
                                                        <TextField fx:id="itemcategory" alignment="CENTER"
                                                                   layoutX="146.0" layoutY="226.0" prefHeight="54.0"
                                                                   prefWidth="321.0" promptText="CATEGORY"
                                                                   styleClass="textfields"/>
                                                        <TextField fx:id="amount" alignment="CENTER" layoutX="146.0"
                                                                   layoutY="296.0" prefHeight="54.0" prefWidth="321.0"
                                                                   promptText="AMOUNT" styleClass="textfields"/>
                                                        <Button fx:id="image" layoutX="249.0" layoutY="371.0"
                                                                mnemonicParsing="false" prefHeight="54.0"
                                                                prefWidth="108.0" styleClass="buttonviolet"
                                                                text="IMAGE FILE"/>
                                                    </children>
                                                </AnchorPane>
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </Tab>
                                <Tab fx:id="existingstockdtab" text="EXISTING STOCK">
                                    <content>
                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                                            <children>
                                                <ScrollPane layoutX="11.0" layoutY="9.0" prefHeight="504.0"
                                                            prefWidth="870.0">
                                                    <content>
                                                        <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="496.0"
                                                                    prefWidth="862.0">
                                                            <children>
                                                                <TableView fx:id="table" layoutY="7.0"
                                                                           prefHeight="487.0" prefWidth="859.0">
                                                                    <placeholder>
                                                                        <Label text=""/>
                                                                    </placeholder>
                                                                    <columns>
                                                                        <TableColumn fx:id="name" prefWidth="116.0"
                                                                                     text="NAME"/>
                                                                        <TableColumn fx:id="price" prefWidth="133.0"
                                                                                     text="PRICE"/>
                                                                        <TableColumn fx:id="category" prefWidth="174.0"
                                                                                     text="CATEGORY"/>
                                                                        <TableColumn fx:id="quantity" prefWidth="204.0"
                                                                                     text="QUANTITY"/>
                                                                        <TableColumn fx:id="barcode" prefWidth="231.0"
                                                                                     text="BAR CODE"/>
                                                                    </columns>
                                                                </TableView>
                                                            </children>
                                                        </AnchorPane>
                                                    </content>
                                                </ScrollPane>
                                                <Button fx:id="delete" layoutX="364.0" layoutY="519.0"
                                                        mnemonicParsing="false" prefHeight="54.0" prefWidth="204.0"
                                                        styleClass="buttonred" stylesheets="@../styles/css.css"
                                                        text="DELETE SELECTED DETAILS"/>
                                            </children>
                                        </AnchorPane>
                                    </content>
                                </Tab>
                            </tabs>
                        </TabPane>
                    </children>
                </AnchorPane>
            </items>
        </SplitPane>
        <HBox id="HBox" alignment="CENTER_LEFT" spacing="5.0" VBox.vgrow="NEVER">
            <children>
                <Pane prefHeight="-1.0" prefWidth="-1.0" HBox.hgrow="ALWAYS">
                    <children>
                        <Label layoutX="470.0" maxHeight="1.7976931348623157E308" maxWidth="-1.0"
                               text="PRODUCT OF NANOTECHSOFTWARES" textFill="#e40303">
                            <font>
                                <Font size="11.0" fx:id="x3"/>
                            </font>
                        </Label>
                    </children>
                </Pane>
            </children>
            <padding>
                <Insets bottom="3.0" left="3.0" right="3.0" top="3.0"/>
            </padding>
        </HBox>
    </children>
    <stylesheets>
        <URL value="@../styles/buttons.css"/>
        <URL value="@../styles/Login.css"/>
        <URL value="@../styles/panels.css"/>
        <URL value="@../styles/css.css"/>
    </stylesheets>
</VBox>


.buttonred:hover{
    -fx-background-color: purple;
    -fx-text-fill: black;
    -fx-border-color: #fff;
    -fx-border-width: 3px;
}
.buttonred{
    -fx-background-color: #ff0000;
}
.buttonyellow{
    -fx-background-color: #ffff00;

}

.buttonyellow:hover{
    -fx-background-color: purple;
    -fx-text-fill: black;
    -fx-border-color: #fff;
    -fx-border-width: 3px;
}
.buttonorange{
    -fx-background-color: #ffa500;
}
.buttonorange:hover{
    -fx-background-color: purple;
    -fx-text-fill: black;
    -fx-border-color: #fff;
    -fx-border-width: 3px;
}

.buttongreen:hover{
    -fx-background-color: purple;
    -fx-text-fill: black;
    -fx-border-color: #fff;
    -fx-border-width: 3px;
}
.buttongreen{
    -fx-background-color: #008000;
}

.buttonviolet{
    -fx-background-color: #ee82ee;
}
.buttonviolet:hover{
    -fx-background-color: purple;
    -fx-text-fill: black;
    -fx-border-color: #fff;
    -fx-border-width: 3px;
}
.button {
    -fx-opacity: 1.0;
}

.button:hover {
    -fx-opacity: 0.6;
}


.vbox {
    -fx-border-color: #2e8b57;
    -fx-border-width: 2px;
    -fx-padding: 10;
    -fx-spacing: 8;
}


.comboTextField {
    -fx-background-color: -fx-text-box-border, -fx-control-inner-background;
    -fx-background-insets: 0, 1 0 1 1;
    -fx-padding: 1 3 1 3;
    -fx-background-radius: 0;
    -fx-cursor: hand;
}

.comboTextField:focused {
    -fx-background-color: -fx-text-box-border, -fx-control-inner-background;
    -fx-background-insets: 0, 1 0 1 1;

}

.comboButton {
    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
    -fx-background-insets: 0, 1, 2;
    -fx-background-radius: 0 5 5 0, 0 4 4 0, 0 3 3 0;
}

.comboButton:focused {
    -fx-color: -fx-focused-base;
    -fx-background-color: -fx-outer-border, -fx-inner-border, -fx-body-color;
    -fx-background-insets: 0, 1, 2;
    -fx-background-radius: 0 5 5 0, 0 4 4 0, 0 3 3 0;
}


.comboFocus {
    -fx-border-color: -fx-focus-color;
    -fx-border-insets: -1;
    -fx-border-radius: 0 5 5 0
}

.comboFocusOut {
    -fx-border-color: transparent;
    -fx-border-insets: 0;
    -fx-border-radius: 0 5 5 0
}
.parent {
    -fx-background-image: url(../images/banner_hardware.png);
    -fx-background-position: center;
    -fx-background-repeat: no-repeat;
    -fx-background-size: 1024 600;
}

.backgroundchat {
    -fx-background-image: url(../images/banner_hardware.png);

}

.textfields {

    -fx-background-color: rgba(87, 87, 87, 0.65);
    -fx-cursor-color: RED;
    -fx-text-fill: white;
    -fx-caret-color: red;
    -fx-font-size: 18px;
}

.buttons {
    -fx-text-fill: white;

    -fx-background-color: #3baa48;

}

.buttons:hover {
    -fx-background-color: purple;
    -fx-text-fill: black;
    -fx-border-color: #fff;
    -fx-border-width: 3px;
}
.licensetext{

    -fx-fill: black;

}.list-cell {
     -fx-cell-size: 50;
     -fx-animated: true;
     -fx-padding: 1px;
 }

 .list-cell:hover {
     -fx-background-color: #dbdbdb;
 }

 .list-view {
     -fx-border-image-width: 0;
 }

 #statusList {
     -fx-box-border: transparent;
 }

 #userList {
     -fx-box-border: transparent;
 }

 #listHbox {
     -fx-background-color: #d5d5d5;
     -fx-padding: 0.2;
     -fx-spacing: -2;
 }

 #onlineUsersHbox {
     -fx-border-color: #d5d5d5;
     -fx-border-width: 1px;
     -fx-padding: 0.2;
     -fx-spacing: -2;
 }



.form {
    -fx-background-color: linear-gradient(to right, lightblue, blue, purple);
}

.forminner {
    -fx-background-color: #ffffff;
    -fx-background-radius: 20px;
}.mainPanel {
     -fx-background-color: linear-gradient(to right, lightblue, blue, purple);

 }

 .buttonsg:hover {
     -fx-background-color: purple;
     -fx-text-fill: black;
     -fx-border-color: #fff;
     -fx-border-width: 3px;
 }

 .subPanel {
     -fx-background-color: linear-gradient(to bottom, white, lightgrey);

 }

 .logoutButton {

     /*-fx-graphic: ;*/
     -fx-background-image: url("../images/power.jpg");
     -fx-background-size: contain;
     -fx-background-position: center;
     -fx-background-repeat: no-repeat;

 }/*.tab-pane .tab-header-area .tab-header-background {*/
  /*    -fx-opacity: 0;*/
  /*}*/

  /*.tab-pane*/
  /*{*/
  /*    -fx-tab-min-width:90px;*/
  /*}*/

  /*.tab{*/
  /*    -fx-background-insets: 0 1 0 1,0,0;*/
  /*}*/
  /*.tab-pane .tab*/
  /*{*/
  /*    -fx-background-color: #e6e6e6;*/

  /*}*/

  /*.tab-pane .tab:selected*/
  /*{*/
  /*    -fx-background-color: #3c3c3c;*/
  /*}*/

  /*.tab .tab-label {*/
  /*    -fx-alignment: CENTER;*/
  /*    -fx-text-fill: #828282;*/
  /*    -fx-font-size: 12px;*/
  /*    -fx-font-weight: bold;*/
  /*}*/

  /*.tab:selected .tab-label {*/
  /*    -fx-alignment: CENTER;*/
  /*    -fx-text-fill: #96b946;*/
  /*}*/<?xml version="1.0" encoding="UTF-8"?>

       <?import javafx.geometry.Insets?>
       <?import javafx.scene.control.*?>
       <?import javafx.scene.layout.*?>
       <?import javafx.scene.paint.*?>
       <?import javafx.scene.text.*?>
       <?import java.net.URL?>
       <VBox fx:id="parents" prefHeight="700.0" prefWidth="1200.0" xmlns="http://javafx.com/javafx/11.0.1"
             xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.UserAccountManagementControllers.EmployeesController">
           <children>
               <MenuBar>
                   <menus>
                       <Menu mnemonicParsing="false" text="Account">
                           <items>
                               <MenuItem fx:id="logout" mnemonicParsing="false" text="Log out"/>
                               <MenuItem fx:id="payments" mnemonicParsing="false" text="OnlinePayments"/>
                               <MenuItem fx:id="accountdetails" mnemonicParsing="false" text="Account Details"/>
                               <MenuItem fx:id="contactemployer" mnemonicParsing="false" text="Contact employer"/>
                               <MenuItem fx:id="history" mnemonicParsing="false" text="History"/>
                           </items>
                       </Menu>
                       <Menu mnemonicParsing="false" text="History">
                           <items>
                               <MenuItem fx:id="previoussales" mnemonicParsing="false" text="Previous sales"/>
                               <MenuItem fx:id="timeline" mnemonicParsing="false" text="Your timeline at work"/>
                           </items>
                       </Menu>
                       <Menu mnemonicParsing="false" text="Help">
                           <items>
                               <MenuItem fx:id="aboutsoftware" mnemonicParsing="false" text="About this Software"/>
                               <MenuItem fx:id="creators" mnemonicParsing="false" text="Creator Page"/>
                           </items>
                       </Menu>
                       <Menu mnemonicParsing="false" text="Panel">
                           <items>
                               <MenuItem fx:id="stores" mnemonicParsing="false" text="Stores"/>
                               <MenuItem fx:id="stocks" mnemonicParsing="false" text="Stock management"/>
                               <MenuItem mnemonicParsing="false" text="Audits"/>
                           </items>
                       </Menu>
                   </menus>
               </MenuBar>
               <SplitPane dividerPositions="0.2505567928730512" focusTraversable="true" prefHeight="-1.0" prefWidth="-1.0">
                   <items>
                       <AnchorPane prefHeight="611.0" prefWidth="311.0" styleClass="subPanel">
                           <children>
                               <Label fx:id="clock" alignment="CENTER" contentDisplay="CENTER" layoutX="1.0" layoutY="241.0"
                                      prefHeight="66.0" prefWidth="226.0" text="time">
                                   <font>
                                       <Font name="Gabriola" size="44.0"/>
                                   </font>
                                   <textFill>
                                       <LinearGradient endX="1.0" endY="0.19047619047619047">
                                           <stops>
                                               <Stop color="#ff0842"/>
                                               <Stop color="#7d7c38" offset="0.14559386973180072"/>
                                               <Stop color="#ff3a38" offset="0.48659003831417624"/>
                                               <Stop color="#100fb8" offset="0.8467432950191567"/>
                                               <Stop color="#1a10e0" offset="1.0"/>
                                           </stops>
                                       </LinearGradient>
                                   </textFill>
                               </Label>
                               <Button fx:id="home" layoutX="51.0" layoutY="431.0" mnemonicParsing="false" prefHeight="66.0"
                                       prefWidth="176.0" styleClass="buttonorange" text="HOME"/>
                           </children>
                       </AnchorPane>
                       <AnchorPane id="Content" minHeight="-1.0" minWidth="-1.0" prefHeight="686.0" prefWidth="895.0"
                                   styleClass="form">
                           <children>
                               <Label alignment="CENTER" layoutX="93.0" layoutY="-13.0" style="&#10;" text="EMPLOYEE PANEL"
                                      textAlignment="CENTER" textFill="#0a0a0a" wrapText="false">
                                   <font>
                                       <Font name="FangSong" size="37.0" fx:id="x1"/>
                                   </font>
                               </Label>
                               <TabPane fx:id="tabpane" layoutX="14.0" layoutY="30.0" pickOnBounds="false" prefHeight="616.0"
                                        prefWidth="874.0" tabClosingPolicy="UNAVAILABLE">
                                   <tabs>
                                       <Tab text="DOWNLOAD LISTS">
                                           <content>
                                               <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="413.0" prefWidth="482.0">
                                                   <children>
                                                       <Button fx:id="sendtomail" layoutX="232.0" layoutY="390.0"
                                                               mnemonicParsing="false" prefHeight="61.0" prefWidth="411.0"
                                                               styleClass="buttongreen" text="SEND TO MY EMAIL AS SOFT COPY"
                                                               textFill="#fffbfb">
                                                           <font>
                                                               <Font name="Gabriola" size="28.0"/>
                                                           </font>
                                                       </Button>
                                                       <Button fx:id="printoutaspdf" layoutX="233.0" layoutY="198.0"
                                                               mnemonicParsing="false" prefHeight="61.0" prefWidth="409.0"
                                                               styleClass="buttongreen" text="EXPORT AS PDF"
                                                               textFill="#f8f8f8">
                                                           <font>
                                                               <Font name="Gabriola" size="28.0"/>
                                                           </font>
                                                       </Button>
                                                       <Label layoutX="249.0" layoutY="36.0"
                                                              text="Get your employee list using the buttons below"
                                                              textFill="#fc0909">
                                                           <font>
                                                               <Font size="18.0"/>
                                                           </font>
                                                       </Label>
                                                       <Label layoutX="36.0" layoutY="63.0" textFill="#fc0909">
                                                           <font>
                                                               <Font size="18.0"/>
                                                           </font>
                                                       </Label>
                                                   </children>
                                               </AnchorPane>
                                           </content>
                                       </Tab>
                                       <Tab fx:id="existingemptab" text="MY EMPLOYEES">
                                           <content>
                                               <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0" prefWidth="200.0">
                                                   <children>
                                                       <ScrollPane layoutX="11.0" layoutY="9.0" prefHeight="474.0"
                                                                   prefWidth="813.0">
                                                           <content>
                                                               <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="473.0"
                                                                           prefWidth="811.0">
                                                                   <children>
                                                                       <TableView fx:id="tab" layoutY="1.0" prefHeight="456.0"
                                                                                  prefWidth="811.0">
                                                                           <placeholder>
                                                                               <Label text=""/>
                                                                           </placeholder>
                                                                           <columns>
                                                                               <TableColumn fx:id="Name" prefWidth="263.0"
                                                                                            text="NAME"/>
                                                                               <TableColumn fx:id="email" prefWidth="335.0"
                                                                                            text="EMAIL"/>
                                                                               <TableColumn fx:id="id" prefWidth="212.0"
                                                                                            text="ID NUMBER"/>
                                                                           </columns>
                                                                       </TableView>
                                                                   </children>
                                                               </AnchorPane>
                                                           </content>
                                                       </ScrollPane>
                                                       <Button fx:id="delete" layoutX="335.0" layoutY="519.0"
                                                               mnemonicParsing="false" prefHeight="54.0" prefWidth="204.0"
                                                               styleClass="buttonred" text="DELETE SELECTED DETAILS"/>
                                                   </children>
                                               </AnchorPane>
                                           </content>
                                       </Tab>
                                   </tabs>
                               </TabPane>
                           </children>
                       </AnchorPane>
                   </items>
               </SplitPane>
               <HBox id="HBox" alignment="CENTER_LEFT" spacing="5.0" VBox.vgrow="NEVER">
                   <children>
                       <Label maxHeight="1.7976931348623157E308" maxWidth="-1.0" text="Left status" HBox.hgrow="ALWAYS">
                           <font>
                               <Font size="11.0" fx:id="x3"/>
                           </font>
                           <textFill>
                               <Color blue="0.625" green="0.625" red="0.625" fx:id="x4"/>
                           </textFill>
                       </Label>
                       <Pane prefHeight="-1.0" prefWidth="-1.0" HBox.hgrow="ALWAYS"/>
                       <Label font="$x3" maxWidth="-1.0" text="Right status" textFill="$x4" HBox.hgrow="NEVER"/>
                   </children>
                   <padding>
                       <Insets bottom="3.0" left="3.0" right="3.0" top="3.0"/>
                   </padding>
               </HBox>
           </children>
           <stylesheets>
               <URL value="@../styles/buttons.css"/>
               <URL value="@../styles/panels.css"/>
               <URL value="@../styles/Login.css"/>
           </stylesheets>
       </VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import java.lang.String?>
<?import java.net.URL?>
<?import javafx.scene.control.Button?>
<?import javafx.scene.control.Hyperlink?>
<?import javafx.scene.control.Label?>
<?import javafx.scene.control.Menu?>
<?import javafx.scene.control.MenuBar?>
<?import javafx.scene.control.MenuItem?>
<?import javafx.scene.control.SeparatorMenuItem?>
<?import javafx.scene.control.SplitPane?>
<?import javafx.scene.image.ImageView?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.layout.VBox?>
<?import javafx.scene.text.Font?>

<VBox fx:id="panel" prefHeight="700.0" prefWidth="1200.0" stylesheets="@../styles/panels.css" xmlns="http://javafx.com/javafx/11.0.1" xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.UserAccountManagementControllers.PanelController">
    <MenuBar VBox.vgrow="NEVER">
        <Menu mnemonicParsing="false" text="ACCOUNT">
            <MenuItem fx:id="details" mnemonicParsing="false" text="DETAILS" />
            <MenuItem fx:id="logout" mnemonicParsing="false" text="LOGOUT" />
            <MenuItem mnemonicParsing="false" text="Quit" />
        </Menu>
        <Menu mnemonicParsing="false" text="Edit">
            <MenuItem mnemonicParsing="false" text="Undo" />
            <MenuItem mnemonicParsing="false" text="Redo" />
            <SeparatorMenuItem mnemonicParsing="false" />
            <MenuItem mnemonicParsing="false" text="Cut" />
            <MenuItem mnemonicParsing="false" text="Copy" />
            <MenuItem mnemonicParsing="false" text="Paste" />
            <MenuItem mnemonicParsing="false" text="Delete" />
            <SeparatorMenuItem mnemonicParsing="false" />
            <MenuItem mnemonicParsing="false" text="Select All" />
            <MenuItem mnemonicParsing="false" text="Unselect All" />
        </Menu>
        <Menu mnemonicParsing="false" text="Help">
            <MenuItem mnemonicParsing="false" text="About MyHelloApp" />
        </Menu>
    </MenuBar>
    <SplitPane dividerPositions="0.2505567928730512" focusTraversable="true" prefHeight="642.0" prefWidth="1200.0" VBox.vgrow="ALWAYS">
        <AnchorPane styleClass="subPanel">
            <Label fx:id="clock" layoutX="52.0" layoutY="212.0" prefHeight="38.0" prefWidth="133.0" text="00:00:00">
                <font>
                    <Font name="Gabriola" size="30.0" />
                </font>
            </Label>
            <ImageView fx:id="logoimage" fitHeight="150.0" fitWidth="200.0" layoutX="27.0" layoutY="27.0" pickOnBounds="true" preserveRatio="true" />
        </AnchorPane>
        <AnchorPane id="Content" prefHeight="557.0" prefWidth="596.0" styleClass="mainPanel">
            <Label alignment="CENTER" layoutX="342.0" layoutY="14.0" style="&#10;" text="CASHIER PANEL" textAlignment="CENTER" textFill="#fffdfd">
                <font>
                    <Font name="FangSong" size="48.0" />
                </font>
            </Label>
            <Button fx:id="carwash" layoutX="149.0" layoutY="90.0" mnemonicParsing="false" prefHeight="159.0" prefWidth="298.0" styleClass="buttonred" stylesheets="@../styles/buttons.css" text="CAR WASH">
                <font>
                    <Font name="Gabriola" size="28.0" />
                </font>
            </Button>
            <Button fx:id="logoutButton" layoutX="515.0" layoutY="334.0" mnemonicParsing="false" prefHeight="159.0" prefWidth="298.0" style="-fx-background-color: black;">
                <font>
                    <Font name="Gabriola" size="28.0" />
                </font>
                <styleClass>
                    <String fx:value="buttonsg" />
                    <String fx:value="logoutButton" />
                </styleClass>
            </Button>
            <Button fx:id="shop" layoutX="149.0" layoutY="334.0" mnemonicParsing="false" prefHeight="159.0" prefWidth="298.0" styleClass="buttonyellow" text="SHOP">
                <font>
                    <Font name="Gabriola" size="28.0" />
                </font>
            </Button>
<!--            <Button fx:id="chat" layoutX="512.0" layoutY="90.0" mnemonicParsing="false" prefHeight="124.0"-->
<!--                    prefWidth="298.0" styleClass="buttonorange" text="CHAT BOX">-->
<!--                <font>-->
<!--                    <Font name="Gabriola" size="28.0"/>-->
<!--                </font>-->
<!--            </Button>-->
            <Button fx:id="accountb" layoutX="506.0" layoutY="90.0" mnemonicParsing="false" prefHeight="159.0" prefWidth="298.0" styleClass="buttongreen" text="ACCOUNT">
                <font>
                    <Font name="Gabriola" size="28.0" />
                </font>
            </Button>
<!--            <Button fx:id="chat11" layoutX="512.0" layoutY="421.0" mnemonicParsing="false" prefHeight="124.0"-->
<!--                    prefWidth="298.0" styleClass="buttonviolet" text="CONTACT ADMIN">-->
<!--                <font>-->
<!--                    <Font name="Gabriola" size="28.0"/>-->
<!--                </font>-->
<!--            </Button>-->
            <Hyperlink fx:id="link" layoutX="485.0" layoutY="572.0" prefHeight="34.0" prefWidth="179.0" text="NanotechSoftwares" textFill="#f50707" underline="true">
                <font>
                    <Font size="17.0" />
                </font>
            </Hyperlink>
            <Label layoutX="393.0" layoutY="574.0" prefHeight="30.0" prefWidth="92.0" text="Powered by" textFill="#fff4f4">
                <font>
                    <Font size="17.0" />
                </font>
            </Label>
            <stylesheets>
                <URL value="@../styles/panels.css" />
                <URL value="@../styles/css.css" />
                <URL value="@../styles/buttons.css" />
            </stylesheets>
        </AnchorPane>
    </SplitPane>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.*?>
<?import javafx.scene.text.*?>
<?import java.lang.*?>
<?import java.net.URL?>
<VBox xmlns:fx="http://javafx.com/fxml/1" fx:id="AdminPanel" prefHeight="700.0" prefWidth="1200.0"
      xmlns="http://javafx.com/javafx/11.0.1" fx:controller="Controllers.UserAccountManagementControllers.AdminPanelController">
    <MenuBar>
        <Menu mnemonicParsing="false" text="ACCOUNT">
            <MenuItem fx:id="details" mnemonicParsing="false" text="DETAILS"/>
            <MenuItem fx:id="menulogout" mnemonicParsing="false" text="LOGOUT"/>
            <Menu fx:id="branches" mnemonicParsing="false" text="BRANCHES/SHOPS"/>
            <MenuItem fx:id="license" mnemonicParsing="false" text="LICENSE"/>
            <MenuItem fx:id="feedback" mnemonicParsing="false" text="FEEDBACK"/>
            <MenuItem mnemonicParsing="false" text="Quit"/>
        </Menu>
        <Menu mnemonicParsing="false" text="Edit">
            <MenuItem mnemonicParsing="false" text="Undo"/>
            <MenuItem mnemonicParsing="false" text="Redo"/>
            <SeparatorMenuItem mnemonicParsing="false"/>
            <MenuItem mnemonicParsing="false" text="Cut"/>
            <MenuItem mnemonicParsing="false" text="Copy"/>
            <MenuItem mnemonicParsing="false" text="Paste"/>
            <MenuItem mnemonicParsing="false" text="Delete"/>
            <SeparatorMenuItem mnemonicParsing="false"/>
            <MenuItem mnemonicParsing="false" text="Select All"/>
            <MenuItem mnemonicParsing="false" text="Unselect All"/>
        </Menu>
        <Menu mnemonicParsing="false" text="Help">
            <MenuItem mnemonicParsing="false" text="About MyHelloApp"/>
        </Menu>
    </MenuBar>
    <SplitPane dividerPositions="0.2505567928730512" focusTraversable="true" prefHeight="658.0" prefWidth="1200.0"
               VBox.vgrow="ALWAYS">
        <AnchorPane styleClass="subPanel">
            <Label fx:id="clock" alignment="CENTER" layoutX="28.0" layoutY="212.0" prefHeight="49.0" prefWidth="234.0"
                   text="00:00:00">
                <font>
                    <Font name="Gabriola" size="52.0"/>
                </font>
                <textFill>
                    <LinearGradient endY="0.19047619047619047">
                        <stops>
                            <Stop color="#ff0842"/>
                            <Stop color="#7d7c38" offset="0.14559386973180072"/>
                            <Stop color="#ff3a38" offset="0.48659003831417624"/>
                            <Stop color="#100fb8" offset="0.8467432950191567"/>
                            <Stop color="#1a10e0" offset="1.0"/>
                        </stops>
                    </LinearGradient>
                </textFill>
            </Label>
        </AnchorPane>
        <AnchorPane id="Content" prefHeight="617.0" prefWidth="882.0" styleClass="mainPanel"
                    stylesheets="@../styles/buttons.css">
            <Label alignment="CENTER" layoutX="134.0" layoutY="14.0" style="&#10;" text="ADMIN PANEL"
                   textAlignment="CENTER">
                <font>
                    <Font name="FangSong" size="48.0"/>
                </font>
            </Label>
            <Button fx:id="employees" layoutX="89.0" layoutY="95.0" mnemonicParsing="false" prefHeight="124.0"
                    prefWidth="297.0" text="STAFF PANEL">
                <font>
                    <Font name="Gabriola" size="28.0"/>
                </font>
                <styleClass>
                    <!--<String fx:value="userdetails"/>-->
                    <String fx:value="buttonorange"/>
                </styleClass>
            </Button>
            <Button fx:id="carwashpanel" layoutX="500.0" layoutY="281.0" mnemonicParsing="false" prefHeight="124.0"
                    prefWidth="301.0" text="CAR WASH">
                <styleClass>
                    <!--<String fx:value="userpayments"/>-->
                    <String fx:value="buttonyellow"/>
                </styleClass>
                <font>
                    <Font name="Gabriola" size="28.0"/>
                </font>
            </Button>
            <Button layoutX="86.0" layoutY="281.0" mnemonicParsing="false" prefHeight="124.0" prefWidth="297.0" fx:id="audits"
                    text="AUDITS PANEL">
                <font>
                    <Font name="Gabriola" size="28.0"/>
                </font>
                <styleClass>
                    <!--<String fx:value="audits"/>-->
                    <String fx:value="buttongreen"/>
                </styleClass>
            </Button>
            <Button fx:id="stockspanel" layoutX="501.0" layoutY="95.0" mnemonicParsing="false" prefHeight="124.0"
                    prefWidth="298.0" text="INVENTORY">
                <font>
                    <Font name="Gabriola" size="28.0"/>
                </font>
                <styleClass>
                    <String fx:value="buttonviolet"/>
                    <!--<String fx:value="stocksn"/>-->
                </styleClass>
            </Button>

<!--            <Button fx:id="addshop" layoutX="86.0" layoutY="454.0" mnemonicParsing="false" prefHeight="124.0"-->
<!--                    prefWidth="297.0" text="STORES PANEL">-->
<!--                <styleClass>-->
<!--                    &lt;!&ndash;<String fx:value="stocksn"/>&ndash;&gt;-->
<!--                    <String fx:value="buttonred"/>-->
<!--                </styleClass>-->
<!--                <font>-->
<!--                    <Font name="Gabriola" size="28.0"/>-->
<!--                </font>-->
<!--            </Button>-->

            <Button fx:id="backup" layoutX="86.0" layoutY="454.0" mnemonicParsing="false" prefHeight="124.0"
                    prefWidth="297.0" text="BACK UP">
                <styleClass>
                    <!--<String fx:value="stocksn"/>-->
                    <String fx:value="buttonred"/>
                </styleClass>
                <font>
                    <Font name="Gabriola" size="28.0"/>
                </font>
            </Button>
            <Button fx:id="visitSuppliers" layoutX="496.0" layoutY="454.0" mnemonicParsing="false" prefHeight="124.0"
                    prefWidth="308.0" text="SUPPLIERS">
                <font>
                    <Font name="Gabriola" size="28.0"/>
                </font>
                <styleClass>
                    <!--<String fx:value="existingshops"/>-->
                    <String fx:value="buttonorange"/>
                </styleClass>
            </Button>
        </AnchorPane>
    </SplitPane>
    <HBox id="HBox" alignment="CENTER_LEFT" spacing="5.0" VBox.vgrow="NEVER">
        <padding>
            <Insets bottom="3.0" left="3.0" right="3.0" top="3.0"/>
        </padding>
        <Pane prefHeight="43.0" prefWidth="894.0" style="-fx-background-color: #000;" HBox.hgrow="ALWAYS">
            <Hyperlink layoutX="399.0" layoutY="3.0" text="A product of nanotech softwares" textFill="#f51000"/>
        </Pane>
    </HBox>
    <stylesheets>
        <URL value="@../styles/css.css"/>
        <URL value="@../styles/panels.css"/>
    </stylesheets>
</VBox>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.scene.control.*?>
<?import javafx.scene.layout.AnchorPane?>
<AnchorPane prefHeight="400.0" prefWidth="600.0" xmlns="http://javafx.com/javafx/11.0.1"
            xmlns:fx="http://javafx.com/fxml/1" fx:controller="Controllers.UserAccountManagementControllers.UserDetailsController">
    <children>
        <Label layoutX="49.0" layoutY="81.0" prefHeight="30.0" prefWidth="104.0" text="NAME"/>
        <Label layoutX="49.0" layoutY="155.0" prefHeight="30.0" prefWidth="104.0" text="EMAIL"/>
        <Button fx:id="updateb" layoutX="222.0" layoutY="279.0" mnemonicParsing="false" prefHeight="30.0"
                prefWidth="125.0" text="UPDATE DETAILS"/>
        <Label fx:id="name" alignment="CENTER" layoutX="162.0" layoutY="81.0" prefHeight="30.0" prefWidth="417.0"
               text="NAME"/>
        <Label fx:id="email" alignment="CENTER" layoutX="162.0" layoutY="155.0" prefHeight="30.0" prefWidth="417.0"
               text="EMAIL"/>
    </children>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>


<?import javafx.scene.control.Button?>
<?import javafx.scene.layout.AnchorPane?>
<?import javafx.scene.paint.LinearGradient?>
<?import javafx.scene.paint.Stop?>
<?import javafx.scene.text.Font?>
<AnchorPane xmlns:fx="http://javafx.com/fxml/1" fx:id="sleeping" prefHeight="600.0" prefWidth="1024.0"
            styleClass="parent"
            stylesheets="@styles/css.css" xmlns="http://javafx.com/javafx/10.0.1"
            fx:controller="Controllers.SleepingController">
    <Button id="resume" layoutX="357.0" layoutY="186.0" mnemonicParsing="false" prefHeight="64.0" prefWidth="289.0"
            style="-fx-background-color: violet;" text="RESUME">
        <font>
            <Font name="FangSong" size="48.0"/>
        </font>
        <textFill>
            <LinearGradient>
                <stops>
                    <Stop color="#a62d36"/>
                    <Stop color="#155c16" offset="0.5963581782991663"/>
                    <Stop color="#815ac6" offset="1.0"/>
                </stops>
            </LinearGradient>
        </textFill>
    </Button>
</AnchorPane>
<?xml version="1.0" encoding="UTF-8"?>

<?import javafx.geometry.Insets?>
<?import javafx.scene.control.*?>
<?import javafx.scene.layout.*?>
<?import javafx.scene.paint.Color?>
<?import javafx.scene.text.Font?>
<VBox xmlns:fx="http://javafx.com/fxml/1" prefHeight="600.0" prefWidth="900.0" xmlns="http://javafx.com/javafx/10.0.1">
    <children>
        <MenuBar VBox.vgrow="NEVER">
            <menus>
                <Menu mnemonicParsing="false" text="File">
                    <items>
                        <MenuItem mnemonicParsing="false" text="New"/>
                        <MenuItem mnemonicParsing="false" text="Open…"/>
                        <Menu mnemonicParsing="false" text="Open Recent"/>
                        <SeparatorMenuItem mnemonicParsing="false"/>
                        <MenuItem mnemonicParsing="false" text="Close"/>
                        <MenuItem mnemonicParsing="false" text="Save"/>
                        <MenuItem mnemonicParsing="false" text="Save As…"/>
                        <MenuItem mnemonicParsing="false" text="Revert"/>
                        <SeparatorMenuItem mnemonicParsing="false"/>
                        <MenuItem mnemonicParsing="false" text="Preferences…"/>
                        <SeparatorMenuItem mnemonicParsing="false"/>
                        <MenuItem mnemonicParsing="false" text="Quit"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Edit">
                    <items>
                        <MenuItem mnemonicParsing="false" text="Undo"/>
                        <MenuItem mnemonicParsing="false" text="Redo"/>
                        <SeparatorMenuItem mnemonicParsing="false"/>
                        <MenuItem mnemonicParsing="false" text="Cut"/>
                        <MenuItem mnemonicParsing="false" text="Copy"/>
                        <MenuItem mnemonicParsing="false" text="Paste"/>
                        <MenuItem mnemonicParsing="false" text="Delete"/>
                        <SeparatorMenuItem mnemonicParsing="false"/>
                        <MenuItem mnemonicParsing="false" text="Select All"/>
                        <MenuItem mnemonicParsing="false" text="Unselect All"/>
                    </items>
                </Menu>
                <Menu mnemonicParsing="false" text="Help">
                    <items>
                        <MenuItem mnemonicParsing="false" text="About MyHelloApp"/>
                    </items>
                </Menu>
            </menus>
        </MenuBar>
        <SplitPane dividerPositions="0.2505567928730512, 0.7505567928730512" focusTraversable="true" prefHeight="-1.0"
                   prefWidth="-1.0" VBox.vgrow="ALWAYS">
            <items>
                <AnchorPane>
                    <children>
                        <Button layoutX="59.0" layoutY="91.0" mnemonicParsing="false" text="Button"/>
                        <Button layoutX="67.0" layoutY="211.0" mnemonicParsing="false" text="Button"/>
                    </children>
                </AnchorPane>
                <ScrollPane prefHeight="-1.0" prefWidth="-1.0">
                    <content>
                        <AnchorPane id="Content" minHeight="-1.0" minWidth="-1.0" prefHeight="545.0" prefWidth="430.0">
                            <children>
                                <TabPane layoutX="108.0" layoutY="73.0" prefHeight="200.0" prefWidth="200.0"
                                         tabClosingPolicy="UNAVAILABLE">
                                    <tabs>
                                        <Tab text="Untitled Tab 1">
                                            <content>
                                                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0"
                                                            prefWidth="200.0"/>
                                            </content>
                                        </Tab>
                                        <Tab text="Untitled Tab 2">
                                            <content>
                                                <AnchorPane minHeight="0.0" minWidth="0.0" prefHeight="180.0"
                                                            prefWidth="200.0"/>
                                            </content>
                                        </Tab>
                                    </tabs>
                                </TabPane>
                            </children>
                        </AnchorPane>
                    </content>
                </ScrollPane>
                <AnchorPane/>
            </items>
        </SplitPane>
        <HBox id="HBox" alignment="CENTER_LEFT" spacing="5.0" VBox.vgrow="NEVER">
            <children>
                <Label maxHeight="1.7976931348623157E308" maxWidth="-1.0" text="Left status" HBox.hgrow="ALWAYS">
                    <font>
                        <Font size="11.0" fx:id="x3"/>
                    </font>
                    <textFill>
                        <Color blue="0.625" green="0.625" red="0.625" fx:id="x4"/>
                    </textFill>
                </Label>
                <Pane prefHeight="-1.0" prefWidth="-1.0" HBox.hgrow="ALWAYS"/>
                <Label font="$x3" maxWidth="-1.0" text="Right status" textFill="$x4" HBox.hgrow="NEVER"/>
            </children>
            <padding>
                <Insets bottom="3.0" left="3.0" right="3.0" top="3.0"/>
            </padding>
        </HBox>
    </children>
</VBox>
package scanhandler;

import java.awt.*;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

public class BarcodeScanner {

    private static final long THRESHOLD = 100;
    private static final int MIN_BARCODE_LENGTH = 8;
    private final StringBuffer barcode = new StringBuffer();
    private final List<BarcodeListener> listeners = new CopyOnWriteArrayList<>();
    private long lastEventTimeStamp = 0L;

    public BarcodeScanner() {
// todo implement in code
        KeyboardFocusManager.getCurrentKeyboardFocusManager().addKeyEventDispatcher(e -> {
            if (e.getID() != KeyEvent.KEY_RELEASED) {
                return false;
            }

            if (e.getWhen() - lastEventTimeStamp > THRESHOLD) {
                barcode.delete(0, barcode.length());
            }

            lastEventTimeStamp = e.getWhen();

            if (e.getKeyCode() == KeyEvent.VK_ENTER) {
                if (barcode.length() >= MIN_BARCODE_LENGTH) {
                    fireBarcode(barcode.toString());
                }
                barcode.delete(0, barcode.length());
            } else {
                barcode.append(e.getKeyChar());
            }
            return false;
        });

    }

    public static long getTHRESHOLD() {
        return THRESHOLD;
    }

    public static int getMinBarcodeLength() {
        return MIN_BARCODE_LENGTH;
    }

    public StringBuffer getBarcode() {
        return barcode;
    }

    public List<BarcodeListener> getListeners() {
        return listeners;
    }

    public long getLastEventTimeStamp() {
        return lastEventTimeStamp;
    }

    public void setLastEventTimeStamp(long lastEventTimeStamp) {
        this.lastEventTimeStamp = lastEventTimeStamp;
    }

    protected void fireBarcode(String barcode) {
        for (BarcodeListener listener : listeners) {
            listener.onBarcodeRead(barcode);
        }
    }

    public void addBarcodeListener(BarcodeListener listener) {
        listeners.add(listener);
    }

    public void removeBarcodeListener(BarcodeListener listener) {
        listeners.remove(listener);
    }

    public interface BarcodeListener {

        void onBarcodeRead(String barcode);
    }
}package securityandtime;

 import org.apache.commons.codec.binary.Base64;
 import org.jetbrains.annotations.Nullable;

 import javax.crypto.Cipher;
 import javax.crypto.spec.IvParameterSpec;
 import javax.crypto.spec.SecretKeySpec;
 import java.nio.ByteBuffer;
 import java.nio.charset.StandardCharsets;
 import java.security.SecureRandom;

 import static securityandtime.config.throwables;

 /**
  * AesCipher
  * <p>Encode/Decode text by password using AES-128-CBC algorithm</p>
  */
 public class AesCipher {
     public static final int INIT_VECTOR_LENGTH = 16;

     public static int getInitVectorLength() {
         return INIT_VECTOR_LENGTH;
     }

     public static char[] getHexArray() {
         return hexArray;
     }

     public void setData(String data) {
         this.data = data;
     }

     public void setInitVector(String initVector) {
         this.initVector = initVector;
     }

     public void setErrorMessage(String errorMessage) {
         this.errorMessage = errorMessage;
     }

     private final static char[] hexArray = "0123456789ABCDEF".toCharArray();

     /**
      * Encoded/Decoded data
      */
     protected String data;
     /**
      * Initialization vector value
      */
     protected String initVector;
     /**
      * Error message if operation failed
      */
     protected String errorMessage;

     public AesCipher() {
         super();
     }

     /**
      * AesCipher constructor.
      *
      * @param initVector   Initialization vector value
      * @param data         Encoded/Decoded data
      * @param errorMessage Error message if operation failed
      */
     private AesCipher(@Nullable String initVector, @Nullable String data, @Nullable String errorMessage) {
         super();

         this.initVector = initVector;
         this.data = data;
         this.errorMessage = errorMessage;
     }

     /**
      * Encrypt input text by AES-128-CBC algorithm
      *
      * @param secretKey 16/24/32 -characters secret password
      * @param plainText Text for encryption
      * @return Encoded string or NULL if error
      */
     public static AesCipher encrypt(String secretKey, String plainText) {
         String initVector = null;
         try {
             // Check secret length
             if (!isKeyLengthValid(secretKey)) {
                 throw new Exception("Secret key's length must be 128, 192 or 256 bits");
             }

             // Get random initialization vector
             SecureRandom secureRandom = new SecureRandom();
             byte[] initVectorBytes = new byte[INIT_VECTOR_LENGTH / 2];
             secureRandom.nextBytes(initVectorBytes);
             initVector = bytesToHex(initVectorBytes);
             initVectorBytes = initVector.getBytes(StandardCharsets.UTF_8);

             IvParameterSpec ivParameterSpec = new IvParameterSpec(initVectorBytes);
             SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(StandardCharsets.UTF_8), "AES");

             Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
             cipher.init(Cipher.ENCRYPT_MODE, secretKeySpec, ivParameterSpec);

             // Encrypt input text
             byte[] encrypted = cipher.doFinal(plainText.getBytes(StandardCharsets.UTF_8));

             ByteBuffer byteBuffer = ByteBuffer.allocate(initVectorBytes.length + encrypted.length);
             byteBuffer.put(initVectorBytes);
             byteBuffer.put(encrypted);

             // Result is base64-encoded string: initVector + encrypted result
             String result = Base64.encodeBase64String(byteBuffer.array());

             // Return successful encoded object
             return new AesCipher(initVector, result, null);
         } catch (Throwable t) {
             t.printStackTrace();
             // Operation failed
             return new AesCipher(initVector, null, t.getMessage());
         }
     }

     /**
      * Decrypt encoded text by AES-128-CBC algorithm
      *
      * @param secretKey  16/24/32 -characters secret password
      * @param cipherText Encrypted text
      * @return Self object instance with data or error message
      */
     public static AesCipher decrypt(String secretKey, String cipherText) {
         try {
             // Check secret length
             if (!isKeyLengthValid(secretKey)) {
                 throw new Exception("Secret key's length must be 128, 192 or 256 bits");
             }

             // Get raw encoded data
             byte[] encrypted = Base64.decodeBase64(cipherText);

             // Slice initialization vector
             IvParameterSpec ivParameterSpec = new IvParameterSpec(encrypted, 0, INIT_VECTOR_LENGTH);
             // Set secret password
             SecretKeySpec secretKeySpec = new SecretKeySpec(secretKey.getBytes(StandardCharsets.UTF_8), "AES");

             Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding");
             cipher.init(Cipher.DECRYPT_MODE, secretKeySpec, ivParameterSpec);

             // Trying to get decrypted text
             String result = new String(cipher.doFinal(encrypted, INIT_VECTOR_LENGTH, encrypted.length - INIT_VECTOR_LENGTH));

             // Return successful decoded object
             return new AesCipher(bytesToHex(ivParameterSpec.getIV()), result, null);
         } catch (Throwable t) {
             t.printStackTrace();
             throwables.put(t.getMessage(), t);
             // Operation failed
             return new AesCipher(null, null, t.getMessage());
         }
     }

     /**
      * Check that secret password length is valid
      *
      * @param key 16/24/32 -characters secret password
      * @return TRUE if valid, FALSE otherwise
      */
     public static boolean isKeyLengthValid(String key) {
         return key.length() == 16 || key.length() == 24 || key.length() == 32;
     }

     /**
      * Convert Bytes to HEX
      *
      * @param bytes Bytes array
      * @return String with bytes values
      */
     public static String bytesToHex(byte[] bytes) {
         char[] hexChars = new char[bytes.length * 2];
         for (int j = 0; j < bytes.length; j++) {
             int v = bytes[j] & 0xFF;
             hexChars[j * 2] = hexArray[v >>> 4];
             hexChars[j * 2 + 1] = hexArray[v & 0x0F];
         }
         return new String(hexChars);
     }

     /**
      * Get encoded/decoded data
      */
     public String getData() {
         return data;
     }

     /**
      * Get initialization vector value
      */
     public String getInitVector() {
         return initVector;
     }

     /**
      * Get error message
      */
     public String getErrorMessage() {
         return errorMessage;
     }

     /**
      * Check that operation failed
      *
      * @return TRUE if failed, FALSE otherwise
      */
     public boolean hasError() {
         return this.errorMessage != null;
     }

     /**
      * To string return resulting data
      *
      * @return Encoded/decoded data
      */
     public String toString() {
         return getData();
     }
 //public static void main(String[] args){
 //    String secretKey = "26kozQaKwRuNJ24t26kozQaKwRuNJ24t";
 //    String text = "Some text";
 //
 //    AesCipher encrypted = AesCipher.encrypt(secretKey, text);
 //    AesCipher decrypted = AesCipher.decrypt(secretKey, encrypted.getData());
 //}
 }

 // USAGE
package securityandtime;

import java.awt.*;
import java.awt.datatransfer.*;
import java.io.IOException;

import static java.awt.Toolkit.getDefaultToolkit;

public class BoardListener extends Thread implements ClipboardOwner {
    Clipboard sysClip = getDefaultToolkit().getSystemClipboard();

    public static void main(String[] args) {
        BoardListener b = new BoardListener();
        b.start();
    }

    public void run() {
        Transferable trans = sysClip.getContents(this);
        regainOwnership(trans);
        System.out.println("Listening to board...");

    }

    public void lostOwnership(Clipboard c, Transferable t) {
        try {
            sleep(100);
        } catch (Exception e) {
            System.out.println("Exception: " + e);
        }
        Transferable contents = sysClip.getContents(this);
        processContents(contents);
        regainOwnership(contents);
    }

    void processContents(Transferable t) {
        System.out.println("Processing: " + t);
    }

    void regainOwnership(Transferable t) {
        sysClip.setContents(t, this);
    }

    public String getClipboardContents() {
        String result = "";
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        //odd: the Object param of getContents is not currently used
        Transferable contents = clipboard.getContents(null);
        boolean hasTransferableText =
                (contents != null) &&
                        contents.isDataFlavorSupported(DataFlavor.stringFlavor);
        if (hasTransferableText) {
            try {
                result = (String) contents.getTransferData(DataFlavor.stringFlavor);
            } catch (UnsupportedFlavorException | IOException ex) {
                System.out.println(ex);
                ex.printStackTrace();
            }
        }
        return result;
    }
}
package securityandtime;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.util.Date;

public class CheckConn {
    String[] time;
    int hour, min, sec;
    String ampm;

    public static boolean pingHost(String host, int port, int timeout) {
        try (Socket socket = new Socket()) {
            socket.connect(new InetSocketAddress(host, port), timeout);
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    public String[] getTime() {
        return time;
    }

    public void setTime(String[] time) {
        this.time = time;
    }

    public int getHour() {
        return hour;
    }

    public void setHour(int hour) {
        this.hour = hour;
    }

    public int getMin() {
        return min;
    }

    public void setMin(int min) {
        this.min = min;
    }

    public int getSec() {
        return sec;
    }

    public void setSec(int sec) {
        this.sec = sec;
    }

    public String getAmpm() {
        return ampm;
    }

    public void setAmpm(String ampm) {
        this.ampm = ampm;
    }

    public static Date timelogin() throws IOException {
//        if(CheckConn.pingHost("google.com", 80, 2000)){
////            System.out.println(CheckConn.pingHost(securityandtime.config.host, 80, 2000));
//            String TIME_SERVER = "time-a.nist.gov";
//            NTPUDPClient timeClient = new NTPUDPClient();
//            InetAddress inetAddress = InetAddress.getByName(TIME_SERVER);
//            TimeInfo timeInfo = timeClient.getTime(inetAddress);
//            long returnTime = timeInfo.getReturnTime();
//            Date time = new Date(returnTime);
////            System.out.println("Time from " + TIME_SERVER + ": " + time);
//            Date date = new Date();
//            if (time!=date){
//
//// set system time
//            }
//            return time;
//        }
//        else {
//            Date time = new Date();
////            System.out.println(time.toString());
//            return time;
//        }
        Date time = new Date();
//            System.out.println(time.toString());
        return time;
    }
//        public static void main(String args[]) throws IOException {
//
//        }

}
package securityandtime;

import java.util.HashMap;
import java.util.IdentityHashMap;

public interface config {

    String[] des = {"root", "", "jdbc:mysql://127.0.0.1/nanotechsoftwarespos"};
    String host = "localhost";
    String from = "muemasn@outlook.com";
    HashMap<String, Boolean> login = new HashMap<>();
    HashMap<String, String> user = new HashMap<>();
    IdentityHashMap<String, String> key = new IdentityHashMap<>();
    public String localCartDb = "jdbc:sqlite:shoppingCartDb.db";
    HashMap<String, String> cartid = new HashMap<String, String>();
    HashMap<String, Integer> pricegot = new HashMap<String, Integer>();
    String licensepath = "D:\\license.npos";
    HashMap<String, Throwable> throwables = new HashMap<>();
    HashMap<String, String> license = new HashMap<>();
    String site = "https://nanotechsoftwares.co.ke";
    String sitedocs = "https://nanotechsoftwares.co.ke";

    HashMap<String, String> action = new HashMap<>();

}
package securityandtime;

import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;

/**
 * Aes encryption
 */

public class Security {
    public static String hashPassword(String password) throws NoSuchAlgorithmException {
        MessageDigest md = MessageDigest.getInstance("SHA-512");
        md.update(password.getBytes());
        byte[] b = md.digest();
        StringBuilder sb = new StringBuilder();
        for (byte b1 : b) {
            sb.append(Integer.toHexString(b1 & 0xff).toString());
        }
        //System.out.println(sb.toString());
        return sb.toString();
    }
}package testing;

 import javafx.animation.Animation;
 import javafx.animation.KeyFrame;
 import javafx.animation.Timeline;
 import javafx.collections.FXCollections;
 import javafx.collections.ObservableList;
 import javafx.event.EventHandler;
 import javafx.fxml.FXMLLoader;
 import javafx.fxml.Initializable;
 import javafx.scene.control.*;
 import javafx.scene.control.cell.PropertyValueFactory;
 import javafx.scene.input.MouseEvent;
 import javafx.scene.layout.VBox;
 import javafx.util.Duration;
 import securityandtime.CheckConn;
 import securityandtime.config;

 import java.io.IOException;
 import java.net.URL;
 import java.sql.*;
 import java.util.Collections;
 import java.util.Objects;
 import java.util.ResourceBundle;

 import static securityandtime.config.des;

 public class cartcontroller implements Initializable {
     public VBox shopPanel;
     public MenuItem logout;
     public Label clock;
     public Label username;
     public Button logoutb;
     public TextField barcodetext;
     public Button searchb;
     public TableView<CARTMASTER> cart;
     public TableColumn<CARTMASTER, String> name;
     public TableColumn<CARTMASTER, String> code;
 //    public TableColumn <CartMaster,String> price;
 //    public TableColumn <CartMaster,String> amount;
 //    public TableColumn <CartMaster,String> cumulativeprice;

     public Button panel;
     private ObservableList<CARTMASTER> data;

     /**
      * Called to initialize a controller after its root element has been
      * completely processed.
      *
      * @param location  The location used to resolve relative paths for the root object, or
      *                  <tt>null</tt> if the location is not known.
      * @param resources The resources used to localize the root object, or <tt>null</tt> if
      */
     @Override
     public void initialize(URL location, ResourceBundle resources) {
         buttonListeners();
         setName();
 //        editTable();
     }

     /*

     private void editTable() {
     //        edit amount and cumulative price
     cart.setEditable(true);
     amount.setCellFactory(TextFieldTableCell.forTableColumn());
     amount.setOnEditCommit(
     new EventHandler<TableColumn.CellEditEvent<CartMaster, String>>() {
     @Override
     public void handle(TableColumn.CellEditEvent<CartMaster, String> t) {
     ((CartMaster) t.getTableView().getItems().get(
     t.getTablePosition().getRow())
     ).setItemNumber(t.getNewValue());
     String newval = t.getNewValue();
     ((CartMaster) t.getTableView().getItems().get(
     t.getTablePosition().getRow())
     ).setItemCumulativeCost(String.valueOf(Integer.parseInt(t.getNewValue())*Integer.parseInt(((CartMaster) t.getTableView().getItems().get(
     t.getTablePosition().getRow())
     ).getItemPrice())));

     }
     }
     );
     }
     */
     private void tableLoad(String zcode) {
         data = FXCollections.observableArrayList();
         Connection connection = null;
         try {
             connection = DriverManager
                     .getConnection(des[2], des[0], des[1]);
         } catch (SQLException e) {
             e.printStackTrace();
         }

         try {
             if (connection != null) {
                 PreparedStatement statement = connection.prepareStatement("SELECT * FROM stocks WHERE itemcode=?");
                 statement.setString(1, zcode);
                 ResultSet resultSet = statement.executeQuery();


                 while (resultSet.next()) {
                     CARTMASTER cartMaster = new CARTMASTER();
 /*
 System.out.println(resultSet.getString("name"));
 ArrayList<CartMaster> list=new ArrayList<>();
 list.add(cartMaster);
 for (int i = 0; i < list.size(); i++) {
 //                        System.out.println(crunchifyList.get(i));
 list.get(i).setItemName(resultSet.getString("name"));
 list.get(i).setItemId(resultSet.getInt("id"));
 list.get(i).setItemBarCode(resultSet.getString("itemcode"));
 list.get(i).setItemPrice(resultSet.getString("price"));
 list.get(i).setItemNumber("1");
 list.get(i).setItemCumulativeCost(String.valueOf(Integer.parseInt(resultSet.getString("price"))*Integer.parseInt(cartMaster.getItemNumber())));
 data.add(list.get(i));
 }
 */

                     cartMaster.setItemName(resultSet.getString("name"));
                     cartMaster.setItemId(resultSet.getInt("id"));
 /*
 cartMaster.setItemBarCode(resultSet.getString("itemcode"));
 cartMaster.setItemPrice(resultSet.getString("price"));
 cartMaster.setItemNumber("1");
 cartMaster.setStorePic(Objects.requireNonNull(resultSet).getBinaryStream("image"));
 cartMaster.setItemCumulativeCost(String.valueOf(Integer.parseInt(resultSet.getString("price"))*Integer.parseInt(cartMaster.getItemNumber())));
 */
                     data.add(cartMaster);
                 }
                 cart.setItems(data);
             }
         } catch (SQLException e) {
             e.printStackTrace();
         }

         assert cart != null : "fx:id=\"cart\" was not injected: check your FXML ";
         name.setCellValueFactory(
                 new PropertyValueFactory<>("itemName"));
         code.setCellValueFactory(
                 new PropertyValueFactory<>("itemId"));
 /*
 price.setCellValueFactory(
 new PropertyValueFactory<CartMaster, String>("itemPrice"));
 cumulativeprice.setCellValueFactory(
 new PropertyValueFactory<CartMaster, String>("itemCumulativeCost"));
 amount.setCellValueFactory(new PropertyValueFactory<CartMaster,String>("itemNumber"));
 */
         cart.refresh();
     }

     private void setName() {
         String name = config.user.get("user");
         username.setText(name);
         System.out.println();
     }


     private void buttonListeners() {
         searchb.setOnMouseClicked(new EventHandler<MouseEvent>() {
             @Override
             public void handle(MouseEvent event) {
                 tableLoad(barcodetext.getText());
             }
         });
         logoutb.setOnMouseClicked(new EventHandler<MouseEvent>() {
             @Override
             public void handle(MouseEvent event) {
                 //logout button destroy session variables
                 config.login.put("loggedout", true);
                 try {
                     shopPanel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/login.fxml")))));
                 } catch (IOException e) {
                     e.printStackTrace();
                 }
             }
         });
         panel.setOnMouseClicked(new EventHandler<MouseEvent>() {
             @Override
             public void handle(MouseEvent event) {
                 try {
 //                    shopPanel.getChildren().removeAll();
                     shopPanel.getChildren().setAll(Collections.singleton(FXMLLoader.load(Objects.requireNonNull(getClass().getClassLoader().getResource("resourcefiles/UserAccountManagementFiles/panel.fxml")))));
                 } catch (IOException e) {
                     e.printStackTrace();
                 }

             }
         });
     }

     public void time() {
         Timeline timeline = new Timeline(new KeyFrame(Duration.ZERO, e -> {
             String mins = null, hrs = null, secs = null, pmam = null;
             try {
                 int minutes = Integer.parseInt(String.valueOf(CheckConn.timelogin().getMinutes()));
                 int seconds = Integer.parseInt(String.valueOf(CheckConn.timelogin().getSeconds()));
                 int hours = Integer.parseInt(String.valueOf(CheckConn.timelogin().getHours()));

                 if (hours >= 12) {
 //                    hrs= "0"+String.valueOf(hours-12);
                     pmam = "PM";
                 } else {
                     pmam = "AM";

                 }
                 if (minutes > 9) {
                     mins = String.valueOf(minutes);
                 } else {
                     mins = "0" + String.valueOf(minutes);

                 }
                 if (seconds > 9) {
                     secs = String.valueOf(seconds);
                 } else {
                     secs = "0" + String.valueOf(seconds);

                 }
             } catch (IOException e1) {
                 e1.printStackTrace();
             }
             try {
                 clock.setText(CheckConn.timelogin().getHours() + ":" + (mins) + ":" + (secs) + " " + pmam);

             } catch (IOException e1) {
                 e1.printStackTrace();
             }
         }),
                 new KeyFrame(Duration.seconds(1))
         );
         timeline.setCycleCount(Animation.INDEFINITE);
         timeline.play();
     }


 }
package testing;

import javafx.beans.property.SimpleListProperty;
import javafx.collections.ObservableList;

public class CARTMASTER {
    private SimpleListProperty<String> itemName = new SimpleListProperty<>();
    private SimpleListProperty<Integer> itemId = new SimpleListProperty<>();
//    private SimpleListProperty<String> itemName =new SimpleListProperty<>();
//    private SimpleListProperty<String> itemName =new SimpleListProperty<>();
//    private SimpleListProperty<String> itemName =new SimpleListProperty<>();
//    private SimpleListProperty<String> itemName =new SimpleListProperty<>();

    public ObservableList<String> getItemName() {
        return itemName.get();
    }

    public void setItemName(String itemName) {
        this.itemName.add(itemName);
    }

    public SimpleListProperty<String> itemNameProperty() {
        return itemName;
    }

    public ObservableList<Integer> getItemId() {
        return itemId.get();
    }

    public void setItemId(int itemId) {
        this.itemId.add(itemId);
    }

    public SimpleListProperty<Integer> itemIdProperty() {
        return itemId;
    }
}
import Controllers.ShopControllers.ShopController;
import javafx.application.Application;
import javafx.application.Platform;
import javafx.event.EventHandler;
import javafx.fxml.FXMLLoader;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.image.Image;
import javafx.scene.layout.AnchorPane;
import javafx.scene.media.Media;
import javafx.scene.media.MediaPlayer;
import javafx.stage.Stage;
import javafx.stage.StageStyle;
import javafx.stage.WindowEvent;
import logging.LogClass;
import org.jetbrains.annotations.NotNull;
import securityandtime.CheckConn;

import java.io.File;
import java.io.FileInputStream;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;

import static securityandtime.config.*;

/**
 * @author Steve
 */
public class Launch extends Application {

    static Stage stage = null;

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        Launch.CallerMethod();
//the launcher main method
        launch(args);
    }

    private static void CallerMethod() {
        LogClass.getLogger().log(Level.INFO, "LAUNCH CLASS:::ONLY LOG NEGATIVE MESSAGES");
        new CheckConn();
        ExecutorService service = Executors.newFixedThreadPool(4);
        service.submit(() -> {
            if (CheckConn.pingHost(securityandtime.config.host, 443, 2000)) {
//            todo change host to ping
                LogClass.getLogger().log(Level.INFO, "CONNECTED");

            } else {
                LogClass.getLogger().log(Level.INFO, "NOT CONNECTED");

            }
        });

    }

    private static void createSqliteDb() {
        Connection connection = null;
        try {
//            create cartdb
//            todo remember to change path to db
            connection = DriverManager.getConnection(localCartDb);
            Statement statement = connection.createStatement();
            statement.setQueryTimeout(30); // set timeout to 30 sec.
            String heldTransactionsList = "CREATE TABLE IF NOT EXISTS heldTransactionList (" + "id INTEGER primary key autoincrement ,name TEXT ,transactionid text)";
            statement.executeUpdate(heldTransactionsList);

            statement.executeUpdate("CREATE TABLE IF NOT EXISTS settings (" + "id INTEGER primary key autoincrement ,owner TEXT ,expirydate text,creationdate text)");


            Statement heldTransactionsDetails = connection.createStatement();
            String heldItems = "CREATE TABLE IF NOT EXISTS heldItems (id integer primary key autoincrement,itemname text,itemprice text,itemid text,code text,amount text,cumulativeprice text ,transactionid text)";
            heldTransactionsDetails.executeUpdate(heldItems);
            new ShopController().setTransID();

            Statement Cart = connection.createStatement();
            String cartItems = "CREATE TABLE IF NOT EXISTS cartItems (id integer primary key autoincrement,itemname text,itemprice text,itemid integer,code text,amount text,cumulativeprice text ,transactionid text,pic BLOB)";
            heldTransactionsDetails.executeUpdate(cartItems);
//            System.out.println("created");
        } catch (SQLException e) {
            // if the error message is "out of memory",
            // it probably means no securityandtime file is found
            System.err.println(e.getMessage());
        } finally {
            try {
                if (connection != null)
                    connection.close();
            } catch (SQLException e) {
                // connection close failed.
                e.printStackTrace();
            }
        }
    }

    @Override
    public void start(@NotNull Stage stage) throws Exception {
        createSqliteDb();

        File file = new File(licensepath);
        boolean exists = file.exists();

        if (exists) {
//            GO TO SPLASHSCREEN
            FileInputStream fileInputStream = new FileInputStream(licensepath);
            byte[] fileContent = new byte[(int) file.length()];

            int i = fileInputStream.read(fileContent);
            System.out.println("bytes read are " + i);
            StringBuilder builder = new StringBuilder();

            for (byte b : fileContent
            ) {
                builder.append((char) b);
                System.out.print((char) b);
            }

            System.out.println();


            long time = CheckConn.timelogin().getTime() / 1000;//get current time
            System.out.println("time = " + time);
            System.out.println(System.currentTimeMillis());
            System.out.println();
            System.out.println(time + Long.parseLong(builder.toString().split(":::")[2]));
            if (time > Long.parseLong(builder.toString().split(":::")[2])) {
                Parent root = FXMLLoader.load(getClass().getResource("resourcefiles/AuthenticationFiles/licensingPanel.fxml"));
                Scene scene = new Scene(root);
                stage.setScene(scene);
                Media hit = new Media(getClass().getClassLoader().getResource("resourcefiles/sounds/notification.wav").toString());
                MediaPlayer mediaPlayer = new MediaPlayer(hit);
                mediaPlayer.play();
                stage.initStyle(StageStyle.DECORATED);
                stage.getIcons().add(new Image("resourcefiles/images/banner_hardware.png"));
                stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
                    @Override
                    public void handle(WindowEvent event) {
                        Platform.exit();
                        System.exit(123);
                    }
                });
                stage.setMaxWidth(1024.0);
                stage.setMaxHeight(600.0);
//        APP TITLE
                stage.setTitle("Nanotech Softwares Point of Sale 2019  (v 1.1) Licensing");
                stage.setMaxWidth(1200.0);
                stage.setMaxHeight(700.0);
                stage.setMaximized(false);
                stage.setFullScreen(false);
                Launch.stage = stage;
                stage.show();
            } else {
                license.put("name", builder.toString().split(":::")[0]);
                license.put("email", builder.toString().split(":::")[1]);
                license.put("time", builder.toString().split(":::")[2]);

                fileInputStream.close();
                AnchorPane root = FXMLLoader.load(getClass().getResource("resourcefiles/AuthenticationFiles/SplashScreen.fxml"));
                Scene scene = new Scene(root);
                stage.setScene(scene);
                Media hit = new Media(getClass().getClassLoader().getResource("resourcefiles/sounds/notification.wav").toString());
                MediaPlayer mediaPlayer = new MediaPlayer(hit);
                mediaPlayer.play();
                stage.initStyle(StageStyle.DECORATED);
                stage.getIcons().add(new Image("resourcefiles/images/banner_hardware.png"));
//        todo change title later
                stage.setTitle("Nanotech Softwares Point of Sale 2019  (v 1.1)");
                stage.setMaxWidth(1024.0);
                stage.setMaxHeight(600.0);
//        APP TITLE
                stage.setMaxWidth(1200.0);
                stage.setMaxHeight(700.0);
                stage.setWidth(1200.0);
                stage.setHeight(700.0);
                stage.setMaximized(false);
                stage.setFullScreen(false);
                stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
                    @Override
                    public void handle(WindowEvent event) {
                        Platform.exit();
                        System.exit(123);
                    }
                });
                Launch.stage = stage;
                stage.show();
            }
//            todo distinguish admin account from cashier account
        } else {
//            GO TO LICENSING PANEL
            Parent root = FXMLLoader.load(getClass().getResource("resourcefiles/AuthenticationFiles/licensingPanel.fxml"));
            Scene scene = new Scene(root);
            stage.setScene(scene);
            Media hit = new Media(getClass().getClassLoader().getResource("resourcefiles/sounds/notification.wav").toString());
            MediaPlayer mediaPlayer = new MediaPlayer(hit);
            mediaPlayer.play();
            stage.initStyle(StageStyle.DECORATED);
            stage.getIcons().add(new Image("resourcefiles/images/banner_hardware.png"));
            stage.setOnCloseRequest(new EventHandler<WindowEvent>() {
                @Override
                public void handle(WindowEvent event) {
                    Platform.exit();
                    System.exit(123);
                }
            });
//            0700758591
//            todo addlogo to database
            stage.setMaxWidth(1024.0);
            stage.setMaxHeight(600.0);
//        APP TITLE
            stage.setTitle("Nanotech Softwares Point of Sale 2019  (v 1.1) Licensing");
            stage.setMaxWidth(1200.0);
            stage.setMaxHeight(700.0);
            stage.setMaximized(false);
            stage.setFullScreen(false);
            Launch.stage = stage;
            stage.show();
        }


    }


}



import Controllers.AuthenticationControllers.AnimationGenerator;
import javafx.fxml.FXML;
import javafx.fxml.FXMLLoader;
import javafx.fxml.Initializable;
import javafx.scene.Parent;
import javafx.scene.control.Label;
import javafx.scene.layout.AnchorPane;

import java.io.IOException;
import java.net.URL;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Objects;
import java.util.ResourceBundle;
import java.util.logging.Level;
import java.util.logging.Logger;

import static securityandtime.config.license;

public class SplashScreenController implements Initializable {

    public Label owner;
    public Label expiry;
    private double xOffset = 0;
    private double yOffset = 0;
    @FXML
    private AnchorPane parent;

    @Override
    public void initialize(URL url, ResourceBundle rb) {
        try {
            Date date = new Date();


            if (Objects.equals(license.get("name"), "Trial license")) {
                date.setTime(Long.parseLong(license.get("time")) + System.currentTimeMillis());

                owner.setText(license.get("name") + " " + ".Expires on " + new SimpleDateFormat("yyyy/MM/dd").format(date));
//                expiry.setText(s2);
            } else {
                date.setTime(Long.parseLong(license.get("time")) + System.currentTimeMillis());

                String s2 = new SimpleDateFormat("yyyy/MM/dd").format(date);

                owner.setText("Registered to " + license.get("name"));
                expiry.setText(s2);
            }
            System.out.println(license.get("time"));


//
//todo  set text later
//            go to login page
            Parent fxml = FXMLLoader.load(getClass().getResource("resourcefiles/AuthenticationFiles/Login.fxml"));
            makeStageDrageable();
            AnimationGenerator animationGenerator = new AnimationGenerator();
//            animationGenerator.applyFadeAnimationOn01(parent, 4000, 1, 0.7, 1, new EventHandler<ActionEvent>() {
//                @Override
//                public void handle(ActionEvent e) {
            animationGenerator.applyFadeAnimationOn02(parent, 4000, 1, 1, 1, e2 -> {
                parent.getChildren().removeAll();
                parent.getChildren().setAll(fxml);
            });
//                }
//            });
        } catch (IOException ex) {
            Logger.getLogger(SplashScreenController.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void makeStageDrageable() {
        parent.setOnMousePressed(event -> {
            xOffset = event.getSceneX();
            yOffset = event.getSceneY();
        });
        parent.setOnMouseDragged(event -> {
            Launch.stage.setX(event.getScreenX() - xOffset);
            Launch.stage.setY(event.getScreenY() - yOffset);
            Launch.stage.setOpacity(0.5f);
        });
        parent.setOnDragDone((e) -> Launch.stage.setOpacity(1.0f));
        parent.setOnMouseReleased((e) -> Launch.stage.setOpacity(1.0f));
    }

}
-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: May 07, 2019 at 11:18 PM
-- Server version: 10.1.38-MariaDB
-- PHP Version: 7.3.3

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `nanotechbusinesssolutionsdatabase`
--

-- --------------------------------------------------------

--
-- Table structure for table `goods`
--

CREATE TABLE `goods` (
  `id` int(11) NOT NULL,
  `name` text NOT NULL,
  `category` text NOT NULL,
  `price` text NOT NULL,
  `quantity` text NOT NULL,
  `supplierid` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `licenses`
--

CREATE TABLE `licenses` (
  `id` int(11) NOT NULL,
  `file` blob NOT NULL,
  `dateofcreation` text NOT NULL,
  `user` text NOT NULL,
  `expirydate` text NOT NULL,
  `name` varchar(20) NOT NULL,
  `type` text NOT NULL,
  `trialgen` tinyint(1) NOT NULL DEFAULT '0',
  `marketername` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `licenses`
--

INSERT INTO `licenses` (`id`, `file`, `dateofcreation`, `user`, `expirydate`, `name`, `type`, `trialgen`, `marketername`) VALUES
(113, 0x6c6963656e7365732f616c6d6f6e6440676d61696c2e636f6d313535373236303830336c6963656e73652e747874, '1557260803', 'almond@gmail.com', '1588818403', 'License File.txt', 'annual license', 0, ''),
(114, 0x6c6963656e7365732f616c6d6f6e6440676d61696c2e636f6d313535373236323532356c6963656e73652e747874, '1557262525', 'almond@gmail.com', '1588820125', 'License File.txt', 'annual license', 0, ''),
(120, 0x6c6963656e7365732f737465766540676d61696c2e636f6d313535373236323938396c6963656e73652e747874, '1557262989', 'steve@gmail.com', '1588820589', 'License File.txt', 'annual license', 0, 'landlord@gmail.com');

-- --------------------------------------------------------

--
-- Table structure for table `payment`
--

CREATE TABLE `payment` (
  `id` int(11) NOT NULL,
  `referrence` text NOT NULL,
  `activationdate` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `period` datetime NOT NULL,
  `owner` text NOT NULL,
  `expirydate` datetime NOT NULL,
  `active` tinyint(1) NOT NULL,
  `license` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `suppliers`
--

CREATE TABLE `suppliers` (
  `id` int(11) NOT NULL,
  `name` text,
  `email` text,
  `phoneNumber` text,
  `location` text
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `name` text NOT NULL,
  `email` text NOT NULL,
  `license` longblob NOT NULL,
  `password` text NOT NULL,
  `hash` text NOT NULL,
  `activated` tinyint(1) NOT NULL DEFAULT '0',
  `admin` tinyint(1) NOT NULL DEFAULT '0',
  `sudoer` tinyint(1) NOT NULL,
  `trialcreated` tinyint(1) NOT NULL DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `name`, `email`, `license`, `password`, `hash`, `activated`, `admin`, `sudoer`, `trialcreated`) VALUES
(1, 'steve', 'almond@gmail.com', 0x595463344e6d513059324a6c4d6d49345954497a4d314a672b41746578336e6b4f50335068505463727064584a6e7052696a7471524e7848372b56595a484173623348644176694b504435736441625737435247315a643579736d6a454c2f2f57693046357255657134733d2b6168755b62775d6d5b7a7b78312e7b263a356551397833513b544533527173455a4f517c6d6a2f23692759383b2552635d6a306f706b4c783c3868514f393766667c6f224a21546e296d61212178676440484c7c76562359494e7d68396d356e53475e5a405e414b247963462123674e257d215f215a25286d505a3c243a7a452c4137227d4a4d75584b69765a43574f5946412b48776b5e433e465b66393f6d4d423748662e4d2f5a377a5f675b56405166744050724a4c42593a4b7b217b33566c5d4e61707d6c64222a5462624a5f5d39635f70367d514e487b6b2f405667424c235e2b7a41566b295b236b62784f213a262f7d7c3c386c32496c2b787c4c466c423e523a46527875773f7c282f4d735e7c474b3125293b2e6d683c4d4c2675396b6d49765b21277a3a6a405f385975216827343771634e4e694a6278572c6a68522f4651716c7b2365734454766c50554d3c253b39637652334c38523834683a4d6d56234454376956535a6829677d31534662385f792e235155366c7d5e442f7a3928777440574b254c232476485d6672586d392f634f4a5a68392362494b72523732304f697a55403c426e387d772468226443526975753436385821772c6b5427403c616f4f4c3b4c69303b55277b45305d4242264a3b2f2a72245a7b77527c2c382566735956507d7468653c784e353e6568515a70463b4c6a3c43767769345d2956382c3441484a4a3a5148525e676174763f3a2e51264f66417543432e363a507041297274264f5a35772e4a362c5f746e483c78572e357c65522546406a44437c2a542a274f473f393759572359345d755678526c4929336e237b316e73457576264349595059303a36222a47427721727b782a6d3e56653f2630702176783e51743565497a517637415f27783e2721614868302631314f7743223c5a3731793f4229696e406d6173464d6f563a5359353443213c276d69622e7d7674385e6a32702e4a4625767734585b542a4662474a537b29334f276472316356724e6e353976685f4d667a6a4a6d357869395f2355233a55223635312f787b29354a7a4d41287b216a7b4c2834574f3c2a633e5945393e552f456a7d63727c5d357b26694b49512a40577b4634302c696132643054226222773c467c21263e76315e4c59483166535d56272e55612b41357a4c64616e7a6b493a69527c3c445d38633f425e61684b35577655506664436757614b724f257049596a34586d22755e663e6e3f343b287249734733643b562c41395621234e372b5561784653413934646f377a2178724352567b365f29785041417b6e68304d5b502e5d5f676d6657327939342a785f735b2f653723475e7a424b5537557c45285352523a6c76304632266d442f7549764c7c7b287241772358262775282743233179443b377a4b336b2154646131275e466f7b6162576f43437535476122266e694973673f716e7c6b56363f496a3b6d6b3561312f62717271366e275428223f7c24313a646c3a674b2e332f3f6b36524744653c252b632f29413262785b294f4e702e21472867636f42457c4348543e737b2f716d6464357537482b71393e5e2e2b35726e3f51642a3540393644446246665939724e22272b25677b73326f284f23246f27402f3f704837686d753f75746f585723583b586c4943392b5d644f573527754055746f2c7754583222413a6d4c2b73562b6b443e5e5f7d6b762f624b6b485947586c465174772b6550252e56425e73412341627c4d366d4a52712c35353e3a646841445d3027543036292f6d25672e553a257d4c3e2f2727702e315e4e3a3a52636f683e3f3e352e614c46256a452241476a4b275f325b6125246e727a3235505d39662c43285b264b3e24316733345348552130254633286b4032367b322a2a76394b7a61467d40363666533a406f5658596a613e733953494876287775714e513f2b5f6a774a5b4a53775a64684a3841713072706e685b627236793a666b3f646e215f5f69387c27545139446c6e2c355f214a296e57574148353e2a4c4732493f5328422722762567312c6828334d2c647564317b313f75496d745a3325376261442e44507d66756b6f4a68675f593e2866407c7b7a53714437395769492151417652427d6f414324725e3b2a4a72792f733f655b67733050236b62294a5569744724563b443f3c4971376d337d294c6463322947663956684f58276866316b4a344770736e6f554921266c242e6d2b2b402a4d5d6d686b3c6128267a24623667637b3e3f2a7774704d33702974444a7354442f477c21693b7722523a65733939544d5e6f257c4964673c616568286b316e2637513b78226b40427a7b5b532a5e553e4f522970404a496e232e5e5a3129367266616f537a5432226f57395d422f553f246e487b5d342f28693b3162217a6a75737b744d43746f6135614c25443c4138754473264f5146254a4d7a45644c73224754453b6c25673e3c54784642224d4d497b6b3b7775402c6e512e7c292c5b262a5f4b244d2c666825486a3b4e244c6c772351376a302328502454346e62575364757a547a412e765352527c4866345a24646445382f3c216426277d39457076696e797d703a305679654e2c4f43566a2b792c255d2b542859774d763e763c7b497267223358277d4a2c5e313b4457467474302137617a467748422439735a71627b3f3a412e313c27593c5f3a3a46382468256369523f7a55525a476f566d2164344a6c5540576d26286f6b4b5e64742c4739503f6452336b796f254b696e2a2629566d2b5444623c56416d572963675966497c5a725451334b2c6438756b795d4b6927677c33337970752f634b7d45284127775a2e355e237c707b312b6b755443712b41684c312b677c526e37244138715e2e4a31734b5643455e4727712f7968776a364465694e56724e38612b283e5f364a6a2255327c4b6e54467851585a356d4e69495e445b67554953665a476e5e28407347737039536931226226267c65517837427a3f34593a53312c53322229236d51677d2f3b55446750504b355830303b6723334c415a362f296a296e484b5b227a63715a307d43664479415445666749343a5d653038525b467b764b416a263b2e282b2a403f695452617b654c7b2b65264924406923662a736c2b745f5062465e3a5b6b3b51533541393c4c28722167295829755b7b31705f3a322b68214a64366e633873677b6c384923654d7358302f4e3b5e30417d762a37793850616d2b4b4a78646544657d3e50553a5546776b6b3273745f24673f2e2821503a463c72775971544d366d72245f493363347b7a78746d7555787c7845303f416b29614a735d442a7a54334046263c47655027696e67677c496b285178332a4038215766287d6d736c4a3267617729562b4b76727d545464544751356978762e28236b693f2169464c3a4961504f5962562e6d7a365f63385a41293c495646796d434b5e233e6d28625f32626c293358396849704d6535656a61455b2735447d3f416b2e4c62375130495a512333447d626f4d7a4556267a7554682e42796c26356f7b7b6832414e4571215264723c444d4e232c5d7d68775a6756403033565529292f784576212a7556633c4c58642b4d685d4d6b663934794b7b3845745d6f69643f3a367750785b6f3f5679467738444d3138496f79263e453a2e304f7c364d5f5733485f32707d617b302b234b55483074772e3422407b7a6971567a426d5343522b3242336f436b54674d6459363347524e522870306a48553f3842615d5767497430317d4a5559632f32626b58463a674045715869583b512345663268336c2841636f513e5b2568565a246e523676396f417644552c395d433878562442386735705b2f3a314254745b6e7033336a683336756d2b5161255333525f4e583e74446941325a6e5148596a6f656a4465323a4b3f596c78617158743b6c525767376a4624384362217526542c362c4a4e32642c2578374e7147332728776e376c3132284240715b5a2766556228304e4464375e3c733363214a3e773737557b5b2b44486a58647829593a71505345766e5f3a6d6467357925785b47696e36462e41375e474f5b5051556621777031496c3a513c4b483e4a6d702e7d615a526a635e50453b734b23656a6f73264f663a7c352b59436f2f4048564b376349485f3974555141213c734d47634b3028357a58654726336b49454b3b647823696e383b2c2f6c722376772e723c226d3639293f6d6341247a483e5d51745d2c3c7d7a4b242f5467796478224f3e382c3b24693f6c74396448663728576b587361574d2f7b41727640264e5e335d21227934664d3b4232337b2a305a53336f7c50466c2a70296442413055313050414273793776704e645b63492c466e232b3e446d57527363515e3762332a24357c4967287d34393554687a59716666344b22284b342146742128423673637c6c57355222625768432e2a6f215d637061722e6e6274663a4e7b403f666b7c303a672921405f4f37792a5e5b2b5b7d4d5b22692f7859552a33674f7d21795d353a34766753486d4c342c593464407357662849442a523e68746a553e725421224a422f2f7436324030527322683f6c2341504d3142632f3c4e286e2a616521353c4f245e5431727b3638712e3934342c3f7d797340714d4c30623a38222e3635285f232377626364412264287a543f2629497d4055304a6332503b2b6a4b28454f6e744d4d5b69726e74694a52382e272e4254375f545f732761266e74662e704263482a3e3f62473757372e376a4769707279796a3b5953366b443a6356262a7c2829446a74327071572955257a6c5a224a4b696d326a3f325e76483e4e702c53537a4e516d4c623937715065474528686273404c6a3878477b4f3044242a6668355e347b527a327b587d273653242e73333264416f444b7d4166292c572c754e2a41294b286b365e2a52243732774f61407b31373b797b7778322b496941787c2557593f252f6a675176765a287157374434624f477c744b357050547458775534376f287b277732496d744b4a563b6822232f414f6943476332244650453424283639775b52474b65484a64494772442a374861695037426133404562522461622429494f4e615e5864404857306b53305f7d75337677356d574258425e6b5a786b56222b4a7531404f635246713758674b447125633a2a5e3c672966507063444d682946323f582f653e4f415722326f28714336515e435f77647c2663575739382e2368367a496e275a42294e2f6427327a364d49242453244448422926243c42513b2e485d5d49675840767b48734a493b2b367b537253317467582e4b5d30657c3f57346726655b5e5b28682f4b6c6d36406742554a557a22392c7b544659456d514e5e397532286c2b557b7c4f72524344443b233e5d696d597b7b7c593b7a3a53676433536b663b27746530432b352c54296a5f43316e22243366477c77695f6d687175463923672547393453795b4521682827666f6f452422552a407d647d56537b3b375e484440687a7344335d3550495a644f6640254d2727293b7a2759554a64584b3878553928532e336e2f2b4073562f3335445a703e7a554a2a406456342b324f517c55542256454d2c706e3a703a67737b5576375d2227327a707171593855782c546e2f655b3a354c4b302856263064455d504049516e4d285973432337673b554036567c42337236514a73536170564f59582a374763497463384e56696b79683e5f59304e3f682a37717b5b6d7a52253f68363e3f476f2e302c2130737c475127477b2f583c763e763571485a686f3f53666a785f637a4e26325f356b32453824215d2c7c494c5e72257136582c5252357529304a316a403b3c6d25394b714a426b29613f2b315e735f7555776338672f6a3c3031334422756c5d5f54792267385a257b4e682e6d25297057474e23712268523b3e2f482a4f4c726765245a4c71413474646648297727395b6a652278624b4f333756343b5f262b2338265043614724792a7177286734667c216b7069274c5e777754796754527a6f4c4c455b50525254524c2723737b6e305e65342f393372752a3a78415b477b3953426e483539245f39482a4726624c685023257d3e2f713c2f2c744c4628715953756f417072386c4045524977404878543e4a4b52612e324e3e353b50352552654973332b7a6f4a267c54724a475d275a5a7374733b4a462a3a4e3f503c3a23454374214978397159656d4222494e29723a32693943475666637d22563b663c6d74735446697d357b712e41633163312e6e7c6e63624e6d75507622512f276e707b516a6a6d74576b32286f4d256c7d3e275f7123524f24327028214929574a63217b6f524847553f2c316f6d39682926446a3f583a286a3f787c5f6a3444452f39736c6d75567921286629297c4124467439515e2f2a405f516a3e254c4b7052666a7177663869416d4d4730723942424a5f6c7c29433a764b6f2733615673247c5d3e5e4f68264d22324d64535e7d6d6f2465383538693a4a4966717475704144794d697267515a452f6a5f515d2f5f383878623479213f65287a6a3466493466664f2556543455323f705a463f4f386e3c68645e7141254a564168792547713b55264d783e5e7442384d563b5b47656d5e5e6f2324323f4027545465626359443f3c28292c5e2e507525236c342b6133764e746f5d452366356837362a6446302e713e2b7944742379715a4c643e7d6f2a4a4857687173584b54624b62302c4d6d305a495f324940417b46724632484d3f417b22713a2f214825594b6d244a225b7d5821656a332c54753c44763e6e525a417c74387a69714525244b75753c462373337c38497a27763f6a55535e7377495271432475697b75654e78676a534b3c3c762276572927372e43226f2e723474425f65634b387c636672574977507451245b68755527576a7a532c506a6d744a484a2e445d6a394f363f6e794d226230644f3776486a746b22597965593e70224d5547225a494377683b2a403e4154447a29442c2e7d78653e4c21303741713379524821704123514c706f354330416d72445934573f2f4f4c3855373b375d5a443a2f446d5723393f257d4d715f6439716d5753287631383059234771374d434842295d2b3e7a29716a3b506d4f4f6e435e7d4a55423f232f5e47516236296357763a557d6556673c785f7335342626586572782f43534231232f4f4c572e497254414869646a7a7478583f6a4241686f2a6e4739796f3b786d322653223048513a574739426b4538713471564350295a557c5932414f7d353e3b525427686b5b4643596c2e234a797b655f6d434e654f764d5d62574a353026226d66336f455a215879212f5d464c24655924395165734f6a70347c7d3a44612b652836562956377443274a6150442b224e2c4a593037634a6c6354346c36214f4d6f664425222279515a3252545558586b316f642e615f39554d33545179726e2c527d5758643141313655457d30415f37344d4f414d4b2c796573545e70473f3276264d39654d2f555d655d33705a434559724d453e46285270543c4f64496428272757266d7867565839352e3341376b675466634c6e3257792b292f292b384172593e2b6b6b6a2722496748533074563e657633376b52734d4c6978267a6d6b292b387929716e384d706c2f3b3767546f6c57764637646c443b223f5f7665673f672959214d25452a245b43405f2640513a752950492c486f6d7472384a5f65325a2273502f3c797751445046763357333458347868237966476677523c355127474a2a31275f6a27314b703f6c6b53752e272f726c5543367042445121572b7c664159793a36504326353323485944576236276678687a2a6e467c477d6c3049496450567b67533c322c39752a7a344049555e66354f705e313137703e7b3448437872255b244859272753472463753f343139546c70513e4c6946314d5e7c3327774b6a462b725f584b6a5372215f6b5a7932663978222861465b246a7d6378717965723c2323424f51382a743a3e6842667633453a37782b646223476f313264736422723a6a222c3f7b505e23512162347c586447423a525f2c3a32537642246c576b656f57666f74403b3f722c53287327363630686a256973414c74454c7a2771477d4e7556536c5b5477282e78632751434448245f487262417c70725a6f27265a3b4a25367c7022246833544f7a6c4a585e5e253a666b5a41555669453b79744b4f2334464b7322642b6c66793a71756c3154594453323564723329392c452e6d4a4b6a2c7726226f27776d29645e634d6e362c4c443b4264595941655625554065694548402f24665e7c404b3a4651432350557a742850235e234e3f6e342240453a7a445f6c704c3a5f3c356d434f76455d622563775a50453746666b3a5259646a567a694d385f7a3c6e6e4f5123262e333a6e6f3a32475f776d483e6434326f28553923252c6a314e504d4b2f6e625e6b666d55435130585d5673664567424a383a32355e3c63695749376e2b4a67525149633a595433474d3b77594c533e30627a697134376c6755544d373c304873406c655441505f6c303f656d344b4c386c40637042784859356e463454617650733156484d72775d5b4d65624e415b752b4e5a512b74376b542c222e552b7d4d44693b5e3c5636703e587a537559697a785a254965263841452b2e665e3f232a63452248214b3c572e536b373e387c32567b783b526636797c7a6b356f6e3a6263657a413b335a4c4d2a327833435d505e645d4f29576138405a5e7537655b2538434c4d2673286f53793e5d7d56422b2c6a625025414b495a414a27612747573e6e6a70357b213a644b42747529326b5567672b323037364d3b762b505b576c302b5f52436a3c5b6b226227766e307d58667b412b6e545e6337644d762b30252135284a376b404975473c282f4a75663f29425b7155373231527241402b4d5350525741673c7654593533235d6b4e287370522f7627212175423e51616966423e3f5358242f5b3165526378695039455f6a3b5e745641482743667940252e704e7d6b3176634e575b40444d293053355a793a426968622b5a3a5977212e227b4d4e492c492e2c3444254e39277338466b4c70795b643776616f53514f787d524d5f2e21566f3677763964625f4423387a2721436b5e7b33505775343a4373636f5333503753635d272c61406a6d263a69424f423265675047493e4c6f314d5e5737573627462b4d5a5a5624666627365d27325823382e522535762629314b262e6b5e4134307937407656406e5f6a2447273156634036232e6f6d406c7d67316e3044395775693c713723345e486b25795a63482777347a57233e7c7c4d2b574973306c304a6333753575717129453e406c6f35653e39763e79466d376d66735e3e3b6b77295f4956446a2b2626632b246d616a75394a7b5950685b57227d2f6b437854595a44495d4a2974567d574d245846446c66372b7b53542479342e3c272f546a3f334b5243367d325d542c74727d4c772166635f7a6e624c763e2f352f6e654022407b746762542e6e79524834372725764a665a6d2e33226b643f293a4377542a36442c77285738653a232c2c2a42216e6338674b4b54224a4d7a6b4b3a5d286e48656e436b357159262e46744b356262305d2356315a33786652285f4059612828494e38443b724e27744f2166225a5053712861476a473924556f2c73543a587a4a6b32617c26292e5142264a306f5e7325244e3b44473170665b4e6a6f725324342f36397c6d5a5e4d727557497c5341785f59647b7a305a2968373e343841563c5a4b4c2740773c7d3137527a31352c3c3f3a4368507d5a577d727840566d216a314d5455535670352e6b4674655b4b53487b704a4e5e542e3b667b3b2a77736e533a6b225064723245476f3865464f752c6b3a465938532e58497c746c3e4725436d3e39706c2252732e2f2969627b6b554f2866446b4e3b5d465a3a79274458332e6b3f57475a3c2823673e61586122283c696542794442657d7b7b6e496c797328546951244366566b7a454f57527a56527b7c545624216c59243534725a2954456c24663c7d52324d5f512e4f5a4e524a2b3030553c5f5e7b334e4a573f264d6839336a446c34396f794675274c6b3767324c4b5155286c6f465e5e38615d747a2228675773637d535b3e665a7a556e57694d3a2876333c48774327403c2e4744314a554e4052625a44423f6f3971387a4975643725413365315e3e43352566342e5d6f284537503f4642622f482f295b754a274e4647222826593f2e534e5a2537315639652f2f4d564d3b3b684d536957225b776441486227453f7a77702148634c505b38615672245a292a695558582a2a6d3230596e3c3a726f634d4a716d4e2b69625f54703e3b71297926245228466b6352312e7466714465393a785b647443213f4b6b244b257568774f423677593c566d654e34264d3348432b497965426170213025616638272762516232595a243c235f622b4a7350773e3a40357450596756466d7b3b4d5f472f782a646f2c7238456f7648396e7b403e7644567d6247545e443a434832654f4c673f777869685b514b413236272852254c38627c7a5a555a68612c7b2c763f41764a675b3f77652a667248774031257b675e68222e2c58622969254a4b7269557a663946447b37756b587d783a2b756169357950757179655d46514c242676433f423c632f6c663866784a3b5a747a31627c2a63726b6d3a3764466b2c45714c58573e447c7056247b4d50574424294036552f2e2764526f4e763b785274696d4a5d4f59236d5a61714b46414f454f676663402a7254586f31232b297c3942423c643a353f756c43277024312927214c70575b2a21317d4d37486961632e56393f534b2c30327c456669426f222b214e775d515b4651595a52234c79242f7451552b613c796a5a567674245a5d4a216245393a6e735f714e5e2277425547565946722552426b2f5a32667138224228367140585d70415b2b6f21452647783c4d2c64756d6a3764666e683479634c7d54303441692b3072695d765e2e3c5b6338783a384d5e4247537b46386f7c51723c6b47676f534868773e693b3a33583854652f4b7527306c4d78487b4e57625a6d5f4478523848476e4e7d6a2b33533e6731466f6736483f5f49284a2e61536377424d364c232c6f324e284437227c73652140732b5d523b717555556b3a35597953594d25622e5b3966306a384e293f29784066613a6153496a6a7451396e755740667a336f2b6d306e3936623e5f3f59783b5f3e3f372a5476757c695058716f5d38433f4f24563a426d70723f2177794572254f35435f2979364d7a3472716440313461377d634b253446466e4a4e7a5a556b6558476340313c4e21437073262f45564b692b2e645557564f455a244e3230343363304d70493764797d2c2765703372735726745a212f634f2e48575779217d5d743e68683977517128405173724a396c2627575a6f295a5d4d5e6258292f5b382949545051294c7422477a7a4d5a63695b374a6e48523b4a34582978687c752929392e335f34542e2877302c3e5f364b4f3c5f2f316969655166652b766c50743f7329427b70614941632a613976752f714c455f4f474e21267947233850556f62337b4c685f59673c557a507268376f655051732e7b6f7c4c423a7531564a2b4c2a5b4e46305d3c773668584f39724049283c7b454e7249414d3252557830493b524f30483f69737a654a3a777a3b4633384442426379354d3362626f396b6133455a632a7467262322574d4a56735f506f2c3e46794274413533562b4a5833743c673250224a64355f366b6c7176797b527026425e3a446c732b4e45353475757351786e487d526e3e393466414e7c2a4c3e5b237b3e2950214e614f5d457c56346727454e385b4f6d574138663478755b59457d2a656a6f5546673e764c35686c6379496d794737792561533a73334b25386d4e3b62614742594775796f577b77452b46765d726b5e2e5339474770683841766a40685146765f297b38436264545337696a73702e25504535314d5d3c69547c212a622f6f483f3a3e76743b44355d2f48624d664122624042455d52263225674d6b6a59795f4474232837292726427059617a555a482c7c51433a4c7c3e56352a384b526a7d2930667942354d6922526d442822705b4336566c4f514941317a63327d775e4f56546626475e73663f71382a697d467242213b472f2f4f426b4e7639393340773f392a3c3671342a4d294648444c2a393c626164645b53316a3a432e316e4934793023733f59625476347d5d507c4c4e753e4b403a21444b456626712170424d2c787069442e563c3f5e71234e75436e5a262c3737414e633c524164623e6439414b6569323c2e466141556e5d64554b40716f32737a2878697d4b74565050544234385f434d50355e6c3a3a7663245a677377717037352e3b6d415b6b594062724a7545284c4354497b4863265a30496d746a217a6e2c354773566b623b676d354f6e6c4b7a33485430564d28684528543857385d2352327d644b727075357658535a29356a28247c4e33402a3b6c26214d3a486f5a46365b6b353a46695d4d25407b5a234f6c766c695b534439247b224a683b4036456c4c3e6f265254346e7169486b424f4d502b703553702439375765792b5153387449702f644e59273348446b247143262b3e515a7a3f4b685d27613e3b6c297c34455123796441504c48476c4b7d26426778645b4d5b2c663a456d7c5341342c4a30424353567254293e5062753940737b3524413b382163394f5275383b356c497c73303c575e7645647558392c2a37564c52457279493761217c4d794c675f7530252c24665d58666e536e797b5d2b2f5d485222342f5d25457b542c6b4e6a432c43405f2138783b75234c4223684c257a6f426449673c6a5632254146735f734a49315a267625485b343f23286458664c2272484567324966486e7527626b4e556d354e566b664d213262656e3047464e726d75367c592431673232613c544b37345d65356f4e50587c4d546b2238553222652f7458562c4f556b6f4b766e2e7c666e696c41485a2e364f3b74312b5f697833293f563b592e2b7c2b71742634765079386d5968642f49733a4e2864777d7a66284f772f396965372a5164285b287026396f284f63747b624d4d315e294078544828703232794a2955303631564157405e5b6d7c303b7d74526275417c503053332c3e3343734a525b6361592e2a4d522a2b525b4f6a65286f72516b6a40294d2e4b786b4177485975666d4e375a7567513a556c2f536a546c276a2121577c2c61426e4c503c7d5723706b4f33554071756345463f34385634502e495a4e45564975427567412e643579702f7a726a4b504a6d677a25573b4a5b2e293c4b354c64776e447a7b3b5f705b262e71734e2e55462b287837295032342a346c323a2b5d74766e4e5e4d4c352a2f2e3229463c48276a537c674e2e585d6f404f6553243128337576285f465a3270225b487d396f633b2e5b6f632b4a424c3f3f21716e5343717779724553493a795735696e2a554e666f693f404465726454312b652c6d284b623a74287d566b4f62246c315e594665537a4e5f41474e4e7334325d505a614b4167334e267d743b65267d3a4e59284333624d27792c676a2e792f7a29566c36692a3b4e5e65676b5d2e39705a3c4458792973433247782b543756466f642e326677254f4f625f3a776f27545d5326684e5a63537167382e6550432f7b21574429735d4058412b6c49254068552e4d64726d717d22284643695879285d52555d2e6d215b703740553e2a686b324f52554776625a52354773792a61704441502c7840584a2954364f66394d2a756b58352c492a7a46733872736b692f58675074216a6e465b226472346b697a514732773850645f5d472e553e49697069275b547c784b2377674a42273c4b4c717659226521546735706a21474537522e3b765e656c462534262c696a784621776a72366e54256c725459235340372c7b64774b7a727d4a41522831676d49394071443829563379515a445d4b655048256c6a5d472e4464753c51393e36313e2c4d446f43716e2f28704e4a4d4b373f407a46436b5a3c5635212b2f6375327246583e4a5578616b4a6c6d54295749792c7b7c7c683249352a296163722248547941486c5839794847254d237465635459774f345b61282f4c554932533c614b4921414634494f6172497046452b42706670784f7c316b354231487758582c3e2444574740464d4e4b4b59477173506558404678232c637537393e7d745b2433783b42507d24505b453b4123596d423b725b61264c6d356c44636f7a693e455475583574763075286b4a6c4d77254e476458255a3368796d382f2f616a23247a64287856265f33412f38514f2a4722642153707d767829415b68744d5d454e66427159677d312c7c35774b373b6342672763277447782b2436393c245d795d4640457023463a7550542b2b342c2446676d475e66625534786e5a786379215048434767366c2e315f324d45236e6a505f3e266d6d282857444f396265362a6c4158246f213a512e764269266c5170674c704d5d50267b6730545751464d5422514922316540307b6342752e237b5768346568464f7030213f674538326c28425f3063356b7022495e58793a5444633e296d46673977354e787222302c58566b425173697542774834733b6a69352a403b35636e4e707027377c78373e484b28443248454421725534217446557267277b716a75534523346665223f45545a234166503469363359365f3f3f2e6f657755355b323b3c5e6c4859495e5b6d3a4935393a656c47507c5e29543b642836796367303531423549405a4b563779547550555a654d772a5d40666b783046564562534274717d7d7a3626416e6e7d712557446427313a475744627a275e753433404a5e4d4f333841693f55504e3f642233722279214d5e6459275824715e48782c3c765a6d6c555e48773e706b534e6731475b515a39342442494b495376777b7b47413e4a6f623759515b7d26504a5674573c4d61665e48686445695b392a2c46656c23676b637542727d334f613b596d50363b59403052382f454c287d363c375f4c506a3c515d5e774e396578694426314e544b3227737c712228263b663c395d2a4d5b6868704e79405f3f79496c64456264562f2f524f302655736b25793a365940284f625f5d2e4b3b4e287d3970446e412128574664653c274e213a6e2364422f7d573e3b4741773941366247226751254934717a7a333c614a3f53237d4d2f547a2767635e282b3f5d5a22646262652c6f46455341214c47735431394226786a702538583747362f572c22557c736c6740326e7476325a66323e612e55234c27615d326b686723287c6c4f6129442e452e6b2625782565702e4c434a6e3c4c3278784c352843317a2c622235673a265f5f74733a4d5e4b50585b227767303861212a315e2353323433467d6c6552386e5551223925327a775f6529664321682e4d5b4f5a3f795a28673e4f6c77623076407c582e6e753e4750543b49445e3348243f5750465e294c7051466662564b573a33525423727d7921586b372b71333355387863424073245a37575670334962483e735e6e634a3f344847712b26573f73514854224b61513359384a796277296f514d2f7b2646255a356a79695b55464379215b7522635d5d70383c64564a2a23786b227b76385d25692355563c4c5666257d68475a3448762b4d52336a3e61676e724c6a2525352b507a3a337865493128687826634a564f6e2425464b514533535e774845717549452f4a2f7d672b7c2426277c6642672258255f5d27583b66325879365a45727923374440584276237b664c6d6162484d2b586827502b736e6c2e3a652b347d37677c43334e6a7d3a516e7b7a2f473b51267d6b773f764d364b3b5b4f6323597370216a7448467a3b447c3465515737696a59663a4c5d2c214d763a74406d2f516a52674c29427b7768655242794266525a2b357425282a6153252959753c3e2322283a5566422c614449797b343c23376b4967527c40795f4355495977714a74497231543a77747a675f61217d4b4c7d64733951523f766f39726d373649334f526c2c46223f21694b504f5f2935212663564a354e727a6b5467267d6e2f7823463a58505f477d4866514672225743417a477d5538383836266c53702b3079435d7c62585f65314f685169613c254678336548583e306a263948495d4643365d58374563734c5f5f5266486f422b51674e502f4a2b2a47623f3e4b2946614e33304432437c724c6e306c49646b713c742c7b4f305765626f6a5f5d3a7a515d345f6656747469367a2f2130557c2a574a4750316331553454765a302c7a5349296365352e4d502c3e3b4e613a6c6b32296a7b45562f662a4f7864396474677757692e574a5e5a617c7b236145366261633622713f697579787044517d4d2e464a656a6d28283f325868777634545d5e36514f75695b263a78642b66685527412f282c6b425d79324533472a2e773a7b4c625b57757c6f5f2b272224306a663144385159763540274f7376794a384c6b78705673772222492e6c2b5647516b79576a62763656642b2723324d416e432b774a715a353f277c433228574357265f225b73492e64703f444749715e7b5b52544e2351522b783a404d612e357024525268483f4f59567843383e41455a355e573b7d3c6556452c2269287c6e59253148343e744c262642256d4270415d647c442a586a28355529682a5f74765b444c247452575e492a7d275255263b4125754c405d2271696b5164282235567b2f226f3367723e386572315b44544b4b6f50654a6247242b4f7c29753066615537792a5231703e235f52615135685b5f577b593c3f6961765137305b786f702b37292623556b4d232f3e2b727172326c36642e6f2f3a2b2933376d252f625b3a507c5571256c5932342c6767425b485e6173616b322a3a6e6d2c7c2351332a6a774c3e3a49624656696c296f215770545b507d456a2f6e49277072737b5a687d6e3a56683730687468704f2935526e40695264447546736c3c4461366f64256335246d7d776b7257634e4b2a505b4a30635e613e724f6d4c3e39593b2b54794f6c3049386568295529726745673f4421324c4121336c667b676626764c6b517d343b26546f4c782f3e683c2c3b5a2b357a2f345765215d442b593c6641424f323f4d2b36467d6d3239297b55404e517a3b5845485a532a3c5b537b375d4e6135372f41384d737c234e6a2a634b7c482127502372463e434b464e3953757b5e554a3a72765e2f3e58496f37347355545d232122473f755771365e7b4631395f656a2b43727c484874694555627d3f68665b467d4755306d59527a242c387c42347c2c324f5a7d6471795e58696b34404079596127556b4e6678625576233829633c57274e72567d716c32302176697527713348483358446d225f654038533c4b7b6f694c2536356f6725746972273e653736677351454e5058653f7a21677c5a36597c7970527b685e594249412e3e485d5431692a332f547623382372506f29293e2a2f506679415566212832762a476f4a5f55767c314477797d626e403e3b324b617a442677413630647a43737b59473b544c6a2a22623f4d36222426304d7b7750723c506b69404f484a5f67474074772738683a564d727c74656d2772256c277130635a7c6d73622a5224685671592b326f3e25307328573c365f3b3b455e74682c4650503f3661666b37623a41257066292966485e48385e6f693e6c352e39315e3b4d2b34375073224a662178617968404f56524540626e2c3034354e755e453b284d2f6f2e3b6c64695944414f594d292b33695f6869304e2e306a52732e487c4153325e2c42646b6b703765614d70362424327d4d284021444121344c5d45474f4d71592134485a2753246f494e6c6d332f2a326963682e4a6c59374b355d2f225f65387a4f564a535d6d4c6f35317b5d5b442863644d5a456b59285533634379692e7d246e306523627653424a4565254a5d3a396d5b2c475b4b262a66232375632f7d3e493356616a6762394573487d2e782844424a39294d31272b59252e3b257b43216b3a2c2b2749306245395a31484c615d644e63512e5f2959574e78463a6f754b5e6525216e556a356f443c5f347370214a3c3f3f2475534b523049504578367c54294b482e36542c3058533c674b5d5b503c716441544a334d792c432c462f745f3625224e6d445e333e396c235d6c6a77503e7d2e5457424a364968622c4e59223c4c545338726a664a624c393f4b2b6a24626b4c5867275a4b763a255442636336392e707c415127597974765e367557753a653631417545404d724f723224676b314769353161546330736d3b352a3a77735567272a5f2b3e3f572f2965575e5a4b672b472a593b692f6d707269543244213c3938475b7b417c58217b23325d57516976775b3e6628794865265e7666694e554651566d333b565831347536767621237c4449586a742325286f343b4c683f2134725973252b737a5124295d482c7c497d6144424c31343f44404f4a37643771723b33495343555529233f53273b2e24254161492e4856563f6f6447485275382b4248337071642443475530285441303257373439317176547759364a4c6859464559243059227d4c6a70512b4e4526452a515f78735b45634b3862455a6223662c516244714d2530517d6371405d535835273b6c266a34223e6972352c774c6e7c387937787043554d44432b3c50622a403077687a6325265446787439704c7a43596d44594d3e2c296e5f66643f4f34623c50772f705f3c25515b5a615028447d664a2c2c4e662a38503f393b7727445627633f4873353f3452616b42415a622673622e692539455a53656d6c4b6b5837525f276e5e38227b3f3022335533572a335a616d6a295b32583c796a354527592573465a44346a62625f68535e423e6934687d71225f2e4b5e496d24407c6c494f586b687b5d427140732939323b595b346f4a386b45285466367d21372769444846342c5a7b585b537d234647682f7755395b4678657a71714173507a483133332b213a2e5155282f2a58394c347072274c2332405349223e4a4f736e65486440317724782366573a2539325864667742683529736b2a3b594e687626383c2f32265557694662762174512226505027786b6e6e4746644b3e2a6b5f62623348513a21713a226e3f58503e5938265a353e5026305f435061394d566d782b557b7a7275717a5a3e492b2a292276693259575f475252284554395a465d2f26485d756e365e3f2a6a3c33424d75707755653e7447433e3976657845224f544161747378214d667d3378643b2b3e4b4c62482f6c36547d6c7223466b452c7243304569544178745b4d3b615854437c64505b46344b2e477925386d6136387464363e54742434292e2a442f4d2b283854285a32792c246e42432f77456454456343337646506e5a4a7c6c43383376484e3050723b45566e5867573f2953706879264f306e4b274f4c254f3f74513f2b6a33334d676b7c654c4b6d224475363b6f31483674422526745d53295523347b463058572e4a5d44222f503b3a7c244f654449404f2c672b3b2770732638266672723c444058616d2a7373346b22387a4d7830582b377373324e3c452b6e4d68636b5262562865406f5b5e304a503b7c713474742a5330225359594c474f653b36305655697a79483139473a3272587c457a40787b313e3c7a676a4e272b543125593c22585f4d7752527a2b3a5656533f713b574e3e632a543a753a4d61766f292c6e513c385d445e2e664c2f546923613f584470414e456a64444163397134577564453e4a2849762f3730376a457b273a2c463b5361504e6f4346516258367659482f38707334457275236655627426572b6275513921535f5d577441654d2b64435f3f6e71532530743a4f6663747a357b7444272754262c4d462b7339436f61523b475229752c32344e7a232a6f3c7774495a5f624d4e362a27597d5e6d64717356424d522149574533616f66327d726b2c2644532a45397a3c294f545e5e44464244546d3e4f3f747b5f57505e615d6a6d505e402a4f4d2a47357c7323562e7024432e344a3b417b632b3e2964432c7056757b74795941786c656a2f4a2945676c3e62613b2259347d6a68557557733e4162693c7c6d2553592238356d7a2b6b42312659392b5442455f5d5b525668532a7265347a4e2326636a2e304d4b5a4873773c3c572c5255695b2b68545353787157665e6c6361517348597a707d663968335b325e5137476d61532275717666503b67564350223b637c68685f25277c30422c224c4e35416b753f53482c3e3167244d5a50793875624e3e347028295e23365978713470734141632a2a78596d403e4532502b33675a59667b444f6328287a6c726e434851493e6943686950435e4d292b28673563372b5b3b535a526e717729443e243458696459512c45687c326a38526d58746b4f5d786f73642b586f7c29293635464a75325e29414b6777253f71497c333369422f36616b653548457c442b4f283178714b3330546557344a3c3f3c5f7d45733a64452c2768294a3f514a71544f4a51445f2a737d623763422a56304772797a5e435e2a7d72475f525b375130432942633c4a7d43717b6836657c562f7366453f4d526c387d27642c52354a6e5f4e494a3667393e7b652358334f6475265b6a5f3638553058624b674253415f2b5e3b487c52273f6f7257395543327d686b2c6238547d7c2b46686c4b49665776236c5b647a4a3963396b2650745b5953342e7d615d326f5e523250462b3c59724d387357287d2a4c61362c4367783375713728556c74495e3843452f467d3335286e5664553c3c79652b7365633a6d3a7035484a5d5e643e293163562271293a463f775d2b3b6d2175277a3b4d456c642f492f247438744b682f4b5733543438293a785e703149415548783365574c535d6868524d5d6a3e29573e563a79543e285d5a285a612c24414d3477462258787b6c587c724d252a332b79586e7c6c676c4f246b65484f6b24784b4b3c3025433662547d66587c7646374b677023434c3621314a3a5e256c412b4c5a655643584677364124706f2f563f4049586d7150782c565a2738474545212962387b4e7c61444c372a566b6d524b2249717c62364e563a596843423973446e247b7421634e4677633a626d78684261503c737c797d714d613371623b6b3745694871552673412e5e672a694a517677246c21215253652327693c7444462958432b313c2f52356e317d783b4a546b2b6d3743405835636f437b4c626f335d41477c482170302f444a5f6d284e336f3657652a5b6e55312346724e434c5b48716f576354396b23266e275e496a4a4751354459566421392c6e6a31743c776543577a3731552b7a3f6d4f786943343e4a3a433058473c3726774a5e785f2b3824217a475d2267512b514c6e5f23566f456d26694648372b2b492b5f416d597a78433c3566393f4263467d79217158353350736451453562462e5252714d3b65336e79777b78392e2541556a5e402928286d622e6139694a426f5d426b346c3b6827736840742153682f477069494c532a23285825283a51303f652f693329714d463162522a387131382b35232a526d6b4b2b623538713c597c4b2e2b4c6439455f723f642c772866545f364066343b5570677c223a596f753929275b74512934553a2f44332b23625d3a463338287b4d312c3574642c2f22693e433a63423c40243c3e2c2f5465504764787b75646c3b287d4a3e2b7c774f365f52797857757b777b7467473a6b495b745a3057506c7a787947267445423042596e6851224c58675361233f5a78582c71305932244027244128582c406b21746f61585b696e516f286c3b46224145594d4e6261336e3172575851596a757532694a3c5d2e52587b34212c5b6937437c376f722748712a785a596746394c726c2e703b6e3a364d432a3f56535a21294b7d786c22786e613f6a643b31422c4646683c57537a5e28753f746a28457d78382842434774743c275e766746266b31345a30433026376a7a5b7b23316175374c3459266967763734677c44504761705936212b616a5a52354e712f504277387a7c3f3527274f692775373270727d22784f736d5a5f4242256179405043263a333e47355b46226e664025745f7d2e4c27507b376a297a43397030254255412668463a775225683f3b7655506e5a303263502f712778547c41277d216b755f4d793b533f474e2a67525a295a2e55655353544a352629303a3249306f45215e43223128303b2b47446f377764483a3f616a2f5070662e4b403e56422642685233675f46344d4d6f792c74703162492c3e462338422a2b6c292f3e305f2752626d5f6e28584c53755e42457a3e6e62785754723f7d5e5f4c3c38332859682554305d654350486442625d3630263046692336505640494c5767565b23426a393b3c59473337702f6d57723b31706b782c265e4a634b4f2b64502a5e40265250537b5d6166627c3e472b783a2c74507d7d564e554a74547b6754437d6e5b326b6e30615d38365f515e372c737035513e5f71394c405830646546446c273e582f4454242f665a4668345b6e35464a2c3a3a347371723739743b387a555e526c3a7b6645636b79282b6f3634572b2f2e6d50737839214e7b384d514f397768787d444d653e57534073504769453b2f2c3156532c7967796c534e4c5f223f7843676a4e63434e6f4a7d7c794c653261517172644c66665a283b26672b3877285f585e6d4c5f7250296f34416731242e4646303935474c5e616c4f51374b714d676f50646f223f58453157537a4d45596e28775d5336625d7c512c49313e3f3544224d46556755427655494c3b67296b3e7775477055365e7834222350573577517068383b72502b582378702c3f3a366d65536e5662624c6f694552542862292f3050437625592a2266692c432b524876474d316c4475496c3c6d28314b4a327a346f58543c36292f255873485d326a566d5b6f65586776297468585939536343754924472c5b723a527556364244785a3f5a324e6c3f29212761382639543c243170465d2239573b795d7c24696f58285b7c50734c36642f21562359376f64695d752b525463435e62763f43245d2e63397322365a325b36276c584f4f7d4e4c413c5a5f7a57515d7d2a415a6b3c70345a3a51705b6b6756234f54487266287529707c3449694e2e3a3f5b2e4f61525b52222431294b637c52676b285927533c4f30786b637561216b227640703e216d6427306955426e3177564456534b5650333a574d63253c775b466a4435532e54346c3e72246a43725357665a5d7174597a6c466c4779712c4c7a43637d353a285122467a4732702c6f2f753841485a2f5266676f502741382a565a285462256b5e6e704d6b454b34242f296b2c496f7d42612265413f5f514e3c2e533b7c654f6562742b7025784f7d785d6468796a3c7d27423153665a3f7d2a2468245d4974787956333a2434364678582a252b443e4264275f7655632433753e2f695f733470267c443a65537871442c322b42517c222c28597666503a26575a6365223872476c7a5f6f71613665487521793747785f49344f22766a27492859445231712e73567634595664636f4b293b4d532332762c2c5b22486a2454396d614b5d7c2a6a5e685f593e62525453433b4e444e6245517b70614d34486f3147687949404d2b7c7130277d642e482476684e2f453230647d656e52743c62672e3851646f79392327497b3c3c3b753f793e3c444974324a2b2b48382778765428346a61295544375d6d3e75216b6d545972214255743754534a45545a5f755179634b3e634434243963752757464b2f416944782b635b463a6770705428424f4b614735627a64624c217a28534c4b36465e785376277123532257224c2e6f4f6630465b52417357555d55632a385577383729325f427839543022404e673a2731673b53573c6b643530277a667d46467b7c65546a324558243a5e504553695433363b4c4b7a5f3475297d59772c625235474f30434f536d26756d68726b6b47347c2c32363a5470626743466a6d5438387a473b7b413924747626574c32236841514423437a2a7b40657d613b64402e77574d577b692330484f353477212a3b407c7c505a612c67305626343e3a523c4a7078384271515b49554d5f5041675736785a6a353841503a2c5433764b6a5d767b355049313a6162335650453f715d7656595d3338463249242b71324f4c7061582a58487b6b2e34627569325a5f5e313e3874273c50297c7074706f514632493a72476e7d3c24506e4f4a5b286c4777306a23575d404473782a4c702b516c23397c6b5b292327572164567c7676306c56586626547d553e7242585334683c482b624341632f50415b40405d592777407255636f27444272692140722a4d4a54734a3f31646b4e27667b6238574b78555f242138504f747c6579642a744561393a354b6d374a522e55417a2c2a34547b31725d5e287b52433e5f394a694878485a686f5b2c283b563e47395b6e233871323b733f3f6368243f635b2a59387873454f40662f334b307d592e68675e372f264b43534a535f3472325e2a552f48512e48305564644868645943684533373843414e2a48473022393a782f72717b316e765074375a6c78794b72753f747d61692447332539422b355d6c5d6e706137336155617723474f572b6f353052483e426f2a566c412b5054502a6a3b2a50483263525943534d4a41266f6d41243e5f767c65596d39452e483068762b2557535d7c363c713f5f4837353b3a53326350386b545b65566c232b6a493e6f4e63247c695d5a4c41586a7845653b564b496f63775a7539524244636e4524313a383c513c68315e643f3e35384b402a2e4e667b6c567b2134683f77466b2b774c6e3562617c7a44454d2b6b44254b3575573a65472e717a225d6931505b46237c4e6d6177473155574427253e374b735a685b49782b457524277c6f58763f7631784c692f786d392e3457484f4f45424361637843483e63413741362666726629436738677a5b346c68792957275670252e24524e6c3929762c7144222475426f656d46714e3850624c42266c2c2666246a502c6e54214962276b745b4557727a507b2b363e7373552a234f25737037254a687b374b59413f55632a795b452f72656123215a5e797c2c76746a46344c3a3125494e627c343f233962386b3576265037352b324378732865687d512f784e5455306779532f7247243f697b617a2f30406823394c58377942356a68256e2b703870237a394c395e774b77595432424c33275b29797a6d353436305b4c5a4c792f216f7c37372e6247496f2f577374654b4f7d622c7d497a5d4f38434453367735395e786b40563c2f7850293231455e6c6b785472456d51456956344e55674e212a5a2b5f6d36745f6b217563307276502459497b6c755e2e7869432a37577d254b63595742722f317273613c525a44746c3936544853633e412c25433451673b5a5b55612440743948514e482832302f6e232939242c5d645b736f3c726d555b2275304628707345505d575f6b624c3b4a4f3f285638795673325a3254565359266a7927304e417d7471314f6e47462650676d6546576b7258332c66227357516d256b3c327c5f403176537c41632a556266362144723b625d715f6b7d4134652b6a5d7849613f50557d346a614c2b2450434f3e264b612b387d5135677568386853256154656b5b6e782c4f25792c6b702c46245e72305f264421496b425333657849725e7571332858282564573b5f3c4475574a53653c5e48404a3c6c3c465f3532337d4b6b2b4b7c3f756e267b3b2723593f2e6d766376324356583c414379365a6d5f53302236706744243b38506f28546f7655764f436a467627396d7b22232f2e535b3044246a2f2b434952242379273c214659624d42444d663a32345a2f7d5854246b7d3c2a42684d65534f2c706d337c3c62556f6a314f5d234f57522929663336703865616a32614745385b646b69725a64356b5436332b287278475a6f25256f5e5f5b793a505d324738536f516c7379496249766a5e7173465e36613b46574e7b2573316f2578233a3161363e5657647d244d253a6c5a212136687d4228474b7d685a597a46506c52617a2533335a75212a406d782e774c345b5823382c42686a343c2c48736a2f2a672622442f746e5f4f4a595975592c6b45293c6f22573c2c754a4f672b7a5f2e5f6b3b4778363b7c7134575e772c4864384f553436226b68512a62446f6d5f773940314e2744632e624523632c566353693472625e696d66643949462b66692a3b4c72692c2878574f5b7b4831305d7436422961472a2a432e315f55612a21227130574a316447214a66457a595d28676b4e40702a4f716335345b355f4e7138592440292f25557c592c5a52346c435822696b6e346c54514a73685e39414a475a224c4e2543553e2670337c433f72236a2f3c484e6563236a64283e7244616a64713244596c474d5b34582b673e48373b7666712b2f3f2f6d736d6943767c4a717c6a2a30287973776b62502e452826756c277b2f735b227c616d51726c48242a412226565d4f40655356653038712b2c26402b754850397d334c6c532a495a7773617668334a6b4f68523f77432269644c33402f5e543a2f6b643a4044277963713f6e36792c2a466a364872702b2f4f28277473214e666c695033454f3b776827402c2c7a2b5a3a783155665168663e6365585a54267b796c54416b2b425d26635e593b64656a5b6a632c732250215f4d324046564e4945363f246b31474a3256226d4f2f334046285d26585d21724a252c4a49283f5d372b2e244c3e71374763217b6b394d4a7232216c7474652a3e232e562e66355a795a78366556784f352a514a434d2f6c5f576b3a2c6c636a405373665d77316a3363396d5f2e3448586e69226176464e5e66785361265a6a796a644230746341467d3a682440793b55346a213a2671275e3f39366176622663716d384b2b6e21737c295348544e50706829583726624963243729466c705564767b4f73403e5b6674406b594665636c63743140214b7c4a3b33593a66394e6c5f3344293c26246d285e72235d5073286e383c6e4c4e436d516766456a502924402f644d3f62726c5e22735661432f786755372f782529454725242b3a48355f305179432c282e614b706b6e305d304537303a342b756e366521724337544a6c5b5545667c287c29434d6b537a38617675434f23543061554a6d524e444f5842545543514d2f443466663453563b654e6b4c5e713b425829225f663e3b745e436c2f565b75425e3c452f7b21686524485f746a3b6c4328797673553e532627614d3040744c2536654c722b3c76683b51626f4347452e69597777386c34686a5025657d4d4f512f2f705a4b7a5d282854735d2e2a327134683564355a23574b322b3f5f2f65347c5d3e30573a782e70464f336b4b712a7c4b5d5d504d305e455250243c275144776a35213a4c406d386a2f314975317c41304f6a6b427d31495563787a646d74412a3469595d2468262f4e666c2e49345e3a28652e703163382c52714f3029322a62414e2e393f5f3133382e2a5a7137415f212e467767466d777347574c6a4771345a234423494f6d6876715649232a4d302c465035487770524a595d39276a67717c336771727d612e706a3964715e235d626b717722515e6b4e3f716b634466682822235964334e725021432f545657577d2e5d325859354739283450272a6d4121365a2e21547b35294554237725645952237a373471777c65454a51293c633a212a286258287567565222274e4341725824276731407463695e617c413a4c4e5f4f3c5733302650745973406a4041742b63387367654f6c4423623b757430752a43243e7d43324163332740397434256c2b6a2578525b23424f25322f6932437d2c296d34763f66632b29752a4a4378424c7d30595b7432312e6c4166366f6d2b26615a5e40712e4035715473665463764a2b4b6a7667643465383e437264502a354e225a7445775d72294c2e334955716b4669774e31734375665f26755d61242558505378435878262b5a4e6c3331223f5832792740593c79703c7d715a496c563832367c6b567b404e6f24274630376533704e2f5e56787b2c5d7d25267d31483e6e5234344368794a3e7d544d6a613333212138735a2c2b673b6374662b6e343e44673c29682e3631623e733b404474653b684371464945364c6777304c6a582f58793b4223666a5a7d23797a4534224240336d26416e3a3b49585b21745e4c51584858246f23675d655b276d65234743402a4b6d7161314f5b584d64794c30677b31632829536a717c736f617553745a4a4473586a5d57284d26456b32564c572a687a31354666635f6d31434d74357031795f3327443276674f3b5f532744624221263a515228576e773e7c3a5e257c48584c2c487b794259682766713535292b6136213e3e307b70664666303e7925765a64707d77302253252665257529512269222b5f6a7721315a6e2557526e5b424b6a532b64615d374a2835265934483b6277364e2c30553e6575255568575d672f66706c415536736257747368335a2b702f387a5b534d42544043406f5d264e21712568403c2478264977637663705d616b6d50695023637132383c622546743b5527545463547a3537474d727a4b262f4d377545507840627653217d71386663536f4f2147253332716b38246b412b3f48643868532c23405e66592775233a6e592b7b3a422f324366332370476e50457627352f7649233242633a393a57473756727b31383166757b34365f62496f7a303b49325433375a29326a7670367b3c365f79464e5e50725f2948566f236c41727b4823744a664e32775f5b5750474831752336427d78697c2264445a6124744b257463415b2a7050423250742e2a417c78756c226c3f2f572f39236443236d5931412b5e4c6a432f553c2e42546b503b5e674e4f4b354b7b622c2744685a4e37306c434b5246313979712971474c5748697a7379504075726b5b3839217827286b295e4026483b217d6c31586e7b562b7d79514f795875367061396a333c744255334c234746213e2a466d71227a69576f3f5e4066442c656643642f48343c5e695862555a256826325439583c684550324a6637715946337d7d2c37252e7d397b462f30386c226c4a576a542c76272e3f633a22782a367a364a5f7d53476533423843766658322a58747a64537b3c682b212544732f706f2b3c6b62724b69517c63734022242c3929667d624b45247c7b5b6148755b4761372b6e7d2c45432b365b7246347b233547233a2f615367526245646b407870552837477d41483469325a2c2b3b6b375322792a3444666342764169566143646541692e7075636e447a235b3c39347932532b457a457b5a5b2a242a706d722c324940275459426c6122353c624b525b29767364682e71402e4c593766783c6275793753743e226f65693a7c2c724d773569423c2e665b2b64675b563c6f5d515d54552a70736f2a3c4a3a72293959754a213e7645325645487654322c4c7b326a5e786f515573517d6f66446e7c3949454579665a525a3c317d464e454a4b72705d55752c44387c4879494f4b6d697c46673c267d3e2e65395b78503653457838716a5a6b4a366222586d2e594f70416852423b2f32722458722c6e70524635556c3635245e3f5f45477170257c65344133792a63246b483c545f6938365b2e7d73772566283b5d6e637c4e452e2f666f39443f2e71723c3b325b426248376759562526643959645d406e527243795f726a226c617a586578282c3c5f525e435e3651557635734b2642593e7a42663571397a3a304f4a557755292e622e4b386536247047332f6a2c6971545f215e7d4b7d3679365f465f502c5444495b2778732e637d757a3f4644686e713e226952227c6322392828594c5b62304f414e79437c4379363c39754156544b74546c49566a43574340675978527c4359356375216c4f337d51455d394631303e58373f6779423870374d504358572e2136414964612a7c3078594b3b30445159462943497a6a7a7d745257594b7353502e6e70763c2f2948275b3369386771754d693e48624962513a75724e56746d3328683a7b523c293924782a4f6526542a45537c354749754b45425b35565f3e783730393b792a214c572936675268277b7c222a2c2f426e38447d53702b544731683239594a6f496369744054484e26437d486e45224b70702527307b4d456b274970396a575b502762514c357b752f224c636d392240777b7869447021324c36742a5045452674396964727079272e5e2f36387c613178697151446a5f48655535442f6d67322b69432626797733742125776a5a4f2546256d324f7d7c485e297c7b5d6333352e376e314a6e79794c6e2e76513878666a5d384f6d35352b2b307339524a2128254f74483c255d24265f50376159597a394040644e273847665b516d24504c653742343c23785e5268652e592349744a64235d3e492824382f464a5e58483c3a2e38235d222235454572645d4e5a3f7779373a6678575f383c31253a2250752b736554556568502c765526736228763c2c343628267b23646a352f626173232f2e79522729237c707956297c2b5f484d7a2e6c264d3e6b245a4d5d6c6a33657958282f5571714255484d7b7938624861476546563144352f68734e237561735a33645d6f725e364932645132315948287b6d5b346a3e24282b512c2e25466a7825247b444366267533703e28685b63547d54687b2463386e2a452358513c416e5437225a4f6158573c717b714e4c3870455e63695f436f692f236632482842685d3c513027507c676c3e7a737778796e263e73244d4a675671566e53496f72687d6d626756374e76424b32245155464839516a7d5656293728394e582e5b555f7a4e5e533e4b48492f7c54435a627346772959646475693a7835485a355d4b3050265d5b7c73313734324b336368492950635d2e7a5258584b754b234e265d4d74615b4e2f5971737c34735d706a583833754f5e25366e6163654d32563f5b6e7c55492240673f422c6e796b3627213f34635444593e34306273402f33754346745b267c752e5f4027664e5f5f38512a252a2645482b582e3730382a4e484a75663f723e33597b5661564f6a34507468497a477b4a424e49634252304e396e6945374247387a736267296c5e537d672248467c746d315322552c23232c43784e4249665f3e5a3a6c274d64537a4c65505d416b7942365a736d314b7454345e4649495d217a4c255d256373305b6a5057503848644c442c4248656f2b52566356663029537a6e742e5f5f505e55314974783b2470553e4571276e4e753c405948634168495421776f3740492f794a6f424a575a3540743524272f2e6f514e386662213b7b324b725f5742272f31585134404455287064424d4f262e2e2f5d593e3c4923694c664c2136566e51724a577d3361355238583f222f2e552c25317671264226746a7851274d6b5854222e59726a33397c594c5d655d2e79635f2e6f4a6e5f762e6c4226527d274e21637654275a473f5e552226244f6b6f497169676458567936397c454431476b583129264d7d404075797a5a30725d366a4c6b2855476657262f7c786c264c3b4b537a276f37522c3154324d4f47496d2c434930305d3a722c68406931452441292f374662705b6d22452761515721624c6d316d70432b563b44292f4963252e5d7b2543766957632b7644286479525425493a57327953257a502c626b6e627161352f75722a652f297937532652646e682c747b7a70495a3b505d534b2c3c776f3f56633c6c444f32302c453a3264394d507536337641306c52356677267c623b3c4d5f5d3467644f2f495d56597a6f4769785a78262c4e782a257d463573643175302972276b3075366e5f3978224c6a7a625a433e27217a3e4c4f6b775a497c3f7b6f34242c457672732530776c7d53404e56494c3732706d436c7836503058532e4c374a446a477c3523422441213523786e2b326b7d63316239753b4a432470797a217c40306f5f4c4541574e786a66625a433a3143257c492e262a21763262685f54296c253c354f442e54224f50723e75223c4b23767b642e6c46277c767c5b7a4f235b29394a303a2a73712e527c57574058554f367c717c4646554c7b493021704f22755a4433322c7b2b445756396b747a343538457b442f726f7756555a576d29386c225365437c2c4632413762585a4c6743566164582b5335642735494d7154752474375345302b544973773239372a72752835783f5f787649753b4c73384123456872757b62212b45633144303b5d5b73327d662e3f4838404f53763c3b3731656f477c38263b216d617a3561575974794039236d482b69573748313b5a2c594b723b523e4521224c3e2b7b4a6e6a232725662e61455a2c7a3366495146676f3638762b7950225e396a3e41374b467b2f346b4b2a49655f345773567c2230463c482e672778277b7c317a55772a7b524c3562267546362c4924693b796e765252553c316c6275503971403f632349286e313f5e49694468754a4d737625436864402c317a6c432c4a38676e27385f41613f4e4155795d5e38592b6d2b3b7140766f2e584766714566346b22704534786f555f59655e3931474b2e7241354b24437878376d777b584b2f562e79723b6c6a4e46274e2c77795d436a757151427748726552672a472c3b3a4334483b723140432f287c563a4f4878276e5e38413c754c233250616f3e5e5b387a48522a4321683e58265949544721574d382176257029753357586c6c4f2b3b2537774a4758333872357c4a6a3728466924335b6d74416f7a64497c783552252725372f544a283b22703562655d4d27345b7151355e786b2235585d592f2a755d5a3474383b782c2b5e26213c78393a24364a493b713c752635632f665b7868555b277939282f5d48515137692a613e7a6e6d5731623b336e7427776375264a5a3b37515f58624e633e317d563729414b6b464f412368586156476a2967475149303242272341465278514c4b4e5d4c733b6b595864534d2976423b21354b3e7a235e4a613e2f3a3f7d78246657223661406243673a3061216958252363495b6b297d2378646b647c6a346756282a4b71596974727877494951586123286c52632e296f6f5a2652537d2c3338746b786e4d623e7b474d5d55393a6d4f59222a263f6430464559477b42274b6136402849325b2c6163397d24784c275e375e65667057462c48683631273c524e715a3e276a4f6a69236628277341224d5a4a765221497a656b3f5242433e5f70384f485d2c53746c4b6665245d5769617d2b6454685240466f6871586126474b7653224222552b355e353b3b3a7d753826506238384b2e2669616832685468712c5a4d2134553e474535692a357b6d215a565b7441383173693b6c43353e377937303571713c507c3f6163484441236640333964626e4c5e5f57676c5b367a762a3f4a752861416f796767744b584f3c363c5a706228325b69445535583f6e343424772b77526d797a5e354a3f7a576c61592457432f6a536c667c5b494f73503f5723667471515e2c483430467c3728335d372f6c3b5066644b2f696a4937645d724834772e5345357a2a6e524f4730564e5e573c496f4233582b2b645348797823412a5a2f79747472745823473a792c49384b6e282a4d472c546926623f35674c6f776a452b40583a4d422f396b5070265a61402f58733637676135442e352f472166293771282131582c372a5334432f26456d7468727349682a316c412e3a646d3335742b3e7c2a7738266e4e276731222b507d79657c672b41273f2a515b546848382130535750635e35747b665d4253582c2c235e61796a414454294a7a574a655f552e5e50242e55385b6d2726485a2e694671635e4336362e5d426a4477467c2f41216b225f2c54315d555a49767b4524562741634c2a2e372e3c2758773723675e517b563f2f6669497a292557317c4236697c504c2e5f547856587b274e5e336248555f2969704246226f3e76362f7424666a455066527d582f5133676b4774594e303636556c6b47324a4f5f7359535b342a4663713c4b325024584e4d2b426b383c53503b65524c284e566d70752140575d685f325b4d582a7a412135413f737177255832467b434e23755448367a506b59626d7d37737c577652484b6d55435257353457795f4a6e46694170285a534f445e3b4a426d79374068707627352942275256552b4c77417a68226c2b7362576b7a52504b4f47424b5b573c3e4e242531656a3c597c796d4d726f226a33786e65386e6c625425704d6d3842394278312929212f757b773e4d3a3846504b275d216351565a6241585f56517c5136735b5e72396934696a4c786b716a57436c69462e4924454532255a6e4e636b5d4f5d234751586f67635071726875622771226f73663321444c5e78676b40564658684e462f58712a6f55564e21616b6227443869625a5824682f557d4e6c79726a4f2a36587024647035393551266a3154484e796b327d32324f595a5e77246e4f346e65562552775b245d543628303455506b2433263151405a32474d703324413e67694463213a49214b402476505b5e5e71696524597c5a4139704052367a66256d4f3c51614f3c743748504f486d59374a2564454b614b364b5f5577232c63755d3e617d535762586c6c2156592e274073416f6a6b5d3150314d262c3f667c326c2f337459644a4f51733f7a32593268505b6d475a7a5d673b483c43686a2a212f66797d63657655313e5545507a3a656d685148345e5853613026284c43266b417949524b5a6f712c6948244e737d7b694a736431572768627a227b34592c21333b57706c2b486d627842612e5133495a325d4f5a34766d6a62392f52355e356b2a795b3b556c48395d44316a5a35243263386c3a255e35743e23776a4f5b4049443e5e455d2e3f3641275b2c422f30287647377931245b44716d4a5e4a54335a6739327c47253f484072645d5a4c2333632f3946794d2e2574774d5f504b643242554c653f39312946216c485f71692e5d4e4f5a6b284c6175704a4036713c70337a2b2543473c407d307b45792b7468466825293c7a24423a3952452f26235e7825583c7b33756462712e65673c404b5a74633771687544626463556f6f656b757b55466b4f6b5d3c3472376a383f2421387d6f7b4a6a45724d753037552941424a712f755369294b7d4c635468686d306575334165643e2f213e473f376253564c28724f4058237c292a7d276f5e5f3466327054305d644a44725329395f64224069692a362b765f2c4e4824655e4c4c52314b5273544742594b306542755f346c27704141382a6d233c3c3b6c26715f3a4e754a64246b64707b645348657b6955466629405f595840546e30277a6129794f25637c4c617d4b472f2f6171784b6d4d737b676d3b6b48526d236755312b4f7d2862735346633857672338286c34286a49545d6a67774c5e4b7b6876545e6a617d557a6e4c523353376d4932366b3f4f24224a727134436241595272335559373f5b6e214f38656d6c24335b473958397c56317562582831332329625d662c6e5a5055374e49576e53373654307a52414c6a6d45634236497376545e6a543a546f7a52346725384e5559703a57282c26472e217d4b334f6e29397868377249285656556938404a435a2f6e5531544b3f2e492a7a79356c635d5e76422e306247317d3546426e4b2e28663f3a315d725372274422663f30455567294354383a623c304b4074797454615d7a6a73663e4e543c456a307c487c49682e26344a6d6534585d2a5a6f3a7d48646a374a6a4a243e703b47322f24216f5b2e6a36265f655a767c78252a635a5b795a3b764646224f5e7c26312374436b534e7954485b483b3f3944713f7121262c324e5e293c6a62736f34383f536c2528333c77762b6c3a50762853325e65674f677c413479533b6341582f2e7d3075513a4c56306a692e2c70763840784d2c69706e42645e516e716b634f757d436d2c54302c402c263857532974565e24535170633a29386e4e3f665047757d576f6545516f33395134647051625f6e215b635f526a3b2e624b3965353742535e42216e3a4075265b22365a733c6c7c2432646f3a6a4d527a653b556e3630522657593a3b7c6561765179294a5f397945686c332c6d7873525d565a586a3c2c244632673e213e61297d515f783e256f292a4c283a595e25616c4d3925503065484c4b7446742e374c6f282b59526a24247d214772546b6d427d3f2b6b266b79662f2a7b3c7246513667266d5b6e4f2a6f6f4c75582c673a2922283c40775a4a484f29324c5337684f7442556e687b2f6838744227553e454e3633533b5659392678453950664f486d696c5a35317c6335534b55614428297c483b5d7845264343346b3b38683c58627665652e633f38706e53304259686f524c744b614a3155456b547b3024744733274364667c22364d3b2379425e63626c3e774d426a3b453e7a4870513c2449556d5d664370652875583273592855412c71714b2262583843716548697c4c227427522b31644055287b5d483052422f6e3f732c327a5d32504571464f37222e6c4d77785b6f6d4c687937526d29703642527538613f22317d3f6477372573635d51724150274e4b4a784656422a352e2f665b743952337a483845373447442479496e777d405030474f22264b44275426276b6d70274f652877646f5e326b4f784c6e4d2b4b675543282a254e3959213a517043703569594558464b437c423245357228415475303a2f4a21283c745b4c212c2326422f5949533f5e622e7d4d24373c505a377773235a6f2c4a272a6d5d2b51526e293b232331227c2a6e6774444e4877507c56242f26463068572a79263a2b256b69503c74757d40226c37263544726828652870413859344d624a64475130784b693155447c53293530256f263e4e676a434d2c27787c324d7a714948345a633e4b7a212c6c3978464d2539495a2c3f7c3148424479293b332e3540273c3a39636141794632744c257673216e2f497832625a45497a5928233f496d71784c432e286b6b5b3c71674b30364c377245596a3225407c73536777646f5551634573752b6a76414f5b466c2a7169362b4b253e6e5367544a756442776d3b5668247322424b5751634476766d573b66216c517b295e6a7075676f4f396a31657024445b5e3a5045272f2771286d344b7b7055254b49583f6b2b3255307029295b6649254e766f7b6e477b6a545f276a38396b242e6641564561684a4736714f324f31532577357141415d476953436d2e247d2c645870496e6c293f425e684c456b32663b47267a4f59732f457257595e465d646d6a6d29784b265267352a7542714a4d253173716354624d7a6c32653259664f7877687442647c7a5f372259686b2a415e683a254f5a7d2e51553a4877532c7472292753626a68766f4d2b257937352b2638265e79365130443a5e6164394945583572262c276c77232f4e6e61252c416678297950404876246242772e766363237c6538513c796b5f3f346f6428354859505d762c6e3c3f416a6f5579764d633b5124374a3b782247382a3e336a496a3e5d444b4d4a26673b44666967737d53612c7b3b785b486845256a367c7a44703a2c5d525a69224972363b242e2670456a5f29556a63242a7770232e3a426d3f6e2f3c62294c21316635563c465e6d444f2f7b77256c4431762e7b326e3e6d5133306c24704b226441474b67627173217c36487227372b583736266a5b3f5e5f794a252f37263a69614858593132767c2155214d675a77286862375e3b707a342a32296d65323a236427483326464965765329775f23416351494059583640786457375e656c3866405b5d635774765a2c543247462237647b48592e3c5321254d2333665b732249654844545342212e312e4738544c6a24282a37684d596f4f66237b26225256257975742b45786e703859264244384e6438325b4e4b586c29622c646a352568555525633c293350365839447363573156697223785e264f79225849583149454662375a2334372c754c63514435397b4d272f5f6d3461496a7527213a4e4e6650357d29673e337d2a49646e3c2e49543038572153266a335b793234567a6f4e296e3e35254d6b7330744f77736f73746d6d2765692847697d31545f70256f386173495b6e3b3779654b2933655451394e76347741505b5455263b516d5e7761767774364d3827702a68522475284549797537584054734a354d496c556e2824315e4355346c2e7b2b2a3e426e6f5075736976563a7b7b403f657626735d252664383b542c287c665d7636252824626f6f6c4a6b6b7d2c3055752b4b582e552140563f394f6b764c49563f5129595268673f3548773b325645707825363f70384525726e46305b2c6d242f23213342523e344b5f535335315f62496d5b35774039516b78553567584437652c6a445f6e703c313f5b466b37777c72405539424729774837503c4c553c773439406b705e7b616e7a7a515a5e3b3f3648213b30536d2f3b7c31626f2f454f31234d65793b4265597376687c572a75685b2447263a576f235d7676765821505f653e2c3863306f77252143233f423273512c37433f617c5632376c2246777d53686d4a4e4654685737632c6a45513f6d44374e27225f2c476666577a5d414564375d386137697778536749474a673e685323787a6a57565f46426d3c292e3435262571633e62587058737b5d756f724635325d7021397b79724b706a4058593e285e63234e5221742b23236335665a447c7a6271546a486726782140735a66476d25524a492568397a6470512b5b4e3b5e697972322a44684a563e714862256b355672714867264e7c3a35723e5d25794765223c526d7c74282156673021217c5870613143473a363c637a7a736b4e524177386c52657a3b223433614c564861574d457b515a50406b2a27692b6c6c4d264d7575435667512c7a51375771317270704958436c4c404d6863282f37397752495268744f3f25265d697b7248407a4f7d773f6e643e7c6f674d612621735a442b656c56212c726e5f67534330256b65597458467768516c41684d616c53765b6b28726a767249694275266977744655742e74594045483e61746f444c42306e456f6648356a37283541244527483c3973765f676a513c472f2e6d49446b4277243f2a277b4d662b757974507d36774f2f79373c542e2954796f562629254e71212c4c4c545053513649255a334330293e4d554a40325d37513f5e503043782438586b226857705d7762554a2671462e3e5b3c3c766450714e764d346c23665b7d455f413635533b2a6643756b2b285a7753674435505e502258614b5157436a446537406e2c6e2a695d573f7c3337337c7d684e53402c4a274e3b4c4645412f26587b632722335b71752f7877383c2f347332326652693f2833333e7b64714a502e343b646f68757471417224505277493c7161326a68447649726c5e62296f706e5d4a2327697d6c235b43394c2b2751532a5a557449537a613775656a293861625e506e275b6d726d694932314848375968562c642b4c55513f632e5f3f6b242b64244631774f6b332555543e5f6c246266645f586e43365643474b51226c4552717d47514c463224706668624b7a36446f634777285e65587b3837596b5d307363737b3b5b464444394331253e22767b5932372c7c7c544e6d485072476c2e2a503b383770544830414c7464464e7553774e48662971295d6e685e6723334a3248495172446e5b65343a2134344f7757637162284d2a317c2c555d532b553a61472b277c324f2f78682f25707034683c70557029765d45575b68222f716b6234367a38563768787c3b6c79215d42642e3b65784b214d333f686a524721236576407156717b62423c4f7a7339533a546b4d655f2c495e456932767b2753212f61632f54256975742137494c5344672c3a4f75483e374d6c3242443f4e7a525261554f504d35326b45497d287a5d7957222451747a5a6723272b4a49564e2b303a2f4451277b3a3e7c43692f22456b68245b504e5867687b534951625e32573b345358715d2e6c624c3632686340525e7359594c382422723c4b585a7a306d67267c2277472e5d706c6125696852583534477c49774079704e2b4035783f3e4070715a716c404a7554644724395d4728652a4d2451256e7637626a7354536221263c61775e3b3f7a4f26735e453b61762272404a34367332536c336a4953484340316c6723367139223b3c4a4d4264354a6c7339232f234a51335421736d2c6b2a6b797a714b6d6123664f6b31552524262b55326f262a524651314c57242e682b3e32625173776b446f2c575b774a4447683e3141774f7b2b4668645153637d2649355673252b3e7041663a4b6a3c397b3e3c7964214c3a434c6b7d2b715a377b2474564438334969794e71416b2c772e4140764a284f41362121444b4d5a21337a7a73716957592f764b21565d5263465a3e6b5f70322832757d6e452f54715f6a5444334f5356637c6c7952572b4e5e3b2172615a25664a6a614e29394327392f79426c736b6738386679284825524c2e2a3e594a4369746c6a726c6126594872354b24397c343229434367574b613c223e622f46352a4f24723b5b3b504b37722824505d72437248585f5b5e6758372c6250365826656d3645524b4752646a35287b4e2a66782863215d277d7c6e4f5f79702e6c647d4a5547676e4d78635332244f4758264b446f704d392a752a2e246e756d266d34214726774226634a544d4423742b76396166373759625a3454556a4158746e6f323a2f614b4a3f7135416c6a323f6d367b652a6a24627b694c6f545a25753c7c6151342a474f453e314e52766842736e782b6474325f6e4e724d6c732a6c3f3038533b6d7b596252786f4022307423403c616923796f5353296766422b6c4e57273b5f7c2637777035596d7d2a31234868774e414e4e2e40744a333b5d4b3a57262c5a44216a464f283662685b562e29382e5228482a24355e4c64476f4b292976677c4d6b626f4a7b2837322350415578612954456b484b364040247c4a6b4f6c584c53476b38573a7d583a2a4c414e737738795e32684f6f6b424269216548417d6827632a73786c64333c576f3b44292c45633a305827284c4b6f57235536276d405e512e5f5d52655b726d4d784a5958676131274f6f53613f3e692130316e584d44573e6151496d4872473867533a796c71545e527932617a512c346868414a4d5a3b4b5136744c50633c5636465127413b5a692c576c407c52717951574b6724314423733b597b657828783778514a31304c575762284c6d223e677332792163502540327350446c597d7a5f252568793a5461283b304c4e2c61354d3a62344b2f272746744e4a7a563954235b2245222f6c445525515f2c37592722716b274273726f764271754d26717a4728297a7d534f77587b4e7a7532745f2a2e5f26737675354a5b5a7c4143375a217730727a72292131534e69257d626b226a75217362457a53306a417b4f573a4744526b5e786775306a27505f41532a547a513b2a56497b3e5f76415a5d4f4c48334733694e7326515a43385e28243e72693a296e3640286865264054287a77293925322a4f5b285964404a737235324e315d46714c683754387a35564b31796c4b717544772663376b2c4e614d763154405f355d646b563c4f6c497d423a687645657827375e216125684e687c54646c4f6243567d5b245e7329432b6a783a766e6936487545622f5421486d7a585f73382f2e3b23664b6e2c2866586a49476c734c7a3e3a4e4b5b7d4f7d5426282c556f6a3a226c4b5463366753695a225b245155624c562758452f6f414d71535f3f5d75675042272648363b463b2c49556a3b6354543e635e542e3329493651775b623e4f7d58335f586a2f372121525a5a4b542f2b294759393c774e64765457737a477b4378656c5624724f5351224f5b495a33224b7774685b624d337571632f76592f795b66433f3f6623335e2a67404c36367863645e5b422276466a4c272f4e30734a435b473c345a253665634656213f3b763c5838583b254d4b676834752464712e6528534d6477247659306277385a6b30425e775b224e5949363c5269272745424277525a5e553677523a3f233a526d4c2c50527a5b266136315245635d223536253b4c5a5f4e4f503024706a4746244f6a446b792c7d6824264b3e68735d23527748664c2e61442b52405d6767436d69746b2f3b313b6d424f3424536252397b3c6d263423674a612148596a76645f317668247965625b52636638584a74223b7d2842717a5a6e36765a37656230497c313b5a6b3e2726454d6f4a37765f2a394e366d2c273941654e47774d43773426673e247b5a3c277d655d4a747930777b22385d76356c6e555e7d522c773a4f24724e69532a47756a6b3f746d5e247b5e34414c404d2a58217559562a656b365d66475838235f59554e28734c6145324c285040442b4f54723c2f7d2f5356266667353c3f6723726a4725596d66527b4d6733267a26566825354c746f6e5b332267412458337649653b5226703e6e25524d56754571486821333e5129512266252e2b63674a4c34242c4e45457a4e44457d774433747a7a4833447a353637774e6e3b5d695535795f27236d39357d4b342f31786850253151736f362a65274d6863683b7a52717b535d4f24756721744968503f794c4a524b41507354764a3c2824743f62383c7264772e27496a513975232f346d363a363a3a43727b6669402c43237829513e4872286e6571505e794d5e47227340722b346d5d2761785f273a2f5971782a386e583e724d57774936645e646f696f775f6b4b362f2a67522a7b76247479695b44406f335d565b763a6e6f6e4f4a3124687d336f737d544745765e3036565846654179462f73616321775e5362324a5549616b34463b42593b793b6f2166247a574f673a2727784d4b70236e47336677566c6c656e756573446e6a6c575b7b31665f3176376f227330274a333a263940784461546e7c4c5b723a66523428406434353c2f635946354a4b267358443659624443226e76667c3f316929707b495571684f544a7b662c493b27716f53564a447b2a795d394f6e47662e29717725544a3c4326392b246b25312f55305878675f264b40346565774b65692938633e5a4c7d6b792840294f21232f4c2347692e5525773b336a525a775b4c74396a4a6a5652307c4f634b69654c422c2767504b5b5b3f59233f6254443e4c465f27736d555626212c69243a70776c71553969534d317328253477756864404455492e2b5036302c6f2931726d292a5f505f25757222527961324b7b4e2b3766793023506774546f302643285939546c404272696b686b595131737d30347a53785e6a2c4a716e5b3823542b496d3142283a4a75597d5871693c252c774f667a44355b242e35583c797d4a3c3a4e447269484969265e5242512e6f432742446933377959763c63444b545b3a5f4451312b6575237a2a69215161557a7630796c2e53682828487a222975266524474a3e78496a27787d257b766a374a464c554938463e4a79563e423a2c365b6d542c5871392f2f6373505f417d697464642635255970404c52296a5e40555f27334d536469273c48402a2e745b215954322a7279534153234835636d2f584373226a5a5974516e486d3f6f55346b61775b31373243755a3e656a2f5d32634c4741336170483c667036586e3057642f3f46247a72354f24445868566123484422764c5b7c6a706c383b4b3921483f5b256727717b636e2c7c514c3076483c394734705b776f5353474237306e7c693170677b6435317b37414a7823705529287078284d312c746e4179363a2276355964533b7d4e623769594e755572725d53226e4648692352363b3b39475e476a59464172704f7773556b7a426737502c7d303865724d725f5b337c652a7c2e7a3b246d2b474a23545e2b59324c3f2a35626c6f554e323f34622a36355b262f48257a43314c27303a6432472934444c464975432723787671774956265d58333e6d436a2c7a5242332c6f3b407b7253405e7070772c442b6972333a216b5d52472878212b6661696677375e6671653a3538466d336f47597666454f4b7921397751745935616e2c4e7b616456473458223a426c266c3c50403c52562154422879232a45685d5a323f445521385a503c6e27385058464a567a4f684b5d39635f64626a41785d4b7835626d22216221583f482544235e2a353c72276579256b56622c4745552a3556453c387432752e732c5e78323e4e69596133437d2e75237b61237c56247c4570634e685e692f682472432177284a277b7076306d4e75753f2825414835575244343b67703f2f443078276e5d456368384752343966222c6f30714e543e265d594351293f532a5328392459262833726267226a3279234d485d73422447396867645340787543794a7d685f632b266179453245283e4d5d21274625332f665d2833436a404c556e48726b7c2a45337525595242355a355b58696f6339517a796d33235363292a6f656b77752a397c7c3b3a2c6f406539373c24265d22783128775242756f434453357a627640335926752742256d686b466142426237707d67523c697348252b713e325074563c276822237043506153766f535d2b597079275e72297a6a247b33515f43543c7b717230364a715f4d3347414a30226a267834566d3f76594733253735576e496d747d7a497a512c79773e5273765f2e743e3b595779483b3538587356382e616e5f647a33263c61384028242456385b6b3c2f7d4e43632a25373e59736266693472583053226b3c492c4276796a4751427c6b5731642324313e4579336751425e4f5043235533546c4845356c28402722544f212c21443c334e22726855455059443c3730512f65576444223b7c44583f7572256a753628537671496d2f33446442286f51675b6b75474d236874362131624c6a5f41295d7a77474b3c332e543f404a654c5e2640434652752264374a3c72552e385a2f336b53343a766240432336232a2731392c7a22337c63627b564a62422471284f752c6c5f59246b475b667d64556f2531553a684078504c644c4e49293b765442594c5061694a666d25422f36484c5e7c2f32635034274e28544d68673b6b413a742742232a433f59586925522a5574455832623b59483c2748442a7833505a42396864703a554e475a2e4e46236b224c76795453333b5a554c37514b357d6669375741497c656e656673713776305e2551446a2e4c212e77422370477b41674f78217557475e38475b3c5b6834476d41297c3359594c6f684c58706c7c7a6a2c485f522b3151652a6f265622754e6e2b4e2c4e7a4d66594b4a275b7a2c36427b663a28433034652e416a273f5e512e235838775429563873342546785a733f507659682b296e283949762f766d2852655559253b716c7d31253167322a68477d264154363c5540414e2e4a6975634b30734f3a575e476d39654b353850716f643145683356424566737c4052214954584f4a532723797a25277a72354c375d3f694c4b513921453f2661414e7434362a7b6d56725751584e272a2825302f34227c734233434f7459455f4f41334931473e533c7621593b3f6c354c4b4c4132637c437078477a70622a31386d5f53303f4a706b27476345532e61792726394d7623576f213a51466c4d3e763159446c2537572b773f7a4348794f5d6f76724227417c24256242622f577530616267247c524547364c62714c41674f4b775a23403a7241382e794e4b285745477c3a695a516c67302b3132712f2563482a2e6b24573042393a5275386566463a797837653c2538345d70687c3346565a25663879497529352a54247c7b6545415f3b303247785b5b29702559347955362e3f4533334f2c347a3a4b795167653a6c4e437d5d4d7669523b3035417c586d7d67663f4e7128366d74352123584f41515575243837435334545a565f47477437556d7a3f6935552f366d4a576a743e70474c4c485e7124773654765a2c51585a3f21246772525b6a7c325578753726732253572b594c5b572c6a28234e254e5a456c646e57662c277d4055367437674d2821223e7b5555627a48784f2a6557254f797b632330713156622a7d4b6e792b717a4c5a4b5b456f275e67423e2c3237564b362a41507b4440517b2a4266236b24443e6f3175383f3348526e4834575170573b5d654f337b4b4c7c655b334361294a5b5f6d2346264a6c3b4b3f636c69303425537a3e4f4a6f2a292b474b284676395f546d59422c217b592939744f3f715a4e713e70744d5b3221645731406a64755e4d5827523c715251536d4b5227554c2571273b6b5631217b372f665e294a726f773f3364684e597a65754255596f506b3e56723e4b612c4b6a4033386f767b7966217b4c505a6742266a5779784d76402761657a76567434706d254f644e457238535548543658256a4079303f3276444e674572267a6a617949235a75375779666f727a34354e3a3023316d274268485070535e5e34573e352c2c446b2874254f596c23707378323e4134504b6a422e497a214230714d2a3c617757593253245a343c22704f626726264a254c664b3625706d7876216b726b3b62772c386f622f462f436e6e475b297a75484e6141433f466e2a26712950232369535e535f5e784558633b61353a624844282f725f484b612a4a7b786171776d677a3743347876634f245d4e797d73575257534e28636f7d38407d49536a77636221303b7a6f444a67322b3a5e54405b313435762a316330783f7d7632635477784733384b7c585d5b336f75246740485d27526a443a326e4722744d2427327d7b42275d4e503948303f4c374b2f384236245157365f5d3534584b61226e7244512e634273783b453c3a364c48264a473f2b763f44773a517c7b316f273a4f7b765e3b68363c655643354c6e74636f6b33794c767b22647b54753370375a6d36472345316559482f482158366270754b7d616266393b7a374078704e253141684a61592265274a67243a3f6b655b713a534c475e725b523f3239617779787227525344303b55537c322e2b434363455e2b36412a39495173484c396b3f4554687548362a3c254654363b6a2932402345575363597b75685742383c5521654c3b4059406f2f753c633138767c4255445338354d2554446f463f2261402f417a6f342866713968644764546c7d6c532b4163474f595f4d51295a3430635a4c5a4b4c79785662707d474b77316d3642423569586f5b7c57466e2c5478213e3747266a7d22366d567a27704b5433426f4428467d342248563554566324765846674a444342797931586822445d323e4a214f223b294850757c434d30733756526c7b32565f3e2677487d3f744a4d7c4b50572f6d3132773a4472396e70216b586a5b775b3c237d7c5e2e59516a6b716b6245344933313641776d44775324734b21706c7540792576634e5a225e4f6b78586e304678285659762141364b3e7b30677d6e783c6b6c783c675e7d77632f4552295325465b5b6d3f52786e234f2a6f7469554e556a526b5b2440566a4f3651596943765e514d584c69287c7557736b412b22735974787340652a5b6a783175286f69322a706b444b336232443a4843706c66686e5248483f4d555957232b27394a2222256d304e6c5a757d5b315b274b316740522824504337334e5d7947553b5d686c5e66346538232a487773463840237c4f5358553a59642a655a5d675b572e6f7d76506350664d747a6556597d3a52554c3a2462423a52464c5d406e55503a2849395b4f3c7d3b637d3e7271444e34333967622a482e66503f5055253b546473236b5776656e4f57477b4843407272584b327a38396c5f47713f70325e2e466238495540335b32714f6f3e2872432e6b4a6f2250267326595131396f3c6a76523f7c3466743b4a425b6b284d215345686d3c6e7d6e6b46536b3237483c6b307b61365133497142583652225729727457527b5e3e7d51454e67723b293e566c5a42335b76423f5967334b5b6a5150397971405b2378793f5d7c5a24374a792c4d717a4b30592b7d2f245f307431783a6e425b4e664471425a563b47574c7d25735570432a305b73393945454c693838416f51624c59506440796c686b71584e3e3f616e3e637b754d58504b352c716c226e4722384f7a352366656f5d664e355e622b375d792e706a217831757c6556212a6c2559766a6c2b26576e5f543e61343e2e7c392461437078716b5f67726f5a68414e542868713c597d2f6d58397649334a744e6c664c2e6b776c522a77552a742c444e5f63513f24633a634f6445222f6d5b645b623b523e405a7c323759302e7149712e643e7a57432e4b3b6c3461485154276e5f7173754d3b36576624652e7543366d66617c6b5b4531556c655b293229486e5a335a4d2f3072393e7224532e7d3053353e4029434b77296f7048642e4c223b576f306d7129273749567c27795a7d55456d335d2a5f576f5039774f7a445f6b4f224675697968367864222c54245e66576c5a592a3e37222f384a296b42632f7d666a344f343f2c4a636b3e384f6357425a6550357838537a337057653c78537b545069312171254b54726f2b7d6626567c7433596d4d2869246b7a7a6c4676555f773e286c4d3254363e4c6d3e7c4174736a3f6e7d392e527a6c3443583f2b5e5d33763c693b5b72407553285829295855226c66466d5f76725375796d326c567a5b7c3f635e692e496b795d3a716343686d306c5f6f6b37564f75324d4331667d61417d383137317328597c3a3525746e535044402a43564d456d404e445b535840525d6c404a4838695a2b5a473c70574e5a63225d2f58494c3f7d646849585b2f49647843346f4a635a236156493936712a784d6f55425434675b5d4f5d3234232c4555237d712a794558672a3753292e472b593b6e7962693342216f7d4d394378687a56424548232f53742337746c2858537440324f6a417d3f7a4e29367b635b566a7b36733f616b54245f322b716a795b3c362a6255476658586261277b2c6a5f77756d314b4e763633777d23584a727c4a354c695a39475a5e3121336f4a707d5325777023247d514251295e652b79593a573179784621794f465b77424e52536232216b26385f6c6868367c212c283849712f776422724f472a4d5036497879434c3f3e6d39522875784434524645363e704c5a56213270264869585b4462586b3a522f447c4d2359272a237a71772b3873362c234b3c3c4458295a71627b5263693c5e5d764630484c6f615831686d3639742a34322935717b3a736d353f36294d373679424a2451227030547425303131715b384067324349536769337433333f4e677759324b5e3841347b2a5326744a4e256340524b3b5d24513053702b7231396a7b6d4f61437442343726387a687351335744233b785a6c247d6771667949567b6b583a27564d343963347b4f787d3622454822234d325f7473212e3b356c38455352767b4759252771757947657a7040392c423c2b68366f33696c41514629553b2a3475585130644b74653b61436d51507653337b6b2131696a372c792b2f403632595a4e3e2a2c6f3b5d36743367696a74692e2c294f512538226d75465a524b6a22686e7a2542786a6b6b516c6525213c247d7a4b5f4f7524232b517726633a256e2c2a557b375d2a2e2b7a417379633f3b714a51495a617477466d7b3135734e4e6b472c35227a417555526b30367b4e5d3b3761633a7150556b633c285a375e477c256577415b706757773f4e73712f646f713f36537c423a3c5872232a53623f5546675d4e365f7c29505f3a53725a3c777c576f51223864394a3e2b592562503a242e362326764d75444e6138283e62404947734a316e7b3b647a43425d3345653a29553128517647366b4d4366292b68756a3250374836696f6a465d5b2c393c413e32752b386361312b3f7c7a62233967342571224b6a50687231413e57563a25595d2938393e41514f473e675b746e647056445d475144624c6f7d6c284749463e56645f516d482737495d2e772f344b5a537d4327582e5848393e305373574728393f4a6175573f2658254d2b776152696d52253e2659227826542b6546503173454e4f363e41784d2a784c4a77542229505f645f2e77254640294133745d66502c2322654245446f294f346d507333696a5b4b667d4e23544d477b68695b213f3e4253703126214f4049354556634a284f5d546f25555939573978306f774d31513851366e2b267c37513457425b4f286f5b5a7d5e6c555441765b654c322e6a7a44716f63354d37364b2b54632a40394d4f2a5d5d273a3170653976795e637366793c543c216444467c6e5f707a736c7742707a575e5441456b214c6f4555567d372b3a394e2130365f5b76367256787b4f3f2a5867617c3a4228767b35254c225663244c6e2b297476286572692936635823524b6353755b7a374c334e3937694a4b376b6553653b684b5566583c226d4c265f773a7a684671736971345a3b51226a5e7a44323a584e335e227c4c66466c2a41252941617a346e7b2e687a79247151264e502e2f394c695742552e225e475b674143233c256c69474627717b2459236f4b665144615d457c3833417c4e5e7b5a74212b635b346c4b65716e4a7676316f44736e5754556e6a4b2577435937223234212a4456465f756147546b7443313f406f3e5a312e4b35312925407d38304f6f68215b697c47316d30743f26377b6659465b653a5e655340783f6c6b325374547b62674c434b4940276e316b6e6d2a216a5931544636624b5e473a2c665e2a38567c373c212b765553756f736c777c79383f412630287d7361504c466d255a303c49266950242e5b28555e6a475e402a7a2a543c496f43594d2b4f7b413f425f627a725322655e466963287a5643657864444c4547704b515a7c284d2c27676634593a5a3e25782f22495f2338242c46355d5975374334704f21535e78394d554623284f2e71504165213a617a6f7d45555a73706a7657786425792a446550363e553a45722b69432c3b4b3a6338794c6c693e44426934524b3e6e7c6741274f7d486251466c68337b57457d376a62702a586653224d61495932594b716e6c444759663127666c5b27492556556d735b615b286b4a7224417b4c567849453134797b4e2b5f3f597a5f263a375e2e474f733e3e536e7b6a782e4340747a722e31426f633178792a4d7b763755277a2f24424d485132624c784b2f7c762f5e51686c5e3b65677663715e4d3073223824324f6e652a2a56574e7a5f6f615a615d7928696a724750635177792c675f30264f2a7532525e3f706239245a3a4b427b49355d414f735e4c644524374f5573545e7926234e407c73625f2a54392f41532a76786b5a32634a3643334c4f7a3b25712952667c533c6234244d67643f40317a306e4f247a4c47252a6e32337a64427d4e387b4e7b674e78746e772f5b21217123333c40442971673e41405943367156464b616a2656356231502e42536b264e616c3348494e7d383f3f296d72793153455d42392e21787930427874463756746b456d2f63735b507067502526266474366c527d6c775e5a396e45535f4f693f282b636935356b476349517c59447c4d277d693a41553f5f6c5473665540406a226b4a3533593144745d6f22475b3e3437697056376575254d2c552178765a255f3a4d273a28327469512757447d356471366f623a245259322f633b4a37472c2e58752b294e6f29733c48677d75702e704a5555465b5055736763707c42435d674e70414366267c4b3c6b4f364272755a696472443830246c3b2b5166646c41222a653b6e375a2a7459727d6c36432c31774b33407d714872552a455b5736446d4c51484851616726506a564f355a684858624053342830524674243938505577394145684e713c2c284e7b65215b614645787c4e543b26464422793a2277325123447c6d3147422a3a267a7a4e406937784a2b4053516a6e767173244f5921507456685672564d4e24212b3964463c24264c782e793f453b4d416c66435843592455696728347c6366373850754165523f434d7c3f4e673b4c247c6d25466e3c44687b586d53663c36795f6b5340494f72733266293b5f7c27676c3b58686f714a7a74595d24372c646d64316e3c27242961553c4437303e344634496d4a2c266d636e7957723737625d2c303a4269587d43445f6575274324397172713259256a6f62214469393f3c21615f55376740292673392c3e4269507d304258472b4842614d55385367295972657125765b6f7a486e4d5a39335d6d72423f716d223973612954273e76396c48324d393e3848736d2c3c567b704b33266d643573534a6755382155565b5b723e6a774465664070622f754739525054294e6f5f613c66343376574a5e5b5f653a775d4824645d4458503442516422454229795d7778406450406e31514a214c2844613f6d40225b57262c242c31664e2c4e7050335563763f524a7054295d393929777b42272c413f5443316b525935252b3e4e587d352e48397c41324e3375466629735126767b32432963376f6a273f35534b3c6e775e5871366c4777427326235e293c7567343c52664c7c784a6768573b33352b6c4c21497d7368584a47243579395123434227213c367d2b2a2c585746616e5948623a614b3a536321327d4f464b6c34643b7430453151745755587b21346f7c422b51555035725431256666794759706421264d6e312a232f667d612f7c674e49767d69683f2340372c3278526b76395b51712a44557a5148296a6c3a4b3477527c645f3356473124355a6f4669667b49547a3c7525387878364130283e5b223b322529582b267b3055526d684342784c7c443830592f787c482869524b2f523c33753b6265272e6d773e2961294a3679562564294c4279532364573276452139375a652f76455a7d67585e4e2e5153613e593b2f342e646e367251712963756467516d49236e5e697551633157442635495e29504c4f30565a4c645762447d3c7b5a552c75514a41702f6e4f685a2e5d6d37474442464855612b6b3e54623958713637345533324f7d3b5923446d504e5e6e755870276964726230543a5d4b772f4c4d4b7025624c4a34766539516a29562a6a3f5b6c396a332a5845792868295f52645276696863374c3b567b234a5b51694f496d7477516530352b57303467626b4824744f6e5121743978434e584a652b46545175337b31242f496a7c7c6955767a383555403079756d5b7d35627d7d4b6a307731267c5630277734452f293f506463636e344b48763c39457b2b2c434d624257673e64254326575a442122672921514f332f6a2b4b237c5d6a4c5a453c6b625d7732562b6558614c4a287c724336625278776f2259312c7352252e53215f7d5d626e2969335b42545f2469332e647d4e42656a696c4f7d5374463f35305b75464b2a485272684d3a57794b666841255d53672739573e68405f5761456a7b285b6530752923554664276a354633725d7b21414b685358596b4d773b35534627704b35643443747a5667745a3f422f2e5a3e327a4d287a7b312f306d2e346c6c5e312a6178594f23647746253b3823492b51753443483e263c564029477a5f6f79227048597a2a763e505d7d50434f49443f534f454e26623748593e767175762151674e76597776285e52412c3b684d5438445d483b616a34266178266137686e267645214a2c5a6773614c4525617a4f4170553365287c6a6c2166776227266b575b5e795631215e3b5852227d743265312b626e354d514a59476629395f26444626413b29242225392f7b4f273e42546c51702668446b492f3133402c212f41432a5e3548272f766b4170572448674f464941365d655b6637777743263f222e4c5b27767b304f3e21513244246b642e4d5865263a77496d292b62236f2544483f662f28586b552f57557346296e4956474624632143565b4463382c5026322b45504f5d5d523b40225e4a584a62284178566935756c463e7d336d477d6c2764414858317c5a367a2465592e2e7d674750654f77795a79264d774c4b365a3442335972576d402f306a6f236a4e7324244b294f5e6a4e4c58744e304e324d4f215d4e5423536f4d29684f21352a53764e783f6b77723c482a2a3c7135342438323e62312f6746587a7132414c59215a36533e5f473b41776d3f5e356f47546247314a4457582a58367376434c5d3553663b2b4841797240213e282736504464453a54456370336a4b2e2a7a326c5a284c2b686f675425283f326932302374755a422224514d29467c7b6e7524755839474972613a4234306e317870423f5d697c387b4c686431585b404c4326294c5669233f433f5f4a2c3574712961493b265727556d322b3e3824725e324c2f413c6353255622507b477579236c64297a362535664a402c2f3a6334482c695138666e722a25793a7124523657752632643b497c4d2121232162475562622e252c50436f6e593f776d597671392f5029525b41586c69544f65504e77617d7b265f4c73596c34254a335753795127706e6976637b277624517030267d5154793674662c49654f3e62474c223f7c7a6721617239594225535d2f62484e6473566e65567168723f4533315e436a51657c42703c6d395e574034443276642547564f6e214777254f67325b2848285f7d663b217d63446d6633637a765d77387d336278745075685f7b65555f284d6e545e525d5e5b386c492137335a59654f774e33785b73625b2c7450747625736242726f786d2c4a282245782924765d2e35762b7155632e2a356f4b246f7a7054234643547236495d6d7b7623567858525b45255869766c53546f38446e37262172432b40543a38506e2f3a5f2a233f26496a5b444b7559382e6c743b4f7154552444662922246c433778594765615a6673625d7a4a5d213249235254317a5f214a232f3445393b462e6e462176782a3a7d29766e4f6962465e2746422c6b5132224f4f77355a67795b3b22516d342c74726626512739754c653533423a7138634632266969645f6c744c274539452457644a683b7a76242b4539336b497b33583b63236f24494f3b62443c454a526226745a302436536f754464262a3e40512424476c56226c777d562c694c7568653427586d56774a296875554029714152286b217c456f7b62555225726a217855692b6726714a705b2a686e52326175256b7a6e562b23793c3442356e296c377a586a7350415b345f412a64223a5736227a73706a613562736f35275968554e3f4b7a527a317a7b4a6f4c2a5355282c632b773e552c50717d3075412c52763e3f53365f534f365b6456342a5a3b6c6567395b7478245835763b3a227c647c575e702e5e756d436361377877244272275f223b22724b626b7a283b63397d694f487c7728737b6c4d7734724c6840536f725e4b664e782b307762472c7528782b756b76546d5e484b674f2e30716e503948433b705030695138252a5a5e5a646872337955555b6b57264f6f5f7d2b2276664e5729244178415e7a386a2c647b536e662c7d24692c3b743c6334383124317b50592c56297146712665397c64346e367c23384d5a3a334f247b714829464964694e21294b6a3c45237b5951424632537461692959245f473c7c7d2574472a665b6d616a596677642b3223523b6c2759547a5d3f242840632f4b635a4c6d6c365e665e4d625a285b783925375572477963692e2475675b456736345d56317b443a7b6c53393544292f4b6b3967396c2b6c413a62546a4d456f2e4d567854372b4f334a4162745330372e66372b413e253e3b6d2a46566f67295671595056532c52684e4543764829704542396c2e727d52452e4a49624c3c683b462f4b373f716a33766f5b3a38643f48415b4c3f524b583e2c645532366e77555e7b5e747b30317a217044404d3e27753c70724e35286846476a566763513e5f4d236a4f56226336426e22753a2a31332a3634635869456b4b2f684c297478785b626978375673764e4850777c3a567074266e7d38782f61612c38694f2855733636783c41256f56687550474423735d39503370267638505d694935214b334d2c44505f3b67364c5237423b474f2a4448694f427c7626275128396627767c6174673e2e5637577b48736a46782b394c61413a333f3b515b6c397432703c33363a315f49667d534a4649233328702741277d794b7276354a4e336757717b552f525a246d6232563e213c7c354b7041305229313c5d724963356c46765445502172767a7d3c795928264e226238627b63374668414f4123332637544e2a4d252a2e3034654e574c33796b4f4c7c7b6d6937515e6350472b6b5e676170254e7c287133223e2b77794c2245696d4e7555245b4963414f6b7753393e3177386c6141767548563e5f72776444774b33332a214e6c467d3f35444f342241595b414122234228494c773322682c5937372e6e64732f273b2f70444e5969285d552c5270793138793b4d4e6d2e6f7350534041354c794057767d2348275f2f5870436e26543561575b5f3451555b69714736592970774e625e49495a402c26386c483521407776756e273e235f4d615425704144612359402c657a436f482626744d5364396b315f364140435e74342a2e433e29397a5f2f5e2c526f45237a4a657d4d7756306464406f7a7c4d385d482f3c72627d3e4e632674485f6b29793e695b68336230673c6f6f3e37364c364e572450266e3c4d594a6464587437216e652b4a69252c3839267c714535755566784e28226b425e43434b622f5561654b526a22563f375b273a393c3c495b27505f48394d59463f73285b3e462a677024395f2b405e406c626e753343534b332a7332583e2f455a434a553f6e40246666633445582a56357525642c2a41315d252c474d6c7b732c517d632e72626d34447b3f5a53626279452530317b5b645f256e4d5940235645295b2f4d6c5b2a793c22225274613c4d337b364d27323c6472433627566d564a6264263e7022265d4a4e663c2f63417a4d5e3e7c5b6648276f5e3f54576a70384a6d323a4f304a405b327d3a5a4f366851744774786d766c5b2a49305731533171552362504e6b793543337a36286c362359704d6b5f4b7b543070223e674a497149316e616e504b243352533a6637224c2e587a4a4d416558704723322e5f21507d636b4b7c282e4c634c51462b3c5b6a393c514525254261383b216f6e3c583530524a2f5d7a6b44664f2a63354f4c2e4a4b7475457c702247517b6f47226452244a28504c32353345247d7a6b283c3c472c6e4974223f762f68727d553a3848433b7439577344403e585d2434547b6b555b565d376f3a55214b314b362676562a5a777c24314529794e796b505e3265576c474a7d432b3863544c58324d4a61797b743b5573354e21733753366d4c4e7448412527476175732b2551462f4e492747337421563e38685b4c567964523232286f612542226b2a7b4b26225f684c72684d76684425753f285f394a38657c314c46612a586b2e4e46754f6f4732644b377b6b45483e5044534a4e71576e4955536f53566749546823515349355765444e4b5a68394e294456213264766634382c5951615f565a256f2a212f5f283045306c2e2a432e79444b7a342763417748683e483c2446272c67796b7c6a6a30403025576c5831675a5f22305821634b68382b675a45346946303c6a464c587625747c4b653a5d49506656696f5b2f5f2530693a4f314d315a3a382a6d57293b556c2c593f323a313446223076652524793174425e396d542523794757757b543974636c4e57436a7b5147392a5d4a49316e513156336e2e39455e416f737c3a332e7d6d5e44785d3233423f4b293e37365f3b3b4f3c68662f4075246f2f707d43573f427748354a7c52405b3370655b49683c3762355739737d3b436d5e7c44446c4439583c2577527b4c7d332f723e7139374a487a5d537a2e55355a632b3674344a702f3636365b576b28445236222739424363733c4a3278594458345f2a4949414c756d372a7971396f61657b2873304c7931733b444d245d6e294d435a79687b354b465256795b3c494349523e475a35767637657c6d753c37435b292c3b4b393b3f5f5961795722653426394a6b5f6424744e3f6b746c7a303a2b5745336d694c23684d6d5b3c615b3a2f3b6873535252695d45537d52743b642367656c225a5f545f48337d74702c3a64612a3c432a4f2e507b3c5066344747504a5234454342723b67757d4b45313e4b644b505f53286a4541582122366d69453f362f64394b442a26787d475e7536615e236c323c21714e6b5561516169274d444b73304f4f59662e442b3a56502e3b374927727072405628585735354e5f3366456b63477051513c494625495b2b374d234b567b575b224c28414f4a376d47235f7c5f726779766c2331733869575d34473f724473264c25426c5355672f622a413f56482c5e4152516f21313a745b3a6d35285761703566327c234b4275767432572e2a7d70586f3357294b656e3c263752642c264f346c223453597d406226517b31674a24463c484a5b5d51426677232e6646403b3a52692934493441377129376a225f75757c4656615b485b35424732316d7b5a6f4d4e355d7742343e514c2b393f41555d4f3541554c7c40545a7364794c56217d37625e232a57615f68322a6356414a4e72392b494d71423c222b695a666a5a553f6f4471424263694a2e752a226f3f567b7031427b56353c23237671314d7357245f7b413f58413629367b236f54337a2b3a5126326b4f6f792c343735697b517d4d2b5373473f5a415e6b547770287d7761405b35472722243941577022762c4063587a554d4c557c27327b49783c48634652276f5653226b746a7d273a5777286255514e3b7036584e542736722a4452636e5a44653a5e376d4f57693a50226b697333652b7a6e543b475d5865494b2f574c7b5869692a414352426c6e7b3126397847757b535f5a427c764c41513c5a79753862574a68702a7d2e3a5d347568792547753e304b4e51274c7267333f78676d23487a3c30534b74303a70633a2a68666179476f7d5e223f492322534f404a757229695f4c616e2c614e3536465b6e707a456d5b2941702c2445727c5d23254e7a3b3e732c674477304d32582c487d483f566c7a6f4a783b4a3b454624517742543546296873265e4e284c6d444f214f474b5d263a287d614d7b6e6341475862386824596f375d3142653b7c225a2b6a406d425348636c4c764e6147716e755b235958445d517a2a535258295a3e4467647644427a4e6a6c3c4d433078363c4e6d346e2a50586e352a35582e74225f5d59435e4f40474c727b7177675242582c776457277c444576304a284c6c4b25213422256268277637277b3c7c442f657d2f4c7c7876487b30732c373722745d3a61294b4d33363f43536a435a342e657c2845382663507d385f736c675d3f6d6574704b4b7c7056267d6d5f2f2a474f58424d582a5b4d564d556458274e7741224b7d736922392a78476a5a72357258556c2f39597b693a632f4d4e6f4a746c772230452a3f5841576c282330287d2852442e485454734d596b37275654374024323a265b6e556d4a37754a23566f56306b72704f2b64612b393f6e725d5f3921523e6f7551504c4e747c763f705f22285d7049423e3b48444e5d3f442271356c30232c2a433070317345537a676f34745d634e7c415b615b34472338704573487134703024336e5d3e763e6b5e293a7129744e2a7a732c6c483e726d3f6e2a6c7a2b41692c494376546921767d34652125414156506e244c7d6533325d5f2f2965773c55796249697d57556e7b7a47653924324c3f772b3a323e565a3b2f4f7348524e796238677a6a62742b4f7c4e333a5d5024267279274a3c5837246a71757b6e564c4665536f53334a7529774e4059702f5f423b4279294f4d70662971783b2b36486930716669284170283850596d662a68727a547c3e6a763333366e4358426c2e6d7d445e45252e4477614772742b7728402729215f35304979633a4a49757768764d6e314b4a676f5e3b3954486923326d6f3a703671697c66634d3e62452b40713f3543216e37757b5753314a526273666d57787c72774f25595e584967502c617a4d74623248473c65544f6345673f2b6763363469462539284329685d7258666a613f5f59727b66742c44686e306441266a787533776b5b23692e3476382b4b364177553a264c5765432b246c3b6561506c7a324f5a312774232a2b3c4c615046262f6d444d536e4b35505262785358726c3e50543a7b31726f396a2b3625385f3f33294f7c72504f21495d5d617535524679435d33617a6247665d4161555d5d7b2e57333a667346226c4a2a4d40665a4047544a5b722e752e224a3958543c274d734d7644773f462b3a4f793033436e7a6371743f49396c5e427d7051572822555772265b535438583e5746482e7759594f662c5454735d306550466230435a6b275d33336736342e4b405871313355512c243a565b7a2c6a706c6d744326397d7b273e62774653522121307c39306c6c455a366a73475d2175266e66495b626954393f2c472f552a7c593f43692367332c46585b656d254b6676574367366544437665352e3f737b6370213549223c5b3b775b506f583b345d3a68295e264970573e236c395d3f5a7072547774705f54246863233a6d423c7c6f294d2a7b453f6f2a65676e6a3b343c38653f442a2b3a26643f473c616e6f5a7b716a245e5f5d5842243f783e71784d69453b67675d3264797235707d31554c6231582b7b6e54594726224e4b647d763f7b2f7b526c27562430717d2b476b676f21554f577b396c3564373328637943214a243f475f463f4f29273875264444545e423364433c6c344f6470793e613a70476f7162525075774939362341584f5571745d622777576e696d414e557827477d3f644959357a4c734a3a7a353a3a28246c4b234936353e62527d67386c4445246c47222b74264a4d3151214631472939514f7156686326552f5e502a734c5f256824233b216b562b2542475a412959793f784a3f3e657b515573347c4c71435a51373b297c5b336464562c27364a404a6639735d2a31582b5d236d35212464585b5664347b537c6448265a40795b4a3c7156412e7d2365507264307447227d2b4c64422e5726466141775f57222b2472505949402c3e28776e536d72792c627965213f6574463c3f7c342270366678595e7737597b78374757432b7a72505e7d62397b47683431642a30466d5e744c6e4267616358325b6839267170567a32712f7c47397946342c4569707461312e575621726e6f216b264e2668593a566544305058394435496959756e6e564f5e3e3451386c25254350504873547d7b4d2f62462c49544048586738345a7430403567553c5b5b5e74402c215e252826655a4f4b70305756494d425f313536405a3940437a393a2f692574624e66236e4d5a6b293f2a443b7d6b4f3667233130326b2e4c48666c502c4d227c744c2e43656d4d5a6b586f3331224769564145493234437741463e64725229757d5576454d74372874574436383651404c445a54224358646c283a58334f50456d274d2839685451286c2a5b2a3455756f312b553c6f47455a662556422f29422e75423272704757293a7673673b444c5f5674505e643c6a675d387b3126417d383b4b7363674c42685e3c647a56336f24597347296b632b3e793e414a78726c654e22312e5b75566d3e432478594362503b2a5f554343282b6941455f5368654b693a553a277d53672f6f45736d3529612c5448287a51253c564858295b4469487d75505730454b386b52232f34446f775d6770232e47364752234059442466447939357570223a2761404d36707d2f4a3b72674b49366d416e222b2e4974537b5946563a3a2a513b506c4236342421334f275922626c5f3c7b2a6e2f4c4d5354243a2a314348643e377a5133264a5d674d262268673c7d3a302a456f4a6b306a6145754a5e2e6e5f21345f5a6149566d6432525a49732962754044522643566d48442e4a2e67462a563f347a6e4532473139516455353a6f2f676e5e51624a51754e4a384b2f225b675d737671504f5d6c5f2c7776507d54453a457c664d415f476631525839694555323a795e5b5b5a73406926664e25285978615a28482a7d775f2f2a2a6a5e40753f663a5d2431362425687b557740413b52612f3e463c46525b344e423b3f6129317474312353373930664e65407b573c756747504f3458714b214364583a413947373b5074647851784a25687a5a356933367761407c742f7d233c5a64776d31782c5a786424754b54223979316c2c497154736a662b3e232c6a4e777341412240724b374663633938775e68766d3a3e3e5268384a7b3b76404a7c6b23297b694a5f655a52304d5f307b675b6d427724617443506163356446536a32265921425122542c384b7237537958404e2c2c6e5d7c6553514d75674f626c334179713e58775f653c4175523736323a376f274d6f4d7a68222f476367436c27785267553225444e5f37277d437c61726550335372516641786b23342b376f6f4d326a423b266b715963447351547c522f763b48743e6e65282f6775365a3e55657422362479475857264f5d7c5f5e737552307d68763c285759292e634f486f7a664b3f29766f3024785d773b524c5727734f47717d7b6e6e5b554f726f697524224e36234f462e2c772b5f4b71427474382b3845484b794954236742306a72782469474b4943693e452336477d51687054736945627b5f6f30537a5334732f2b26296176786f684e5e324942473141646a6c3529715f5d755365685f41547652366a4e2c3c504e212e52747b6e4643785033266f3a4239407042422852417a696b726e4c467b673b6658355b75677b213c543e784634492572662578482247377878234b286d3e56614c5340344578232965613e48246970573a6f4857213574544c795f5040777a7847387c362565656d4a59792332252c2543315a6675224a7c6d7041574f3a5238754b685b5f61532c542658783a37533472435e616171244a645f3922794f555f26592a64576f5041576a515b6f464f75702c384f722a44646b665d3b5d6b23673c3f4f447361256832494d3a4f3c2e707156712b466c744e304a697856265f2b507a4b69482b766b545324786a3f296b7868773676297a7b505f577147314424673b6c455e635243386a62747479673736674d4a275f7b34633345307873586f217966766b4f6c28775267253b7774485d214f6140213c747522252b705a42405a42494c67546b22682b243952322a5b6c653230795b6a616b792a2c4d4d524b3b5a3e2170483b216c5b427c703c435e6b44486b5e3b435e783b6b28573b3f7465717657713a257224586e4958782741236a63773c79574d5722266e344171523756627c313a2465576545634c6d722f7c6f697c5d313940786b55707c6f287b642b36697d423a45554a3c41365d25624575463747332a4c544f21254d486150722a72744c77394b6e373f716972543e504a4a6149765f516d73523f30714a4f5831257242337126744b22664d65394933475069366d52667a3a29762f3c492231687a49427b46267536712567517d25425130744e6d74416e34553e683a677d4b5d503a454d685e3b7045462578724a6e533c765a76235d58432b2537674a7a2431227b535f52326e5667682e67236641366e4d395f63592c7b44433e6e4f6b6e22413c793e3e26717c562a36512f5a235f322f5a2453473f3e5b32655626696b3e2a786b52557c65324a615d6c6c7d435861364b22244959402e795d43485773753a2851754e3b754f62285f45687b7b77644c7a6d703b4a31663941263533523c4255354a712359445a614868476d4e436242754c594843722c594933407c57255f3a2a3736252f3731697374426c7670216f3c55564750715e315f2e3042655f7872443f2165635757525f22267d792e5a2e27235e324d776a73483f456a68762f3b5272362a3b764b3e5d5f695e3c35466552254f44222c4e6e314638265b5243593b3649633f556d483e677c6b413b72293c615e4b2c3e687875447a3f49382840302b686a477b31677662754a4c75523a677a645a6f7b3b4a512c4b3f572c51796e2c643f5072724776712b492c743147323c787a452f57787c49722256552f7a333c5956306d706e4f26663a4b274529255a597d562e5058434c75677b2c512a5d595979532f2a2664693a2155442248652b3f6e2f46276456465b67777445445842356a2f50435f73395e31622333354b396b722338345e2154477271527b797975435d6e25255f5b535146234d3b5e7b66376d3a5949306b50777a7d525b2a5f76475b313e4c2c43303856337b28657b65224564726c572e367269585e65677c6970255f343863282b3e6258335862334b747a2f4f26646840623c65215e6c4d45706630495d7a3051407c46265d4e276470482b7070213c317b486f4d4a52362f66592e432479507d2e2c7a623b6a3f5b794023612b2a3e264f28592a314c282e50774c7c69513c6f30312b5e33387a442b32285a42506e752f664e5064566c237b7059614c633e6b515f4c292e326e364a2b535837364d615257296d7c362f255b34613832375b74477533535f2f39366847486655496b413f6d3a216a71484f7b42546a62345e332235213530555e30696c547037574761647673657350503b416f33454126464e2e7646736b695a765477484b5d2f782b4a3c302245363b434962793454257d4672235a282263725a7538504c626b65483c7a67372b58554c5b662f6d5b3a257d5f664966376c6f36512b593f48215d4b332826466b7a453656535869663f3f386347443236352b3c2a5e314b216a3f3422434b676d2a6f7a7a432b7427622341727059585931385645503b735f554f5b3241537b342c63373126356879367a24432545645a6742745555285f336625636549343b764a69307a4666216a3753275525316b6f7922587a5327664a6d66624333487d267a536b43236a65332567684d7c7476372132316a2a272446302b234e772c21277d7752213f5f5a4c6c785332334d336151366e2f533f43642b693b7d64722a245279555e5f3f454b4f45662f30303e68685d3e4572754f5d672e6f5d7b7b62743b2374346838577c685f7627572a46386e4c4123672c78504339722b4447213427544a3443427541704a514a7b34567a51666470565e505745686d2a3b4d6a29354155532f6f6a62404c2226385968794c70514e532e65446543372c6661426f4a616b2c416b416c3c2a752e4b6e5b41707c225a763425752779462b5a304e6f794f765d652a6c522e6b6c487238465b47792248737759316d6227233a55307c40353138513472286d51694e2e5d667d4431566e5e5f2a6a744a712b7d4e6c4c5b7a304c766b5a6f4d3c584b757a577c49574a5268233f6224254448492e6c4938224e776c29435a744754765d5f4367403b395f7b79455628236d74292b5323494b2824564b4022752e4279225779362f375326257a474d32265974263279484f397d403426494a3e5a503173502769432e7831616c7b3a7665484e7a5163674373366a34306177645f6d616c2a4a43364079663f755f4a2f3e686f2a7d2b3151532f6f3f524a2a3f365a7c79723a724d32497954652855396d714a644e41754c566a616f6879266a522434522f2329287c2b437930735a57682b2a6d4e497c3025754852513e382c3b3a522f415d685e5e3f43664e43545179665725512e6f6d6e7264373976732e44337349674c254a51725e40373671687d5669273f3a707a29515e322140634e6e6a5d4669593434683b3f3b5e4d7b7b6f7d306e394726654b227627395a726553577362742877727c32402e3e4a7264374921327546722a52737b7c772979427d762c6c263a3471742c4b5e413f4961714645344545736b5a524643467640292a5d77717928744a586a5e777676624456683c45546a307936756741722a316c4e3465782344507b2e426c5d74426a5d367d3b4c383e742b7440406c254a5f6e3a355979475371297737297b747b6778443e463233245466314c7779565865302235636d7148673c494443446851463b6532275822532e762c542a692b685a294b2670424148223140512569562632347963426f53303025372c632c6c2f232832745e5f2c3f6f4b5040437b72575d50542439246e3b5f282b385a40737363293267333a544c7a4f6a44732a426e4d3a6e2e6130254052646a51373243754e725b79752558696e5e474e7d2c222c472b3f4e77616654566d24486a5a545f3a43273e696b62233254514d583a3374766324642c40243a663e66375073304b5a742a745d612f3c2a655b6a5731633c4b6746693b46614d4069234979525b7062727b335840384065772e4638386366665a4f46272e3b70404f5f5f2b474668367a3c7b7076284f214b2e285f695b3e23725e49637a413971692e71316d70254f5f415e2975653776247d69543f5e49573e4e78577067357d432549746d3768796a6559473657282b59704629383479412554442f726a665342255767425a594b63563f41396d74486c52212a635b616a73626d3768456d4634774e586e486f56473167612a28772925675b6e4a2b4a3041675f2352675775505d7c706f6f43317d277c64573e35336e6e777654466221626524787822783f7748593f774a4b753c37675345304c37617b277d5a2a50256c62557b3046684025594774492e7b702543566c504166596b736c6424767c7437555429266a2e797a345a2e4040576a76464c5d3628792f25655f3b72376437343843377b4f3c4f686e5e325f3f50393352682c6838514252236576707a3234502c3124514f464051527d6c5d3024294b3e367763754e306f3b53764e2348475176257c3a285d72507b2e56463c7b31736f403e2366214333735b3c5f4355677a7672385a5371713240233e48584d51246c6f537733414b677b3b3f3423502247546e4e312344397d4d5d7653736540706755572e7821532857527d297952312e26593a2c6b247b2453523527386a5f36776468326b7a7568737957563342647b643928752f3f4269385169772f7130575b264a784d252a594f3f774363337c505a716c313669215e5e6c58794956786f4d33502e27353f294e337b212b5e6e754e614564383774237a5e5b7a4449476b367437486745437367326a245a302527256f6e7a45757b2932393c767335236c335b716c34612a377d244b54623c412f7c76253e355840454d5a627d2450657348797b522358296d6479237d64706823264645417733463e25392c4f645928383e577a3f45233c51275d77526d5d4b526a232e45282172572b2e32342978713b7a7b78792f2b314e6e4b363f77317751417054333a383f512c54237022382c663b216465635d42624b367c48462f4b543e7a58725868693e3530295e5868465f6577392976363b624b7a344f244d433b526e3b39783142616f6a707b4c536a473250332e662b654d7538502e43352b5e6c35217d3f575d5e3a4838736878597b56392e6e61386b2a2b5e3e39584a713f392f4a2e7a23402f40417655387d5537293c4d586e427027405d274d387828625071713c672e4e714222272b5e3039732e3e573526346e2f307121705f3b39212a6d2839566b576a5b744c4a3149237174753b71554a3b342a2835526c4e4230434561443b246179374d5272553174687a3a7367454b22566171622e243b323b3a775e2a5743506b265159342f334630632b56446b54226f4d5d492452724a3a4867586c793f295e3f50466d5f57674a3762582522364967424e7c752a3f632c225b2257323342753f7d4a6135743a3a35403638514b3c76452632312463615438572a62222e32667d284c766b5166437138745d7065223868656d4d4c4c59574535584d6f284d2f3f6e7a3a3173292537453c352240775a322840273f395d2b422957515a3257457d6231536d3f395957375b41695e43745968356f235e24575634386f3742612367564d23535e36697762336152277a7a5d253627796233375d47404a644c5f265d6a7c7652675b5d2e76757a6976367a7c5a672b2a3645683c6a237c6534307154692c567a38417d42515a253c4144556a274f49402c775d643b4f576d3a793f70327041614a743b6b294e7664396d3a2e37776d2b47384c5a7a74266978232b30482b6b243e4c713c5d5225507d243e77735e277a4c7a702951585b2e3257535e6355303e64705521276f672126575f6d3a4f553472465a2f3a675078453b3b5a4679444e3e6c7769692e444c3b3938215d396c24326c35644c6e68274c5874453e225e6c47636f5e754a7563722456564b737179296b646a5a6d5149582c417878495a624879494c5d5462382c4c3b6451694b6a726a357452567476733e262129424124384b7424515738712743705054762772345d4657627347214f51526e51622869344e4e693736777a514f2634212c2370333b3376354142597a6f762f2b415321722f466a4d4368637559694f5729353e34272769773327723f5441783e69505f6665325a4d5671762a224c5d296f4652755d39673a6837267456312c495b7323327c6d54442c35574766532877414e2a6f59267a382b625834747b354e34405258212635276d666c704d72642f495e275a366e5a434758467a2e404f6332375b51407b2677484539262729537b5447503a4c786d7c27346e65544b5a2e455854527a2267362b7b6a454d442637433665542635354b65635a5658664c47687a54592424575678614f6a5744616e364863644554374865274d55485028303c483839742936774d74364c3a, '$2y$10$7XPygLsYaMAaRQftGbQqweCFfq.WnCRlX7U9izUV.ZesxQtxA51Ea', '$2y$10$7XPygLsYaMAaRQftGbQqweCFfq.WnCRlX7U9izUV.ZesxQtxA51Ea', 1, 0, 0, 1);
INSERT INTO `users` (`id`, `name`, `email`, `license`, `password`, `hash`, `activated`, `admin`, `sudoer`, `trialcreated`) VALUES
(2, 'snm', 'landlord@gmail.com', '', '$2y$10$OGc0ZISIagXpomtPGcV1cusCWDNWB1LD4NSSMV.JQE3DfYzhzB0HC', '$2y$10$OGc0ZISIagXpomtPGcV1cusCWDNWB1LD4NSSMV.JQE3DfYzhzB0HC', 1, 1, 0, 1),
(3, 'admin', 'admin@gmail.com', '', '$2y$10$Nb3eWtef7Adkxty221oW4e.zsyXZth2PxJtTPCGsDNYRA1VjIbQFO', '$2y$10$Nb3eWtef7Adkxty221oW4e.zsyXZth2PxJtTPCGsDNYRA1VjIbQFO', 1, 0, 1, 0);

--
-- Indexes for dumped tables
--

--
-- Indexes for table `goods`
--
ALTER TABLE `goods`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `licenses`
--
ALTER TABLE `licenses`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `payment`
--
ALTER TABLE `payment`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `suppliers`
--
ALTER TABLE `suppliers`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `goods`
--
ALTER TABLE `goods`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `licenses`
--
ALTER TABLE `licenses`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=121;

--
-- AUTO_INCREMENT for table `payment`
--
ALTER TABLE `payment`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `suppliers`
--
ALTER TABLE `suppliers`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
-- phpMyAdmin SQL Dump
-- version 4.8.5
-- https://www.phpmyadmin.net/
--
-- Host: 127.0.0.1
-- Generation Time: May 08, 2019 at 10:25 AM
-- Server version: 10.1.38-MariaDB
-- PHP Version: 7.3.3

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
SET AUTOCOMMIT = 0;
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- Database: `nanotechsoftwarespos`
--

-- --------------------------------------------------------

--
-- Table structure for table `audits`
--

CREATE TABLE `audits` (
  `id` int(11) NOT NULL,
  `company` text NOT NULL,
  `employeeid` int(11) NOT NULL,
  `orderid` int(11) NOT NULL,
  `settled` tinyint(1) NOT NULL DEFAULT '0',
  `amount` text NOT NULL,
  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `carwash`
--

CREATE TABLE `carwash` (
  `id` int(11) NOT NULL,
  `ownername` text,
  `registration` text,
  `idnumber` text,
  `status` text,
  `washedby` text,
  `cashpaid` text,
  `contact` text,
  `additionalcharges` text,
  `arrival time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `date` date DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `carwash`
--

INSERT INTO `carwash` (`id`, `ownername`, `registration`, `idnumber`, `status`, `washedby`, `cashpaid`, `contact`, `additionalcharges`, `arrival time`, `date`) VALUES
(1, 'STEVE', 'KCY205Y', '34556470', 'COMPLETED', NULL, NULL, '0702653268', '', '2019-03-28 12:33:56', '0000-00-00'),
(2, 'SNM', 'SNM', '34556470', '', NULL, NULL, 'SNM', NULL, '2019-03-30 08:34:53', NULL),
(3, ',MZNCX.,', 'X,ZCM.', ',MC,.', NULL, NULL, NULL, 'MCN.ZX', NULL, '2019-03-30 07:22:00', NULL),
(4, 'SNM', '121212', '121212', 'completed', 'washer 1', '300', '121', NULL, '2019-04-01 19:00:59', NULL),
(5, 'STEVE', 'KCZ 108 N', '34556470', 'COMPLETED', 'MULINGE', '300', '0702653268', NULL, '2019-04-02 16:41:29', NULL),
(6, 'SNM', ',MCXZ', 'DASF,', 'complete', NULL, NULL, ',SDM', NULL, '2019-04-05 17:53:27', NULL),
(7, '', '', '', 'complete', NULL, NULL, '', NULL, '2019-04-16 06:20:42', NULL),
(8, 'STEVE', 'KCD 567 N', '34556470', 'PENDING', NULL, NULL, '0702653268', NULL, '2019-05-02 14:42:00', NULL),
(9, 'SNM', ' MBNMBM', 'VBNMBMN', 'complete', NULL, NULL, 'BVMBMB', NULL, '2019-05-03 13:24:05', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `chats`
--

CREATE TABLE `chats` (
  `id` int(11) NOT NULL,
  `receiver` text NOT NULL,
  `sender` text NOT NULL,
  `message` text NOT NULL,
  `time` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `readstatus` tinyint(1) NOT NULL,
  `chattype` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `sales`
--

CREATE TABLE `sales` (
  `id` int(11) NOT NULL,
  `transactionid` text,
  `cash` int(11) DEFAULT NULL,
  `seller` text
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `stocks`
--

CREATE TABLE `stocks` (
  `id` int(11) NOT NULL,
  `name` text,
  `subscriberid` int(11) DEFAULT NULL,
  `current-number` int(11) DEFAULT NULL,
  `initial-stock` int(11) DEFAULT NULL,
  `itemcode` text,
  `amount` text,
  `category` text,
  `image` blob,
  `price` text,
  `supplier` text
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `stocks`
--

INSERT INTO `stocks` (`id`, `name`, `subscriberid`, `current-number`, `initial-stock`, `itemcode`, `amount`, `category`, `image`, `price`, `supplier`) VALUES
(1, 'TOYOTA LANDCRUISER V8', NULL, NULL, NULL, '1', '2000', 'TOYOTA', 0xffd8ffe000104a46494600010101004800480000ffdb00430006040506050406060506070706080a100a0a09090a140e0f0c1017141818171416161a1d251f1a1b231c1616202c20232627292a29191f2d302d283025282928ffdb0043010707070a080a130a0a13281a161a2828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828282828ffc20011080224023403012200021101031101ffc4001b00000203010101000000000000000000000203000104050607ffc4001801010101010100000000000000000000000001020304ffda000c03010002100310000001f72ad2beb84b2ec645d800ea4122a5ab1b2dcb7c1cba23059124b4a922cabaa95249249524a9682f0a6b8b6ac164a4989a1c952c512aac9665d5d125d1572e2eae1254b2aae9681800dd086050ccbd2b320695d2ce18356014a91d9a2141592ed195430d0d1b452122502783cb2b2897212e512a424528d35744baba82402fcc7a9f3f99abade13d4a74b9dcaf17abe8f67861b7ea9d1f9afd0e420205235b20aae12886a4964aba892eaaa4a201ad0065ad9044b5da80512ed96165ca224648ec01522d4f48b17cb739d4353034c66b7c059445dc9171368ccb8bc99ea55f37ad4fa1747e49eea3d9c4ba6ae55d40b089974d1e0b9feabc4c998693d346a8b6b47b9f9dfad98f7e2b9931b95b4fb59c1d58d4b1cc6aaf35cd4f667f36da9efab95d396c0aa972e2d28f9f98f55cd55d36c5318c156ea152e5bbd82d994a5cb0ecc4c90c86e853e25145a2122e489cde4fa2f052278567d3582d36aad348b3e85ebbe1ff0046ccf61302b37a21cac877317031f6ebbfcb7479ddf7cb4c9e5e4cce32c5f5396cb3db767e7bd6e9bf78df2ba784f54ee175f39d230531784e9793d46e1a2d56e06d1bbe97f2afa0e73ea1397566d9330c21187b5ce15db3b680990542a086e0a852dead949154d82c1e099da672c2964a2a3189f9ace7d84a5eab3c9f73c66f5c4c0c26f3e64eb6716eca165fa1f35d76baea40e4f19691d9337a3a7579ee7fa3af217e9ef9e783a76d74d640ea324e3ceb736404a8386777aaf1eff3f2f54af28a975f15e8e996f3f6a2cd189a30bf45e79b27d97671070e8f9daec7383adabe969a96d360d2d8100502c2970ebd10c0dc9572ee4a03000c4c212013e17d3fcf333e8bcef2acf5fa3b7c3d39bd7db9dceec723cdc9569d5c397368f56b53b05afd1d39cbdb8727310cf3f14717b9c657757cee9efd3d9eaf3fd9efd322b40eed03d123305f0f96739e6e87938ebd625233768e87a7af87cddec7cf9f1ab699ce57a5e4187669ea6f4fe8643cbd9ebf1993872f781e3a49eb8fe6bdb3d8d55ad01016406320c3b14071248148121d798ea49d3b145b7e6b97e7f5bd5e6bd07075352952ce86be08f4df79a8c3e8ecf7ef1b7137adc2b4d9b38c7538fddf3b8ced6e4d3e6e558b70633ce4f4b90d5f578aeedbe9f5bc89eef69fe70c3c8f4f0cbbae8d18c19aa27af9e7ba7eff00469c3d7e56f4087b6b3e4bbcc4b16dd56334717193c175e1e3998bc99c0f5118cf65ee7e37f5699da356b66b907172bb4ca28ab912ea5cbcbf07f50e7e31e395cde661dee6e7cdebecfe3f7b899d7538ba55be4ab02cd640774db357317bdf47abe52cebce23333bbc226e66bea21dcf106e957c9ec673867ab15d945cb5c79a48ee9277cc9c1b42aab39ddce673fbefd5767e71ddedd3b6df31bf68be664e79eaf6fc4f7a9f8e65e1cf666c3d2e58c3b7154d067ecf2e27b6f13e86e3e8d79dd061699591513d441b2e544bb08a7ccdde08e785fa3efdb87a772bd1d3cb72bdbf230f33a5a9e1e7ca9763c8b756bedd11877e597345173c37467ea8cd283cc7c544383160dd0183a1178b5d8e4ae7d6aebc1492e6eea0506cae57579cb89c05bd8b9156b453d7b3afe9c737b3ae7f2be9383cb1c9a71f9b86703666a11a33433a9c9e927baebfcffdb666d46b5499e14af576960c9081a38987e63f42f9eeba7a81c1c1f676d78c793c78f5f779bc51e8396bd57583b43d8edd393a97cda42598b86152e71c97a3e17a0464bb458b6855305682b3ae81c39a5d3807ac35856816776046528c2a2b3e909384ad39aea9acde83b69373b3abe5d5d35da2e5d5ebdf779ff5be8b82b4f3faed7c9eb69e38e10f4d9e0f3733d06244bf45ae575194c64d5efb16732d25b22eaeade0fcff00e8bf39d6ef0f2fb9acf9eef73026f0b2fa0c231a5d4ded7271efa6d3e6da8d3273036c64dbd4f3829e8d1c215ec67e75aea528e518e75d62be8e830f4324975c6db9299011c5946b74e7c8df584d03074f2daae9664b1d1e5f438d5b21e62c11b65cdeb7c7f43aefd2a74afdbdd2fe57564c98a3f8e73054f271f6bdce0fa0ce6418778ee9961f9ee7e27b21e674f5799f34fa3792edd7c10f4ba939f3559716764bf4fe6b597a93ae17a318cd357a3437cd1ecb64e0cf40db3ce1fa538f36fefddbc47f561cd6df125dcee3f5af66c53752f93db5671cde9715b275aaad8a9509575250955ab22f59d75e253e838a8bc5da2c73cfc82dd2f2fa581e5986a763e8f1b3779eab279a6c9decd8150c73d7c71f4bea64d532b9517d3cba62d5e35935a38ddc4f4d64ac3cce9a1e2b36679f0b6613973e8ccd36f2f4226a8c21d1e973ddd37d1957cb95d8925d8da94ac71ab8f810ddc2d6d875b23a5201cf7974716724e971b66cbae6f4f86e97ab2ad9837555750d5e93cef77dbd93e77d22fa6bc4cf55cff271e1d4be5cf4e021959d7c5dbefd11cef53c7d5f37661e6e64ca15d7ad4e97e8dab0bf3cae2257b3b024f13c2f59e335d7d11663f776a4f51389c3cbd6c56703a1daebc9e030fbcc89e047b3878e11df68ef7b3cdfd0bc70d62d9c395d8949638f88d6fe651b61a1cc6c742ea5ae8ab88e7e87816c734af705466115eff0bb71ae775381aa5ea4a9732481767cdfa4f574edbb2a7d5d985cdd9271f17abe678f8798cfd7c31a3632bae9a5d9f2392797d4e479798b47435b5b9f5cd7ba604710830f6f0a33e7be71f50f1dd3d3e6bafe787aebe838fcff007fd5b4a3669ddc4de73f8f3d08e970339cdc952f13d4ab0653d87817e1e58f43a70e8e796f2b2656ac4f6368d6577437756d743a5cb60fcdf45338975f3727217de5a12a62f574e76db9f8de871c67e8f076af4a55a62f4dc0dde8df71d9b4fb7be4ad5cdccf43c9ddc8e3cf4f96dfc5e73d15f1f4eefbaf13cdc3c710a9bc2cd3344d1e9c5d44f5f427382a325bedaec59e365d49ebeaf01c2fab7806f1fa0f22cdcf61bbccf6fd378daf0e2ce7d7789e971f962b9d2f960a47cb4e1b976f2064531da9a1b29add4bead23de923d2d9e33b61b7cffa9e87ccf9b871e169e58c047d2deb9bd2ecf4baf4e227d471f5ae5decc7e7e58797e879fce0f47cff0046b766d1c6d5f57dff000da7d5d7bf8bd5717ad9caef65e58cfe37673fcd922b662ad84e9a4e93792c6c9dbe6f6f18eb18c983812cf74ba9661c7d3e6f5ef599c7be9e0bccfd63879d78a4e9c7986a756b0b4757030a17e7c84e4960dbc56b7deb750c5aa97657aaf3be8778ef677f1bdbd181af9f220b859bc1e6d3ccd9d9ce47a7a799eff4c2eb72b9e7466d18733a1c0eb79ec6595738f3e660f43cb6d8bc5ad542e2e9ad9cf33065160bb74c6859af556661b2b39d514dad18c9f6399d598e8ca9332487b6bbbde538f605df289f93af61b60dd61f25ef1535f2acbf52f398be4b6de898e20183036dd94ad054dd532ad1962a4e2d99e79c74f1ef3f78af9d7d43d9d8fcbbfada89c3afcc6207675f96b3daf3ba13b757f8cf499333b1e27b09e5867271b3cdcb5c298c8d1c39bcef47c59b03cfbdb51cd4b9dbb596893914d1214cda06e01e6ecc505cc47f7393d761f02d93832df7b216b9a15ab337583a3577c89af375e8b3197579b4432f17d2639bf9987a9e1e72b87241a874bb225acfd2bcdf36eed61952369b8adfcd1d34f63ceddcfadf22768dcae5a6ddfc466ee9ed7957c684673c4cfd6e63b13d1cf3627a14718a5e8e64b9acbad6fb746ac5a351f41746255034fd32667b2b1140410bd03ab267430edbcd8405acdc9337df989ef159b52e6b3dcbbaa46996f16bb1937d305896f43462be3f8be9fcde098d1008b54aa69de6adeadb5e985f97ab061f4012f970f6293c2e6f7d824f1e1eec97c0d7b8a93c34efb0f377e9da793bf4e83835e936a7923f5076f913f5a84e4e5ed92f95ad5971cd9a10e879debb336978e6558dc286ef251be8164ac9dab3bb5cda4b2d64e487d0cd6c6654b9a4ab52ae95726ad8dc84e6df56f153dd4ef5e37cb7b5f29379cb54942d859abb65ae7d89dd1dc6037d19581d0ec8d11898c5481806b6e628ef301a9500ad092f13d88ccd756e63b5c403a8e1e6e965e38bd097666b3a2b0aaa010dd19dc632842a900a1ccc7657eb2e62dda850a59f41259ccc213cd1974d2d5a82b3d90eb55251624270fc7fb7f173a229a374070e684da79a26c765de5762bbf0e2abb335ae25697dbcf9ab3da85ec1103a32545b18a39b5247e39644eb28c04d71811d5099e7337364f288eaf37909c0d91cc1d229cc285c3a85d32a174da644493206ac3d1dc6bc1bd3052e57ba6acb10a12f270dda8491694e96e5ad2ab550aade6787f7fe0e6f3936e6c5c473744cbc50a3927b1b95dfcc32c5255d2d494b61629326a0b54ad0c5423561196fce55354653bd10b43940ab451c7e1fa8f319a6dad59add0b75830aa068a20c6048204a44a73e8ce9bd04ecefc88e5ea4970f6e607ce346145332bf3a3129a832e96a5c55adf2b9de1be85e2275c36cb9d2990f36432c962ecd9c7ae207fa79ae10d822740cb1a1841155754108546884a5b025b51804b1808108b0628479feff001b15a54ccd6396eb9bb65ccae1822d679d6f9a8cd8db3ad9fa5d70e751f5e76547550e49ed6f362c5eb0f9d4c7737f9bf41e6ebae0cefc8a4ba1a2a519705f8bf6be3f3d79a4573a8b2d99928f2e25734d79d7b8e9f2bafe9e0b16cd122eaace3a2198742c48eaa30dec13156f239abe945e59efa39e3bb3c659b005236a639fe7bd1f9dcd2693246695392c4850577ce95dc3773b3d274aba7d717a85fdb993299730e455ccf39deeadc9b1374ccdad9833787d3ed0f89d8d73d379b4fa394ba9b904a0bf27ebfcd67a714caf1d2e063c1b81b7cba221a63d8773cc7a8f679c64ad2a4943455152a1254286c6a54020902d0dd40031751774a21751cee276f8189b48091cdcd46a5f3b939d3b3a366768d7af4f4c0bc9de8e54fa6a59c2b2b332b14a6f923d763689d3a139b562f277af47c3573dfaad3c9e9eb9e88b3f4f22952c9c0eff001737808766e5df38b671e810d08bc94ee97d47adf29eafd1e51a29a8b874285d4247452e69a04453a84568033d6815ce1a56293b81320eb588070471bce7aef119d7617cdaceba39813357974eace93d0ad5e9e02e276f20d366a0b2cf52964ac07a16ccd18c96284172bdd8b446bc1d6cbcba73dc25c3aa7a88566fa41c0727459cf6ef9ede5313bcf97bdd8bcfe840b306accfab5f498756d7dc5fb1f23eaba723a95bcc9545d4a895625d4a284a8a121280d64121046c40030004c570fcbbeadf36cef1e8d6e6875bb55ce5d66eeb95b9adde16d36ea2cd960aa1e49dc659559dd5429184576ac2a28dc58f7e341cbef2b1795b71b7875c19fa7cccf4f40fe03a4ef26b1e24e46de45dad9d3d3ece3ced1b99db9636e92d44e887caeecd91fe4ea3a7222b6339d86bd19f99d52772b927bcf4a61ae9370e68681e7b175541d6443264c6baab52ecd2b34d98fc2fb0f37741acf5ee039ba37943dedb94b5c7a89225c45e8d19a879581676059da0464979544335082c66cc1aa6fa0590f396f3478d0fe7f4ba7a70fb5d2708cdd21e7be175195d31a0e69df3c83bea304dabd5ca3a85784cec0f9bbe4cfaf9de6e978f48e769e9f2f6f3380f3a214dcce95699bbaf0b97bc2b7896b1ced3aab9eb3e7ebf3f3a1d9c72f4f0c1a77ecf679f9fab7bf79c4ed7562aee4086a66591ce8a14ca8908902caaaae45a970f2d3dea23c72fd7b23c7f43d22ade2ead2214d1ba4e6b3726554baaa974b52eacb62c91a48291f1561d51408b22a55aa5624f45335844d9cba7347a8ce3d381afac3d31e55de86ede773bd14de3cdeeeb5ea7136eeb8c1c6ef8c7235ecaefcd466562874b231334064075028360c21aa1bb96886eaeac22e918175cc923d7dd4429479a10ec4d3e22ad944b1b514e8b318eb4e8a9254ba85dd42e55844ab1b0221dae0743628ca28c3a41a382e992c553a088e8229f4223840bb9142556d0950b06c176701bb8952e28d454304330fc65aa5c1b1a085172bbf2a176350fbcedcd64a9175254abb021512c68b5b2cc83b42b2c72e864952ea052a052ac957449744950b950b9545c821548492895224aba255d554ba2a58c58d8d9722d4ab384373687991ad122a24340ad6e658beba994cae9d04c7596fce59ae8259497552484abb170e012e9258c2c0ac40e9bb7186d013183a9520adca85d542eae12ea82a945d5592412e4aa92ad25410a2c618002314c6190f4815623612c4252015a92473079a865a9723ddc9352ea42e4855c912e4c8ee42490ba90ba925952592a406a4b2ae425c92cb910464b4064d41a9168e44bcd2629b24d0649575225492d55480b2491ca92ac64895201522ac24400900cf22a932015266ef921ffc4002f100002020201030401040300020301000001020003041112101321052022313014233241243340153435425043ffda000801010001050230f410430fbc0ffa07b0fe01f90f422113535edd4d4d7e210751f98c6b3454efd9b107530fe01f98887f0987aee0f6883a6bf318df59874d8b66d442752ec90b323d478bd3ea0a45390b6743ff003987f09f68821e8040201f85db42b6dfbcccdaf6b8f776d92f1c7333424bef7762d3faf4ab756236c1ea3f31f6984c3eed7530fb0413538c0201efb6d083f5b5c39f5f2c8cc5e388769ed3d2e5d8ccaf839bd9458c599a719b95b146f4ecbee40763a0fc1b9cc4defd87d84cdc27d804e335ec3d3508e822fe066d4e5e323296a99997de01bf72d3394f4ccb1db47e5ef333d015b7c1fb2fe2723a137e7d26061c77370183db65a165bea08b2cf5310e7d84d3ea9e68ca5b06f7ed31dfc89a9a9a9a9a9af69e8218d04583df960f1a72be39f687b059a8affb973efa2133d2f3070470ded2da965da97dbce640f913a858ed88d0274662de6a95e7ee55901a0680c583ae45bc172f3199b9021c9df31c77e68bdaa6c1bbb95930b41d2fb352a1be9a9af781d0cd402186010083df60d8f504edbfff00d2dac711f6bfced220303107d2320b52d7010e48872846cc11f3446b4bc2f2e7f1bf9b910ac07c412b32a72b13262e5895640311b73709f1eb1771566d8d3094f997fdd2018dfcbd3ec0b573e5157a5d6680ddae83420fc1ae9a9ae866a01edc83c5316dee57d0cf5551c2dd00d6b71a584b4edbfb2470dcc3bfb6b6643b1e6c66cf4103432e5dc5a898f8e775d3b9fa6106309fa686ad411a7dc46653465696dcf553ff00905d65da2f7b3c4ee0e3b3c8d7b0360ef67d32d3ce8038cb6d003b9b5a8af43a0fcba9a9af6dff00ebf4ab34d0b012cbb53d46fe51fe7015e2dfc853f111e2cabc7b5ce80b3cabee0f31544659f5034569f70f9978e31de56d3940e61f31842a67d95512d1e4b90b591a73f2a4916e25dfb77e501007b8d3405f60fce7db67f0adbb59ed94356646e359e2ff00946aceac5d04238f74f1df4a537026a1f137019b97fd1695d9287e51638f8a8e52cf8c55f8d47f72c3c4e4bed0bc57f29e7a22f22f4fc58f120125b618cdee1f104a90eebb58263793481adf5d883dc3f099a83a199794b52db942cb6ab343f54ac4bfc5bc86b388b15d828f09ae246cd556ca2858d19659e0af4b06c58be654fc6577ce7c92a6f37aca9b61c716c8b3e2d66c7f74a41e3a63572c5f8db4ecf68c6a18b2e3ee7e93c59490f5532b402013444af2cd62eceb657ea8020f54f17fa858e7d2b38d877bff0086c70a327d4144b6e779bfdcbec512b3064933bff1aeb2e6f2aa94d3c876045c5f2c020af6c5dbe76f84e5c881ae863a6e76a32ea6ccaaed2557fee5b70e18f903964de34f612254bb2834227f2a35ab4c5abe035cee000a8457f9e4010744f339f9c97f09643f2717851bdb106b5f4df5062e0ec7b47b5beaccf3559466576f4b6ce0b9b9bce7d46525038573f76bae90fc56c331f2076f65dd342ba0edafb1557cdac004af7caefb42c16cee6cf431beac6f20cdf8119a0e8de228e46b5d7b2bcae2296ee4b5c2ad03672a563e1bd5f93fc68f32d12a038656c38b76be0ad560a8da793528bdb2c662d9c2fc6b56dafaee6fdf978ab72df5d98ef8fea4e93373fbcb8f50e397f6d695ac6c9befade9452e4f880880f11dc9fa83ac7bb52cbf9da2d544bf2f7319c4bb2b50b12d8ebec6fab57ccdcdcdce5034df23526bdb6cc2c80ab664876a00d664a3f8e578776f8d36e98fc97be54bdff329b5a6c1cb20a97a114d4fd175af412787b37f83271d2d4cca0d166e771c075b0c2a9fa75e5bd2a0ab92850d636b89e5340c2ba827d1624f45338ee256656ba1ec75dc7ae11af6d35fbac13ea722ad4e6102dcbdb5798a1727239b35874bbdd4f6952ac966469c86796227631eb1635bfb67116b64b3f92eb5e8d695b77b83f1e6640a6bb6cef3b62721460ee5f8ff001be87010f0366ed22fd514b9a6cb5f9b88b1b5a6f07a0112b8b5c0a07bccb1270338ea34a6b83c7b8fd5b3714c307d11089e9f87e0222ccfa83568cb58ee0e7e6c62ad51556b598357d7149438b7ec0b44ee42d391f7b1d0f52bfb8f4d45d94055367957108d838e0a760acc6e08f92ead64a692d0788c177701a9b887ca2cf94e5394dfbd809734a93700d7bccb566a781362739ca7a755dcb14045b5e3b1d3d7cc8a4f3660af6b35871ddab3739b1a095be8556f9c5e2ebc443f8329b8d47e6f8ea16bb1b532332b567cdda53936ece4aab3d9f2b9418a8663e3735a3f65f2023af1f377d744fe54fd4d4d4e335ed32eb622f32835f86d8fd6a4e6c69d4a09a9572f201fd4d465b928677076ea51aaf050c6a11676938fe99087c6d44aa1a882be27a7ddc5b7b866a0e83d9eaa78e2d474d93949425fea3cebcb18e3102f052e8f587d0afb4a1880b510456fc4658568e0ebe831df5a86cd63c753d39086c10dc235f0dd3f9354a009afc0df568e94a7263c83a3a58b522eb9202f6b2bdf6f72db9edaacab24f3ee6858372cb27f0aeaf950ab01067149f147c6b4baf41eef57ff00d4ac6e29adabecd8943379bb352cc4262f159956ad911b516de2eb90a43d9a76b871277d42ca57503810dcb0e40872a1c930ded0bb19beba95789c66889b69dc9dc9cc4e43db626e32ea57fb72aca47754a5f1b15d45b9cf59bb1e9765b2d6737ded7ba8267a7b6e9b72394a6a24e688a38e3e27d31e0ff66ffe3e96dcb1fa0f77a90e58e94bde7f8b599bfe263d7dc1915b52f4d82abfd4ac4b3237e2bf0dcd5e15d368cd19c619c801dc9ccce466fdbc4c15982a82a8b5cb06a5766a0eba13809c269a6dc4ee3416cee031f5319ead5141ba62e31b5581e56633250990f5acc6350a77a38d61dd48aa8f90ab19cdacbfea4279e457fb759f17ff000f461fe2fe0ccf296d9661e4dac59bc91857ad0d9f7f7df8b3422620ace459ae6a85cf25d1b373919bf66a04682a6831cc18c62e34fd309db550cebc966e6e14d875e26ab3501fc2544ae8eeb3e2306aae7c774c8b2b3b3cadcd67c76e9878ed9108d45d2b3e49298fc381b6b48f93ce57e265646e293396d7d3578e3752362ea33120f52ba96c7cea6fe99467a9a0fd3657e9fb78b456d564205b09e4d66453fa363e7531eb472613053e3f4b06289fa65831d676520459a1edb6e082cb8bcaff0096fa22f475e42c42869b75079fc386ab427a88b29b58064cca2b14b5149c01ae5946a2fa88e6b6fb8a9e1e9877a8ada9cd8cd4a97e152f2bb1bfd67d83ccb6b4b064fa5c191918d2bcd533b8965b5a5269aec7ad6c7e46bc4e58e6628acdd9f72db7740600256e0fe16200bf2613b32a1e55755d84a57cdac4436419621d3adb59434dbafc18c395cdfcb7dd6ceacd172ee7132da6cae57c7b996d5bdd04a53c94f95f57b0185a628e2d8a7f6a6fa1fafd4dd8f6ff00e55e6366bde1ff00725d8ba845959bb9336365263d4fae60bb26f46a47baeb90d6fd55548af82bfbeebd52596b3981772bac477a84caa7e6bfb7531a386223bde2dd417aaa901d2d4286ab753efdd89feee5b5c51e73296b6d7f4f28f9f8f62b3f2331fb5ddd8d8f32b4dad49dda02ae5507ccb10a3087a63a6e57e5b17fd44cdf5f544e36d9313fd06df2f4169fa0632ff4fe0323d3dc86c1b0357e9968a5fd36c1357623bb16260addc62518e52df4fe55afda7f1f633051764930f454e9876d69916146b7271c0c6f4d38ddab48e40f18c59882a056ec65881d594a3536ebdcb676e57cdab4ac20d88594cd132ea46bb58c664558e222e96b1aab10b571c1aecb025e2dc5b34f53d73714792dc52a98fe2b27d99dfec7f0d8366ebd717b81606d28ae39c3733e2d967f8f73ba2f1a6f9b35367e18a6c6c7651e9a384cdac517fa6bf219ba5cd5faeb75e2b8f633981771535d6c4e2a869fd297695233c15b2ce2727239b550e810650dbaedac386055a9b75edb5b89c3cb17581b6198b4bd8106d35661638f959b8bda810582bf9394ff00170809d916d78ebab3d448e44b7102289af8d3fcabfe07d994bcce431af27b8c9663e6f35c7b0bd197fefca6d32295c5f49b06a9c8fd266fab55d87b8f7702cbbf5187ce60f91eb0ff00bd8768a715ad667a6cee2c2742ec9ea8900eadfc2cc91662e6620ab1cfdd2476efcb5b31b971b326ceedd0aea51e2a97561c1f069b75ecc8985d95a6e3a8ff00b74e326ecf54f8b3ff00958583945c6576e9ccbbf6eec57dcc13fbd65a316bbad5a159cbb08220df4c7f2e9fc4fb2d1a7f55c5e401f046a60b64bd96372bfd42b02c03b98385e2ef581fe47a810de89e9cdca8a9f84d813032552dcfb395a6eb1a9988355d960ac5b6b58601b8883d8227a758e898eac975f65a8f4f0afd3a8a2e96001aaa3b947f6bada0e46b27adf5f3e94dbaeb62f29e9f5dbbbfc4b1778b8276b9afdcc856fd2e07a43287cea6efd6643f23464aa2e365d752dd996dd6bf276026a0481750fd622fc87d741d2d3f371c97d4f10a156d05c8b29afd3b1b9a7a9d801c1f1563f27c8f5570d7e67ff078b7765ef085a087eeb8b4f26b2f158662c62aee28d0eb855a5d7d3455529fe7ea385f35a5bba312b3e9fb26580a32cfa817935788f1e9e3382d701df4beae5d29b7ad59965330bbb7cb0f1ab049996bdab96def63df89db18c8bdbb4f2b75126bad63e47f9451e71079f61960f94b503ae7611a486e30799e9ab5939f90b8f8be9d776b11959063fa97f8f67141ae823ff1a88dd976faa573fafeba7a6e38c9bc28ae6ca4b1dd9d6d1913b499587958775613e36e5dc72b23879c5c5e6d818a8f052065dddc12dfd334a2b5b09fb97d5d28b61fa698f9b6e3aae659936e3d212bf5628b4e22844f55f50a9687bec7a441b9a9f7113738ea0fb3fc84513187b0f4b875740f33bd3ca923456d8ea1d94b54acc5e04f1fdebcfb541311744fb7d213f656c2c0a926e6f8e10e167a4bf6f28648c3cdf517af232947138e7bd4d3ba262072f75ad45e84d4bdfa720e9702640fdfe97d5d29b771c79108d1ab2ae54b79332f98e8040671e9db32b4102f8df9e8a20131bd87a58360f8eabfcb37043cba87afa72f1a596692941e7a6baa57b8a34bfd43d0fd22cf4fb04a582c6bdae64c7006564a9164dc50cf29c4a9a62b9536d9deb70ebe0beb7a64c099faafd4fd54efd391895eb7d5c7a06e50fdb0f8a47e3a1b9c7a6a575ee2798bf447c7c99a8abd3fac61f1f6996ac03a11b1af8df423cc8c105eda5ea314912ea42d47eba01b95a45f13faebfd22741e6ec9b969b6bafb7198595256dcabfd3acf50c516b598f6a8c26e38f8e8435f4761f1af0d4733659e9caa664de5f36fbabbf086bdb9c395d39f8dee713001d154b4ed719a1c44fa8f011c622f4fefee55e17da7a326a79e9af2c361ab0d2dc7575c9f4f5db62b0994dfb27a2a6e2a8107d4fea19b59570834d0a1991feeb9ddcfa75a97e37a9b7e9ecc547b69cec525308358485ad1725df22bbaaae65fef53554d8eb958ff00b785dea93b0b79765498bfebeba9a9754520fbe82b30523607060773cf2d81370cfb81218d04ac44faf6b7574e30f42cab17c031d405b2b1c6fc3065f8ed5ba57353fae9fd43f2990ba59dc68b90eb1ac5766d134bad67299ecb7132726a4c9f50c96c742443b2009fa9b81c4cbb2ab0e6e44abd4d986466dd6b772e61305499da69da31bb693bf40872d2365310a06d6a1b55553b84f99e40febc41f7c3c71d4fb2c7a2ac58bf5ed6ea46e595cfa840304f13e5c7ee5b3d4455cbc7b4f92ab00813b86cc3d16c6f068786a71347d9c8cd913b8dd3739f888ca21f2796ba2d8ea39d867133819db305620496788bd0080eba7f5fdf081750cfbe9a8079020fb1ed10c23d8f5ee3af19e77e20004d4f2b3d557f77a6ba08826a098a3fca64d2f0496e32f238a38fe96e36fe918b598fc54d4baecaefb027604ec4ec4ec4eccec89d913b427013404e1a9da316976029b4b8c4fdd5c7fddcc444b5770459e2712625677c22c5fb3d3500ea907bdbda5418d5f9b8154febfb1b9eaebe7a6bcf1dc5007533035fab24c4010b26c5a398ad405e20291ceaed6cf616cbada50b3e3eebfd1500598c96afe892362d31b169ed3635465b8caa6cc5449651584b9417bc68bfc26824e1fbafa9ea1f6146b511676e0f88fb11a31e9a9af62fe123dccbb8e84470567859ea7aedc102cd40becc3dfeadd952bdfc978cfe475a9fc456aa17ff00bf2d22ff0025515aae92baebfddc96513f8a703c6af94cbb346c5f9e52b34af8b2f2e66dd89e52ab48ee0e2c330a90aac42aea2183a9e9a804d6ba98203d47bcafbf50d7b9ea15f3afb738ea6ba09ae81655f0b2c558c441f5bf24fc3ec222a2c3f1957c11cf93fc54fed5c7551d76f912c13e2df563f1a57418fc6d73e117cd9669fc1550665285a0781107c87b008167d7b353fa1041f848fc19e0f1861f601009adc34c6ac92e0f2278c6f2760c1e40f8278dd3f08c3e6ffb9507e0d66cd569e407362fe147c5079ad5f9cdb28e2c17b6db6310708c0f1bbb687ee01041d42ec01af68e866fc8820ea2183d844d75275d73872a48eba8040b074a0f1c83d19030eda85b31cb5e298d4ea252e65949aa764eca4d96990a78d41a1044d9e2a7b8fdb2e96ab09db3c0d6783aee766768c5ab63b02c39d4f2a53f8c106a2af80bafc2df49f6b07b04317dc4743d72c6ab68763a01009a9ae9f47efa19f7d00f881c48f0481bd0875178896aab05a8f33add558dba57a3f45544ff00ed7f951fc5d65c4c65016bdf0cd4de2d63e1b114131175f84c730fd5622883d83a7f7ee226bae47fa4f403735a8bf83cfe0236384d09e00a559085e48ce446511dfe285722aa87046225a37186e7d0bb46bd8d22c583dbae87a3185f6e22083d83a08603f835352d1f065f3ae9a8a3aea189e6bfce4f4fedbe437a5277d3fb30cb3f8d6be20820e9a9ae87a196d92bfe5588041ec1d0430c07f0d836b70f96a6ba0e9ae8d31bff005b535ff01e87dac40979e38e9fc7a2c100d7530c66d4bee3b1e4d491041efdc36a89dd0ccbf85beb207cf5d409ae8cda8edb9e97e7026a6a6a6a6a6a6a6bc6a6a721d75d3f9466d4e33463a1000dce3a895fc52b04e768e327f1dc1b31441ec30b899171275b9557144583a01d098d6811f2235ce66e56746bf2a203ef332bfd9d00eaeda84eccf49ffd2f66a6a68468034e26713bed813cced8d6bc0501542ac6d6c7884cb1b413646be60ee01a3948062a0d80b041ec63a96db188e3fc8d55c51a80403d87c43e7a1866a098d91a60603e7dc6660fdd8075779f67a7a39ff17f0ee6fa6e6fa1f77284c337333fd14ff0e83a96f1957ec83e0a932aaf51560100820eae7716bf10c31230d42263bfc75e2b6f7e6afcf5d098ef350886133d0ecda7fc661ebfdccbff00d7c73f1e9b9cb52dbf43bac67d94af712bd40b0080403d8c622ee01d0f412c1e040cc8d8d7064d795f1eecdfe463b6a13ca6bab984cf411ecd4d4d19a3f97fa9af30aea05267a8545e8c63e370bea7296fd3e8a9fbaeb8a26a01008041d58ea2af22a3da23cfa3ad8d9438f6f31bf766c63a9c66ba18cd1fe52a433d2742efc646e684d08409a13426842a20d0533709eb97fe8a1c05ef8d8b394e52d7d907945488b008040201350746300e45575eddc4844b1627db09b6498d91ce299fdf3d40c0f4cdfa1f266e8c7519e10cc552719e9e7591ff002187a18664efb20130298362560982a895ea0580402013535d58c55e5146bd861301887c8fa712c044aec135387cbbcb03933978d78ee15990ddc4ede9584df876817715605812569c5c36ff00e832dfe02288a9116013502c0b00804d4d74262d700f6ea719c60f111bc719c65b49050ee6bc5e350643a9ad8305b409ad8225de2318db316b8a90240b3500890308d6e985fb3cf53f509b16298187e33ee3f594dc71c2c558ab008040b02c0b009ae84ea68b454d7b75353cc107448a66e3cb1082964b3e71d353f5495a516f754b714e4cf32ad09155ac294c15415ce138ce3350781ddf3f7080211b9d896d5a2045e50359b17110de017c8e07bc235835dfdcaece4618eedaa6fe6c1f5396e6e31dafa81d63aac5481605816058166a6a19e4c5ae6bf06ba0f13715a2f983a71972712f95c612f6caf1f731ea2908da9e400c7db222c0a276e709c6719a9a844b696253bbab1b4090aad7fc393b8a58ec309f678c6f8977dcef13290d635ac6a2325831bef2c965855f997c4fdb8792bd8cc5ea7254dcb521e5632a4548b5c0902ce335373c982b807b3535eddf4d74062bc067312ec968c2cb0d78d2bc7022d7a9c66a158520117aea719c66a6a6a6a355b8f5932ba9447f8bd40f3fa8ac04b6fedd85831c8f107d7e9cf26c632b001377908c5915512a42676f942028de8b21b225316a82b81271e9b9c58c15cd7e46efd505eb3bcb3bc221678b5d938cada7655e7e9c08134009afcba9a9a9a9c2708d5033b421ac084006da91d92b8f4829652d00711c6d551b5d96e552ba9ed399457c5392d65ab2ecb8f0530201343a6e698cedce007e5261b541d46a2a69fa3c7831ea59c21485270883504d42bf8b737d37efb3e22bb96c8d5ecf644edce11abdced09db1384e138cd4d74651bd75d34e06701343a6ff002b3ea3d8cf0504fbb538ce335ec2215ff8fb6a0fb37d3737d7ccd19c4ce13809c47b8fe32613a8f6ee0acbc540bec1f938c2b35ff16ffed2de58ea35b3b65a0403a19cbd9bfcba856107ff00cc670b0bb3415c55e30cdc261337d773737036ff003158526bff00c62408d6ce2cf16a00eb5d37370cdc2613ef56fcbb9be9a9c671847407e5ff005fd42ca2739f269db1388ebb9b9be84c2d09e9a9a9a9a9a9a9a9f537f9f7d75384e335eedfbffbfc1b9b80927e4d38f80820f1d0984cdcdcdc27a130b43f901fc87ddfdff5089a9af61ea46ca7e026133fa0201074fe81da19b867f5d0c30987d8a835ffc400281100020202010401040203000000000000000102111012200321303113324041510450226071ffda0008010301013f01fecd8b1afde53e5597cacbfb3ae3447a638ae1a1a1ebed3f38511bc5090f1067b343446ab1267b157078f7e68eb89c44558a343449084cbcc8788c3b0e06acd58ba763e90d578af1a9585268bec2586325ef0b1658f317c112743efe27113a36d870ed79896cb2c7c2f9459b1b1b0a44e45e5f34ac504c50489faa351a2286597c93e2b8289380d310c43e5037513793149a13b1470d95c68af0365919b46e2a65128d9dd177c93a58487852677cd148a28a66a35c28ae517df87e785e35ec22cb2b85968d8d84dbc7a371ae31ee35c6da361b170d05d266ce3ef935c52c366ccbb131a2b3d32487028485e0447d1f1a63e9a3443e994cd70f09084b0e5e08328638d8a1453298c4b8c55a3d11ef868458e58a1212b2ab0dd71627983e166c5d8a387c23eb37d86f0fb95951cd0e24a358a147128d09e222916367b144ff0099970889d628702b3ec4ab3b771129a44ba97e84a4cd58e06a3f5958a35e4f844f658995fa1a189709b17b361d0d22e8bc325c1628be2f82132f16290eb8b45146a6a6a51dcd4d4d0d10925c6f83e0b2a5e0d99b168a46a8d4d4d4d4d4a4762c7e07c170b14b0bec5f37e388b2cd8dcd8b45979b2cb2cd8be5787c1728f07cafced517c5f1e9e6c7e658b2f29127c9aff1e3d3c59eca1fbf35e52b12a272e488aec4a343559e9bee36247ac3f7e579513e9253e6889f513598fb12cbec4bde6cb2cb2cb2cb2cb11451f81bf0a745fe8b341c051ef972a3725efcb0361c8bf056632a3d919763b335146bbb253362c46943823e38b1f48f8d9a3346383c7c6fd9abc22f17e24314a8d8b1751929b970b3e622d316bf81c514c4ac91dab3689d0d97e2b2cbf2589b1369f71f5bf47ceec7fc83e5a1f55b3e463ea7e8bff61bfea97d8fffc4002711000202010403000105010100000000000001021110031220211330314104224051611450ffda0008010201013f01ff00d36278afe5a5650d7151f73742f6fe4596b3a50dc4e092e1e324ab2b2f1742fdcfd8fee363fa566acdb8d191f4f0a3c48d88f86ad6285c3e0ff711ebd8d1a2a3f9291a90feb118b6474e87024a8442745e66c6f1a7a7d0e0ecd8d8f4d91d1b27fa71c76fab7718ea346ee85142a436489bb78b14a85a8cf2324f0be907685c272da894b73bf54a16293429a92eb0f1166f68f233c8ec9c9be166e3770d39d11d416a21ea11d43524dfb34f494be8b45244b47fa24a8446249165fb148dc47f73a140d5d31c68acbbc57089bd447ab262d46296efa4208f849f5fc0b16ac90b5dafa41ad446d46a69dae87ba2395f25c63a8d1bdfa2bd9a52a916592ed0f86e13141d7b625d73d386f271daf846ecf235f4f3129f5d71a23a0df62d570ea47de2e3d73bc2e5fa75d1a90521e9b43eb118d0d5e5f0469f713c2a478228da8f1266c678ebb18f8b2bd1a12fc6246a69ee23a546d634d3a2577ca8d39d1077d97d135d917f81c894fa1caf8561c58c4ab2d70d17de18fe8e479113d4b2f922886a51bee23917f91bbe488c0d9fd938d6141b23a697d1a4d128d653688eaaaa1c89b44e565f2bc470d16cdd879acc1f6227aaa2a8d4d6efa21be428bf83d3ff00494689fcca650df439612cbe29d09e2868ed72b22bb23a838c5928c4b512c6899277c2d945706f9a74279a2b8d0ba14d8a6399b8de791965e6b8d8de1887c94b8df0a28a28a369451b4da51b7365f158acde6c521b2f37dfba5e858a1faaf1b8dc6e3722cb2cb2cb2cdc6e25e888b0f8de6f165fb9f34ed89714f8b65e2f0bdaf17c2c8478b377efe32c3632c8fcc5965965965965e5f06cbb210e178912fec84d919a966586e86f10f9ed79b2ac8438365619247c34fa2f13f837d0f090b17eb784cfc91584b0df16ac71a28dd44756c7a89a37594474db363447fdf6bc280a3c1be4c946caa1c4dad7649a11081451aaba3cd647558f55a3ce2d789e4479222d44fa2c7a88dc8b12b1228ac5fa28a1c2c51a1c6c968c590828e37163ec7fa75f8250926352aeced1157f4f84565ffa2b34e121444b165fad97c68ae0ebf24d26bf6a34f41fe4ff009d51ff003f47810b46287a29a21a35f44a8b2fd17c2cb2f17eebfe4eefe15fb1af4d97ff0095217f03ffc4003a100001030204040502050303040300000001000211213103101241202230511332406171238104425052913360a16272b17082c1d192a2f1ffda0008010100063f02ff00a5b2870504abaa1fec02a0e724d3323f54aaf328d4afd29512b98e57ca5aa0dff52a950d34cee8071af44f05b39e9f995152c8072a1fd0688837e0a6542a1c6aa9c673a8e1af4686995339081fd0646e8ca9caaa9948286a3557575757543d4aababf040df2a2e6ce1003d61281e1f7caaa9c1015d5fa35e848282babaf8e1a641a4f040b7a829cc3b1e3a29f493d0ae54e06e9ceb6f5253bb7055511ca07547091c11c2429ca78254055bfaa289b292540ce113c31d21942950a7a2632aaae51c142b994b2cb9aea74152c30b4e25fd1902a9ce554342d4a214292a14f04ec80e95733c633aa8ce3860aa2e744b544641cd305063fab188d2a8732d66521542d44510844e75e0f6cea8fa3853913d0a2822b91952149ba89a2693b211d4f755a7ba87d5696292b96ca14c5100dba80a38a269951554053e92ea278272852a1732d6b9d72a92a9e821c145c651287655bad2c443ee8b80a2a5d43bd7c855ce99c695ab1051722d33453baaad20d112f462d946dd524a97296ae750d44a952b40155a913e92b957afa9c1595110e44a8195141cc10abd42cd87015051a23a2c8f88b96d94a877e852551515515ec868baaa90149e008748947dce71577c2fa3477ba071b119f051332c3d912dab54b5591945a548bfe83e4a772a30a257d4d2a26aa2ab91195a8e6548ca99693d277c2084f9bb22d6b0825610c38f1549c3d5ee538784d0fd88446c555ee9f65cb519c83557f5f5b28234008f8b2e1694e68c4d3bcae77171f70a1ae0efb266b6c3bd82d2ea7b26871e52a14a80a557801956e8b905f8976241793016b672b7d94c0d4861e9881fe72e6612507370c33e382fd5bf0d7adae5177e26b4a27b9cf00fe56a1e213a3747c2f2a73c3640527cc16b7de2150d7b23e25daa1aa4a032328f6cc745c11c263b486ff9441bad1a7684e03ccea0470df7098f22403545f8510eeca179a0ed44462b44f70a869d0bfa2babe56e07371bec9de18922a9c07291751729b8903494e6b4f2bb652b17c4f31f2a945b342a4aa65544052731d2c48f2bea9ce3baf65a83660d8a904c5e14c64df1fc88c5972ff946041edd6aa86f157a70d4e0dac29651388dd4a1845b119e26923944e52142939435495a46509a38214e063ea1d8ad3f88c39ff0a01d2eececa13de04c04d6e083af7714752e498c98cc3bc66e18afd3491ef94ababf059595b8c673c107a526e517e19e57ad6d6f97ccb0f170cccdd788c3f505c2e6a85f459a1b94e1985750a8afc35407ba1c5188c054e03bfed72d0498ec573d0a2db83485f8a91690d1d96a6ca929d8cf7691b0ef90f1e747b2960819c2baa746aa1aab997682e4313c0fa669a8941de20c3f69465a314c7e52b99b1f0bd97b283d06af60a0a21be570502a3b2d359ecb9c694dd64e99e647c010cce3ba834729e180ab7e27b019aeeaad4e244342a890b90c7b2914f84e3626e9ccc4c392512db231240be41adab8a2d75c7054aa1e87baf6ce5c602e46b81f753e336226eb9b1686e00995a5a1c0fee2b4e1e9d55a13750fc367ff001406980bd8e5078fe13ce587a5bf2b5e1bc34a0f27593db64751257d69d1ecb96d93908f33576c56a2cc4a3b8751b053c5ac6d753b2681b9440b29d4e5fd68fb2ae3033ec84bd860450286a938ba01da151ed7040905aeee89ef94b44c5d73d4ad5f86fe38eaa18ab9572d58cdd4deca59e4268133183c19b8ecb13c68d5ee8c5935c28e08b8dcae5f3efab75c96ddb9415078a9ba63621ce5caa88cf955ab130b9b0f97fd2bfa43ece44613dc1ffb4d42b551a2d9788395a5548d5dd50b4fdd73b6338087110775a0d96975da72c3fdb72a4dcd82d7895684e2041c385878df95df987e52b5346b66ea5874391c2c76874f7dd37c3fe9bea14a9eeb97c8fe6843b2c60defc3172b9b881d2ead7e53db8986ed66a1c3657474fdd37134f2fb8a28d5388f3ba7b08001a39abd951095eea141e1690898f28524d140418dd8ac26ec42731c3e8e2d42d787cd87ff000896050e4ed3dd14e6945bd8a0028931c0de229c1d62a415a7128e16449eea3b043085805f8876c602c4c07891ee9df87c53cb344dc7c2a31f4700bc46d5d87508cf99a6505098cfdadaa24f645c77339d54338ddf0b0b034f334dd0c42e249ca35809830c69d8841ccd8ca73e209ca43814dcbdd41507802059e6374decb5eea560620d8a2c1e6fcab41bd9060a6a12511eebe5387ba2eef608ef8aeaa97708e22b5b6eb4bb20d64964d7d91298eee1380bc29dd3313b844ef45898677690883f1909344f832495a26997caaaf6e8412c12b1bc4c48c5c2a01dd069748ec839e46a366eeb13c67910288c1a7758b8ba87d32299554775a74c46f9c8baaa87703a00f0d3428fba2bc31f953b14df652f3ba7bfcc09a1409baadd17104bd0738dac112ee21c472d6d14506a14613ce929b8af76a9da531b351b2aa8626e18fcb74e55b2716915af0fb2d2ca95278dac7ce9f65f4f0983dca823695ab0fce6e13438108e3ebfa9784d6845a45428ef93436ea9e6ec80739ed3eed525fabe02a6522f943b3768b15e262593a7b2b22fd8d578588d3a0f645f87aa05d6b79303ba71169ce998e91ca0ad4df2e5384e2d776947c6feacfe64e1235ba802c6c46ff567485a9c6a9df87c76f23844aefc12ab65a5946e75e1e7fe9b6a57235a36a052e4349d2162d3983688b8980de60e170a583c4c33bb10d42d709d89113939cef2b44908f7403e7537ff00b2d6d1e2e01fbc29d15f628f84208db3d4dca1d9c360b7b14d66210d62a15a4f99c6884b9a3ee9d83870e7bb71b2d1f97a13d19ce085ab0d56eb986a52c35ec518a4ae624f157a58a5d404e5ff00b458cfba7bcf94356261d349aac5631c7c006908e260b201bfbab052309daf78144e9636bee9cec2c5ff00099e23f103b63a57d22e74d68169761ea3de2134b7cae4f22ceae7a9b943b834b710c297925555151572a66075f10382e50ad4ca0f30ec55091f3993d30aabc18aba6a8ea165ff0085ab14c3568c2a33bf746bfc2a0578f94d0fc592fb694dc28040a4af6d919b1584d1e61543bae4fcc013f2b0ddd9e84f06a6db2adf82172ae632a88d14aaa210f407ba037c886d0ae61951788ca0eca383df2b70c9cb0b0da74b9cebf65f52c4554b60b4d9c13994d46c88c5dbba01f84cfe178bf85d3110e6053a0a668807ba054fe5d913fb022fc4dd085898c7f72d21c241954b70bb158cd0d75748db2aaa0552a8aaa887beea11843d1cf650a55950d552a837df3adb8f98c2ad4fb542e5702acbe17d47b9c7dd334de2084077b207120cf70be9ec1798ad5887946e53bc386eb7d2765e1bb15ce78b9d2b4617313baadd3b1583ecbc5c3970dc279c36b9a2e43b6543278e76cec4aeca552b08cfd937b2a700eb8c84d273b0baa84400352d3c27807ce579f95ffa2b53b54a9d43f843462e97770a5f88ec4f728063e9eeb106960f7542543893979ca2f76238883f654c57fdca231f0c16c59945471c367ed6a838aec9f4a2b2ac05cd88dfe655dc7ecb9587ee5469680ad198c8a1947a3a655b28dd56eb65641e04906802e42ed46e0ecbe7a01b13251e4708eca4131ee152aacadc173195f2b2b655054aa650d711f0bccffe55b2badd5026e5442b9d51565efe8e97cbd949c8802ab741f15b1e2ae783fef54895fedd90c474d97d3d5f25399a4537446814bd56a7b34ab2ad38775bab2b7f95b662660da11e524350d386534068aaf0ce24f72b4ba62e8685754e000a28fa6a230daa9b2d9106fd903dce7efc4cd5b591d8ed29d1f9b7ee5417537f74dc21a85364d6a2204ea944903da3b2186c6e8f90b9b64c2f4e6c37e02f2d501822310ffc276a2e6e95a87934f7dd02d13b99723a5a34c4ea587a5b25e3f84295281d0df32c300dd432c2feea96895ab6d931cee5d4399385980d132bbf6ce88f7f59453d9765135e8e17ca87c0aeeab1644832015e54d464f9a8bcc83e6c1408fbad3db729f4ba24ef65ae05a07b26937344d01bc93251d240dfe429683a5b44c631b3a961b4098408bb0d02d2d20bf73d90681ffe261619a11f299357cec83093255f506513a5849b03db3f7fd01fc9059dd55538da4297e930a5c15207b237b5d1d28d2045e535b16aa33fe3b2af95b584edcccad804e048b6e83499809c713f2a25c6e0184c77d94d3bc764e7b3cd09cefe56d5eeb535b4dcf745f3088267ff0008b453b20f77da153941d96d33fcaf7ca78abea9dfb63a302f90f7c84fdd7c6ebe42f746e5549aecbc2324b45d08743775b88eea481ccda26f2c946580b8ec877ff8479be7dd3a7c88baec75910073b6e83c8d4d94440d3784fd2e809a1c3517d8a0d81a42134eca7165e4582a36278aaa9eadd171d1c33feacc82840b2f13572fed5a86e51e741ce9a273cc906040435529640693ee9c08e68b0299ac2739d354dfdcbe2e54c7c0403b53a0a0dd3485db527007ee9ae25438f2a6ff00a6cbb3b64cf13eeb11cdfcbcc87057d739cd89dca2ab5e307b29e1857e0b296b0201de54e73e20ecbdd3bcba7e1410d91595e41adcb4bb7dcaa5428ff3d93a39e045102e43ba00bf651bf75881a79627e5054afe82ff008eadba374eaa809e0b8b9bb2718fe54b5b358f84e1b90b9600f74e99d014f755baacc9ec99204055ba3f0a3f4277c749bf1e8e0a8020711f8409ea47a628f470e3b7a9a94e7ed0874e9d4baa74cf4593f1d4be503389ca518522aa3f9449fb2929ee8ba7e9ec82a7469d3a2baaf50f1d72ff00b8f467fc65195b2b2a532b6701442977942276cb1351e8d3d0e93d23c55cdc3b3bd5627c74207a3a952157a74e1c5645419f54ff008e2a2a9a7a4a752bc58bde9e9e832aa7737bf0d728f4b210e8cf1553be3d1d9471627c708f4d5ca5aa1f4771cedc3ed9b7d53e3b7ab9507294003551be52bbf0c5f8411ea8fc75a8abd590a0e54ba12a668bd94f053a362ad1944ab8f46e3edeb642aaa2aa00555aaa8bb2d2a7a7ccb94e775e672a95541096d0e7651992bbfc220e70a3bf4e8abd3af1ca3a6a554e710a14bcaa0e8f2a8dd43aea4ae435465411953292a765646ad8ecb9c0fb2fa61798a20bc87237329c0224ae53b21256a2a5c67a3455e9d15f8e30c2e72ade8a5106caa150533aa8159ca96432a9555a74230288eaba91e544dd4e427a35eafd4c23f2daababab85cad25569941cacadea2d45aacaca8a8865054e46775a4aa224f42bd7baaaae1b57f45ab970da3edeb2544d7d15bd1c3557f4190074acade9eab95732a7f60d954ae5553fd8940a4e54fec1e5553e82be948f595ca8323fd83408c5109dd1fec32be7277b040f5fffc4002810010002020202020203000301010000000100112131104151612071819130a1b1c1d1e1f0f1ffda0008010100013f21dfe0ae02e540e7a81c41c10f83fc2c780e1257c0c52e0e23c11fe23f1a721b422be0c32c54b97c5408f0336e37c1fe07e4aa1d372bc372a24498875ca8b8233a847f88c59706244e011dc37c2f072395f2118c22e2700f9dff0002721d3038801981ee611a09ad277b4bc45c9c91e0f9b1971870f17165cb97cbcd8f17f00cc932710707caebe4d8cd38a3dbe265ae049799627e92c2a0917c38ea1fcf08ff000bf012e2e051f804212305f04bf8739a479207c5899506b29076089a073089f8bc197f8888352988b6a3109348cee086a48a7a1c0ac18a0dfc9943b8f9e074f892546551e15f01c47054be4c3809536e218952a1095c0c81b4eb296b19454cfdf2ef7b20c6d211b1f82cbe295c01471946c869863b902b31d72865b95198c1c053be18e20bb885304eccbf6100627dc014b002ce19670e896509ae636e724e048c1871bcc1359b41998c71e2be162ef330d0988372ab7044ba8558cc26686209e9880726300422e652136232c4acc04ed49d044de63dea6368414a60a6f8d726122b51512dbbb612ba4361eb533a1e6164689eca201b964ca2d107b4476cae0454ae58f0562184e0866dcd0e75f0bf899d229c9b88a20ba4a11206171c324b7a1f5331dc101e90fd617accc2c60796552e55b8ed75198198373b336dc79891811949954b9a4adc219332be60db31c1b68782aa5158435da50c2016ee5437c4d1204b2c46accc043dd1d875f1e27c8848f0d43cf0e5882744223e067b416e10c099bde12c74b9ae81b8d5973a72771c536b198ce988625aa1da81b4a7518753a4440e094f047a3b8a0c0354c8b7285b45e148ea0749f9b02c3b856be23742ac771d0758f71409b971f1b22306690d463c5c3e49ca538be199fd7c6e6f8c00e6220eae25656a02b712a8ecb32b68cadd105b314b19a83ca771e30143109352cd62d32d208ac808fd94b67e89bc1189915dcc13a189571d2056107b4a65cc6387702d5a8faa9b814b7331236cb35893352a8a232be6257cab8d20c21199c33dda0ce636b88ced05985649bd6616cc6f06230662ab95a5d4baf110a1458c19978b8ad1008bebd7136516c6a64202cc951981603131f0cc08c893a0250667f4469ad41194a91d4d3bf736f3f6945a94384886d996bf84fc583e03097b5af8212f261e64fb63d992880d903ca9d40944faf2e6a384608c021ee0d51d90e2285351510aed117de210a2ee0249821ea951a584136ca09924f244ac89bc22f75406b2fcd4b733f090125cd0ca25ae3d83fa0b12ea8f530b3f134cc77e60061e1e4970793e35c3a565b1b7a8ea78c40229de6663fb9f41254f44ab8b3c23f3943b9a8ea2bea536ae04232f84b611ae570364d6667028ab4c5ad41ddc45efd42d8f71771cc444d1325c82336a0cb31d128b6ccb9565baa596f5c0deb6568a85031d3d4049ac257e909ac476ecf98dfaee54dcee33f77a650318c21c2f8a6d5b8908f0c02023a848aea3b7b5e602ad8ed2b11964829a451458b03329942291dd46c7594f50af781ee4209b936f0183512f811d28fc664b312aad9bcdb3046f4c33c12eb329532ff84fc667b919e10e419e315532972a4097b3b3c28aa384cc223886c388a690ec97a43d5947377178b8f010f8ea27b4cace58136a8f31ee52f6cefbfb9935c2f79c4c5ac1b614400e062b3e3884c799a08321877295ae621c071b9a6e0b2b30859112dc4bb61825c60b8cc60d3c086d0a4a22aa254d7c1d4b8dccb6297821a9e92c818531e60b9b0f2a5697170d4e61a8c423e91dba44b45c74a2c4cc7b772d45c5e22c18cbe01f3650222f8252e62d8c236b32faf3650dcafb259d0a436b31b639202ea55e25aa66c9b565443032f94739e49e18315c4f832b44c56c31c9c5a4ab3d42c1ccaecb96ea542e7ab44d2e6c1b95bb7dcc6941b656bb8e327a41e5318e052eb11ddc9284056c55780e67062e65f17cdf171828f7986279c9d6c129f1c16f9a8de481e889803a8aef736262533c88a0b7c592e6157397cbc1125ba8975c45e235dc0a63e662cca638ede0b19d1b60a36a1d408fa950d79450c31df7ea674d5f895ccd969818aca26e0e09df328e2368bf11e2e58329cd9996235019dcafc08ec982db19bb5d31cf216098889308f886d21b534cee268269e17522d593083e15972f9614ee00b60dd11ddb0cd1cdfc3225ccacb832f48b9dd75a84084f6621de5f4313adb0c64a5372fa232b3121d47303dc322278897abb89e886b8bf83c7d15129ee07fcce8662d0d1372d03722291d6c8993a3b4311b361d71baf3054b1384d32e611e6630a1ce8e5a44b2b1904e2f3162a951447b594f92e54a95c8c4b5f15280ea154b9e444791f7284a9e2389d16c4acfe93605dc363e6088658b6480a023e792ea18809a97a12fb47befa8517c1ca287c4a922c2cbe368c18a4854a74443df6473f994454fd7123b0c28fd65a950dd99ae20edd9a443b6a221a0f714b2d5ccb32a54eb25135f029e621dc0f642ea0c7750b90a81c0254a952a5702e2a782f1dd79850535da4a74628da94055294bb9a56778250c5d2405168a705c56373247fd4030407316ab5149da89cb28ced0914ea1598a6d25f4d30fa610657121f0cfeb8d84badfa8843427a265454decfdcb8aa9d902f741971b82aa9796a258aabc597a9d30f1364aae26a70981227008acb19816c80ec877093c53aa44cda429ee11836115633230ce9312ea08d903dc17b9ec25f296718c4b8291e8804674c310b7ad128d09c260478c32f9b6f52ea5e8610c9540b8a48c59ab31b0ef883455e658278947cc95ff282dc3898e1c4095c8870cf73128e032f97b99d48a305268c2b40d17745e59881eb8524ca33078aeba4722dc213efb220cf4d5531c8f4629d3080bcc010d4453a9ed993298b96fc0688e644ea5ec4d462b31c2116ea307c62ad47dc816e3ca462be6123e517dac08cc9b26359c0d4e94c4a8e1663aa3376ff00520a94cb4816a26ed9f53576881b1ac26a6e53da8042bc6569c90810e18704640388b0d8ab5c02dd9248b94b66aa1f87a5d4d46278221a8517f2a8e8bc1c401bfdaa50883b73ac712bcf3504f4c56862ba8ddf1a8dcb9e38a8b08d38149fd12f540259fc147888ea2e5e0515dfd4b8f6d3111add89e6abcc0790c3ee2f53088e23dcb19cd7510709528a520617335c9293ae0dc956d94772f6bb9f5e462ca96b64bec88acdfdf29857d5a679fd1702b462ad0d5287e15737f51b85d626a11daf98eab8b9a0432bddcb1541a5ea2496629b7895ea22c5c17785bd276585303d40205d205d251e0f83ece67754454d343a8b11c87f5c050cf59963a22a59fc1d8430230f23ac986e47e5303931f7034a141a29b25c52830ee64dc1cc5dc31f280859f71aadd9160b4cf98dac4957183b31456a28551477cb06332a71f64c2d6eff00e86639ff0007f0c568428c695ba4aabb7da57b9f9aa2333ef351a284b40c446506588faa945473c563429840bacc1abafe1b52a8aafed8962b66e615c642de035316a94565f13d42458a7908e10455ddee371f79406ed699fd49c006cc72fc044ea67ea4a54d93cb22276ad9717e007db1297eb5cb959a0788c54a504af30866256d5d230f11fdc73029e0830acb8cf8615d0b03163971b26264583c253a7f702d637db0667aa616769ed9999e8ef22557d9a772b5d2a5e0d5ac2142fd42581147c90017cf9e0e8732c8ea184b4fa97c4b872287c4e0dc37e93325f4e1a2c7fca6674dd55ec8a757857884005676e7db1c2cdd97f897e71d281843b5c3850092bb87166c86acc1867a1c66262082ce1f8068f501f552e7de265223346b4cee9e69509151f6ba8a84e07da3632cb10a9f1159e08cef38f7308ad06603a1100ebccde02a5700327a5c747997364a8f5a2863b43d458b1d453d20fdfed657bc2fda005f6863117021a1840d5ac93cc39178b3fd119e0d7b3114b955c15bdc60f1d1d478fdf86bd45c04a3848b0be2e1c5ad813ad0f312be5017533415e25b99dc352acc19d2d9ae93233a5109f2588cc0bec7dccac265f7063a8c0d90f09a3d9fe4a53f88c2166dc4112cd7c5eee4e12e549cc05a795956d6f9995f0cabe6622587dc25e08ef7ff002854bcdda0ca23fd367e638f644ec9c5c3b16fcc48a6e5cd5db418fa416ecf68a65e3c41e8a1ebdb3078978201d2451db3d30ec2bfa933c85460dd3dfae22005f0156e58f2c9245b3ff83a9a3635ebf1366fab27ea5601f7022927f4bea64416f52dfecf705d68a90e44af4835048437c77c618fa65c97e231a00173b94420eab59d7d21af67092fbb54ec98575db412d94877001747d285f13280303c4d0dfda20747cc47ab752a690a96e23b712ecb3e09b90dcb9d19d8d48e9126429c9ee3b1d39fa5807b20aaadf1b90c25770e4da216164b4451dc0136262585e09e2cc55ade0bc79ad99da1c5ee6278af2b5366a14bdf132e63f6406ff4726b41a12e81d24d4202fb62a3c446fa8ba665cca32fa6597bdec3cc25a322f5dc2152b41959c30153cc0a5ee7db280ca69368506692ab82455119b7c798b6e73372ddca0e0d4be086657b09e738d2bb4b64176331907da8e781216f64446c6d3dc7216875995003e9d4315cbc9ac0a6c9607c4358e46205015842226e5cd76d8251d6cdcf215129bb0b5e195514e44c6d02074c5f9e12953a1500497a462228af6454c230f11bb5ac10620a3c4705753f7334f2a95898847aec67ac7f913733d41476475e500ef353b075bf89da75ff0053b2a8e9161715e6173f709f548a5d8ca6aa8d412a94efc0d9e25b7c2b7317479f1338c789c3bc407dcaae086da3729153db10c31a41e038abf7b5a797c4216b40d370dae0e3ca3d6d41aec7bb8d4d8bc08629caa89da30f09f91fae04746646b049ea5e79a12e0af262aef423f9c101e4e09e00c21e46303db2862db3353d803d46d13866cd84181ba94453f023c94bc6784b8ce200a225e02e372b83a9659018ac33b5ee65a17a7c44c26ca8971b20dbf729eaa70980f415fd45ecbe228834080b8ba1fd316c85274a9c121a7c1fc7056a08e96de1f3750791615ad5dda7e39e5b15926d84bed3954770e6df7108dbd3c4f70550aeba9ff04323725a36f13196d8b54b999732bf178822a0788895ca754402a3f1c50eb71abf13c328c8bb4c0ba1ebdc3668484b3da212dac1ba10221f293cc10aa0efd550914a3a85db8ace7302fea622a123bc4b78220cbe14aa5a94a6cee66eabd46567e4605f93cd3f51ed36c2fb83aa2aee6016ba7d366e3035f2ac074883d4c128eb153ca547980a29e0d48e32ff0063c04c17154225063d4a8b0543f6f8278d4a7823612afcee0a36cbbea2a0d5998d8a64d7bb3c4b34f2a4995b6f6ffe472dccc4b3406fea6c0c331e52d566c97800bc14020f2ce76f5480167d18868b91958ca8ab5c5d7b3b38ff008266cfa832cf5497444651cd4db496aca9145856d8a0b6ab31012c1d83b9840a50de585e92ccf398e017e0821512aae6e28b35c3b610dc8d951b663c112a08228554fee3cfee2fdcbacf79f51afda32eb4ab974478a532c45e15c189796649b44c47c4e82752bc52e7d04414d4bf5e3b6046fbc9ee576ec316c2d60ea999c8beff00752b7f31adbcc4b00ef31898185322c05edf09aca61cc0861d3eb0cbb04ae79a34bd1a5053de0a2e73e209b0abf9df0cabc1d90d4f72e997320e9e02b830ec55ed6610b3f995ba2f52a1326008af188217663f2f5284bdb1d25cda989ea5b30dcc8f829d4b120b54b9a6031eb6c7cccb80c51b4ff8e07824455bf4197f71fb2e25f0e226614dc6771735a2128f5922d8fb81d4b0db1d5dc56152bcfe91438ae96db86bfa86ab00b131a3a12a58f76ca1fe4d2036aa5ee3ff0056e294ff0042399882d063d3008c512f10c71f48b5d9ae354cefd0f12cd9c50967aa362b3d81fd3286eb5cb2e7e49e20f898dd3dc1175bc43fa8f6a3050af6c2eda403a3fd469654007e7528687aa80a98177c01e1aa865ee5ec0aa84d56f8572c164ad7cb02869940bcb173045a70415b1bf350b1c2366a29309d9c5b944763a6094b287a4b263eb845443cd98799b0d9376c257a99048e4cc3a26653e5ea24b10841fed28abfc1962ecb6824c19023f73721c284a56af2c1341986b3e48eca7a98aa8db4cdc7a851fdca0be6c2ecb55af333c955c2909a017fa98250f8a4662fc5f04be87d300e170499790ee2b0b3ee0c5d4416b6cba32861a3d5c292f4b819608bdcabe130c1161dccf06b72a6e0d6a60b7712a0dc05821a38b97095c12e50bee6946e2d510c14bf6ea65835772ad34f75160e7fdc52a884d5d069b2792d1cebae0c57784580631b98e7fb99acea666adcea04dfe2781f799d53d28806fd5309b50ad2ff000ea3f41632b983b43db1fa8e0286b9752e17624b3f617dcd20fcca6733c083f12acc2b496e55c78755b1412fd7f2b30cc100328ea3f2c0b0555405f05a049b7d32a54ae1988e9c32a48dff00a9a0dcd76130dc0a2eede094b432772d5a91714d3d452634cb2df856604d900e5d431a252c9ad476c1995d5f05f17c8cf0978622bdc177f0c3dc74ac947dc3b2b7728fb597ddd85fb82a8276c43b42baa88554f296fb963754e9371ce52813c444cb50ad9618ee6028c425469bbfccf2d5f94d4587b488729bd40efc0545951f211630e92ea27aa183288c2a5506c9ab9f4cc11bc2dc6bc39b8606e31751f170af2ac319b7e735c41b8790fb8d8d606a022f505555ece07a2709ecfea51fe86a3d57ebfe08ea7d7826f41b593aa89163c2a626d7dc3770031934953057b98277e6527ab0325e207620eb729a1a99fa278a04b20d7c4210e39239ea76ca68ee10547c13b8ff0006e561429a990efee2dcc16b3ea6769d38b8bcde2d013b3718a698eb59ee283fd7090c6a59b98710a8ce807cc3b7d86d298e1d303c8cd9388ed736f97f730529e1706631f88d1034ca5da606c5724c4a750fa9934abea5731996788a05bd28ecb7e52dedf98398027904f6908d3f70aad8eea1d54b7547fc8db59ee0d0ad5d429cd6f705f7dcff0008341338606b289fd32cb5622d5d42d1fe92ae2d20cbe0e4a1f855690c95bb860b007677297466a199ba881a35ee766c5d5ca4b45d9df99e2ff31bc7f72c58ae7328d303d4fce9506898404baa3068c8577b965d6295da20742c431517913aea3cc2eecd7ab1bcec454efc403696bdee648fe912a0b7b9e8887ffb0bb81fbb8d2f0fee52dad22718572bcaa8853a7d402ea2a345cc0143f32d68a3aaefc4bc7da14a884d1edc416a4d8ddc2c922d2c563131dd52c8e89ea3d27b25b8284dca63dcfc6287dc1686310393c5dc050717dc69bfd4f2788a2e288794ef8198626f71707150e05caaf86c0e30809b5e6529ff00b2196ecd4b2e64dd1d4a7d43ee21dea75657ea374f8411f1ea11ee55dc0837ee1b0bb23cb53b2285a30451c9cd26c9558c303b4c6996d773c2cb04e319ce617c9605f5dc71597a2ee297836e6ba224b926b26caea0f8218066220ac0e48ad6505579961a96175f84332f19becb99165160a5c2ed610726a0804ef0dafa085dbc171f9c183673702c55d3bc44df6cef44abdc5f6c372eb1103eb0266a5aff00a42c202aa310492ebdfefd4ae2184061d425adb8d0cfea3629442960cb770d98ccb01d31baa7370595730d1a896cf2854cca953b984210e4d70f13be0e444ed14ccd0b0640dc73226bb81d832b9a61bc11c5b28b81aee66bf5022512b12840ce32d85f85b3b98d68faff0091d02c8e750570a5697a7cca0ab65f8dc7c5d503af304a8ba2cbd111556e836df52c8850bf422baf054f744d2967bbfcc3909b3675ff0092ae80745201b402e609d2866bddc2ccc9ea44e4e2e3dbc59fa8422af5359ee592d0f3123d616e15f0ae8985d41a1e07ed2ca163a81156187e65ed169bb4239a9b2e600854228db2f03e27dc53b994c952a33b8e65701dcc9061c8e0e2a5d121cb3a896efb863afd4f47113fd90b0469a0e6bea6da81bc27dc11842a58cd65635988c1edca0132400036b787731128b9463052662572ae1b33b952dec7351c67de5ff09e462b79788421e6bb58ca0f15ee0c657469a7ee5ee1865db53a446eeaeef528b2970c4bc323d8ebc4a92d30314745d984638ec6e33613fb0ea0b81f8d6860059abe8251b430453b694a082385bf743fde874fb6652824dc00ab2a0e733317734c4ea66885cc9e66e8a06232a308711b730726a772be0a5709c118c63a6033f98819b801c7f53da2eb12bb78f2f059036f0047b056c2d0847a72a7300375e4990d6f2eaa78b54d3733319c1ee06dc540cebffd971d25edee26fc8d7a98328ac1465b8aef5e9771d8a5a6c1286c2a5aaf52b16f10587dc050718eb04200ddff0003ccadec6ba61cce6356d7c46556ce1d12a512ee60b9457827aea6263203b6606834cd8b11794afc6f7ee18ce915c68d75dcb5580cbea515c5e202cf077c608c31d4ac7193ccd7c4c1f0ed159139b261c90ce393d86c3c40ee209f52b91820d409eaf136cca84014ca1e8602154f12fc278ef03e3d4bd9b392a56e48ac3bfc4c004a0d46a0d1176b845ad4dd216ff27a9704c366afa80b85ecbaff00c9791479a7c4131c5f0ebf531857ddd3e5984852e7bf70c15ab740dc2f6a8a4fa84bd8362fb9de8ed0c164583473a0ee17e238597d464bc864fa8a937dd25c8c28fe8c310cc5e62b6c20641371384952a5546281778618421ceb32be09c289323335c5781fb840f7dbfa88efa0276625dbd4a27a4292b307da2e6315239e3f68425e2e556370116de3d4aa25673f98db3ffcca15cb71e586770581349759a94ecf824ae96e81e20c3600cbb42585ca7da17cb07198813461bed841a15b0c2e95854665f748e9089c82a4a5a63d4c48e5df8956461974ad4f03ccc7c605ed129b3c4c58da21ea08313a95cbc054792ef970f828e66a071c3cbc0cd706e8f281fc4ab8197fb0d0436e6544952bb98d9a7865d1c89d47863c3ea3517511678440d97af532705edf31d306cbd12c0196aa0110d802616e463a952c540f78dcb95db41054ec75ee5850ff004261683b772e95dd344a4a5e700227e886b89cb99a6255706504c110dd4ae1c43950991c2a69f9d4619bca2a6436b950c2507246b327eb1d4b9b8b3be58bc33b8c65d4471165b95e6606525409f4c75b8bdc57666f6c56cfefa5d03ae512a1184a8a2f0c8885532fcf10e09537e42c9b12e39af8a41124a388454102d852316e11e9263c54cfb95c570dcc7e7978db1e4e197c54eb31384967b02d0f10e816ca9fd6840e014c4a998c62e1f891147897cd3432886540818e0e28770dc885528ebf8764aabf3c0398a45c421b8ab0c6b55a5ff68999ec443d3cecbc77794f4c5631045b2d9dbd4d98942aabf50ba3e304b5146375575b98ab0cad9ad8d10561f6f30556defea1c30c16579207486ae80f68533899e0c4753a8c50776ca8eb2d38b52b20e01c15286767c347a4b3b5f16e962c4b2fe15ce430d1fb95c5b35a22d4111ae8acc587af80ca44400d6668a66232c0c24e66fb51b744acfcfa816466ee55afe51462195955ee5d888cb3eee6140ab67f4910b700ee56dea6653866232e70e2a15aeac094f6ca8869e26b8582332cc29b8732b4f1d2e6820423a44ab8e786d085899770c1d8ccc9b3e0ca82550ae46aa56d11bb395fe531f8bc32ea5a5a5cb705898cacc6330752d543c09aa744b4cae8c8421c065c21b710962b9b3433bc4a38b34104a9d4b144b25e21ea07b8c9f112ecea25324d32454f913136786a086596e23cb80d4a89ef90fa89f17e4caf833b8f23c3a471a86b2d7b4b20831c6605526314cb20024a7300fc60020715952f5b0023c2a1976104b169010b9f11a4799c7c5d43833683f788a0cf12b1c52665ce2097af64654a95bdc7df89088f89f88fe66a75f06fa948e6a980dc56fa88643711bcea65dea526c7ee2335711e810cc6065eeb8af1aaddc4e4a5656e070422570f82010204ad1ad6524a8bc0678daa2b045908495e733a1706bea5fc06a1452d5b78d531ca0965880a8a9e6dbff0bb8ca9d88dc5cc4d111326650e099225cc6084cb11e039b8cb62f39755a8fd78af3a8691bc225cd42dd6651f1d0204094c7b1d4212a570b0852c97b7dcc29169a827b61ce5c2307f49e69494f077896a7a4c3501942d8d7a9814201898032dde71fc4fcd78be15f0df0d66a39bced996fb860012d3307e39d208095894c756ea08952a545c8634ca324c248bc19888907832d2111c284f26a6744bd92901430cd299a3484b836e4af88eb515ad53005d92f8b97f0ef9631e1e1e1dc771f806dd5a0cb5e5954b595f01f1821384d12f6a2ecc524095cb34818450308da3735c457f22532976ee43c3c9b84dd9462ae00d01291d502f8ccf6ee53cc9c4dcf5112f8ba385b848cebccf6d9a6bbee21ab2f865fc18fc0c58cb8ea06ec6aab7f8912d09150204fa87152a04af80b799762cbdf0039770aada78998eae506dbc43a1a16393fde5c310de4ac603cc73672041070d116528450111bd20a45a62e87fc9ff007533ddafee786ef1704aca9a15c19ac3fd43bb7908db5d4b446e08b55ac6664492ee77a82aa5130979786a024666644c4aa59a8b525e5b2abf80bf438904b8bb20218952a540812b8b4c9d4d914abea66c40eccad4b264e750730080c48d5b54646258e2c607613adfdc21b8dea03411dd4a751f59f59f4e6b4835d8817b5b94c170a431fe43731908831ddc19b928e275e51c7dc1e063e6318e157ee03343b3b84702bb5ca20b6ddb16155f410804f3372a39ce22b036662426a529eb2675c312a7d4b0459b2f8fd7c1ebe12286e209922ccc89a254205f254ae2a6465298a773108e468f7f50c393e59920cbaa2b2c83d214e16f0291f987158c30f3fd65db665c045d46696bd4a538d0ef39662c12aad8834401b202bd42e3d5b88a8bb7ccacaf7045a5fb9761880507ee56c58844b07100a693b962da4bd3b975a19443827a27a657d7052a5464d12883ed31d12a57150f95c1d37e84778fdcbb463ffad14fd793a626c6d59460c4738204c478c722a571528e060cbe6894e2cb28f113e26fc9eb8551068da37a50aa2576593dc066012ed43cd5c309bcd4c7164588c4b32d9e2a50c594f004b22df507adf5326484753a4944b09e90d4217de1a672fc4f85ca656210e936b3f133dff4f1cc7c2bf1c812ef115fdc433c11b1cfcc97c9708be6f8a885adc61a0f09a058773026a020180753d12be253c4acaca4c1116a943a972ef52cd41dcd40b7980688b19b78bfe0b8b0b748850d422f6950e2a57166a753084254b3833161c1f1b832ee5cb97312a24180994cfc4bf52f85fdf0fa32df0ccf9707a27b0996d9e7cc0fa9825fc3c7e15c54a952a6a78254b71150fcccf41830bcae2b9a9513926e31e38a254a9be2fe17f12e5cb97c2e5cb25cb972c8b2e2f17f1a9512b8a952be2c4a02816823a5c325bea086238d447c4520dfcd254b83c25e114d39fe0bf830fe07f95f83c32e6b6c3b76f88d693ccb412ddd41caa032c3596f22e5ca4a4090be6a95197065f0493c1164d7f2dfc0e6fe07cef825cdf1b46740968c57322cfdc00aea3ea32cb8c564cbbe1f8f5fed07f81254a97c1f09b898c394438b506bbe5d4ebe3df272f17f3b97c3775334e8cdabfa8b77fe65336d408b67c31c58d7f718b1446585e229631bf9bf587843f855c57199708b2e51e22594239f1a9dcb972fe25a97065bd31e79fd73dc78444fb949d5e619d02f79555f50260dd5198018dcc4a3dcf233fac728fb702cac97451fe34fe63cde782c6d81111128c44e156a102150cd26e30d71be351e26732b26dc41b310b3a30cecf69b9d7d45a6f61197da4d25b5156a38b4b8b145888f377c55e27fffda000c0301000200030000001010283f990880fbba05ed5383f98e7ef7803c49a37c5246228bad3f148faae962325bc6a4da8840b63420d3a7a4736d0c158273c2ae3e747034e38244576ec9f981aa43badfeace8ce098da27c1fd1c26fcb4dc666d2bbdac38a665194aef2b041531929f4187c336fae3c2bd304d520b03f56fc6fdeae8d3dd3832d462efa383bd21447b53618eface5de5d8dda42bb0b4b6d378a051a1b5350f40228e3fe2a30b006bcf483e8488e53c3422413dca829c18ddc7e372b79e6fb3bf88fdaa1e8d3902c1081d3a18a7f2b64e5f8db42d8a066b5f58179dbbff00ebf5b156391daf1bb9f4a1fafbab035e32d3d4255c7151922967bf7906594b780f013774ae92c252315fbd6b2b246e17cdb71afdcacdddf232ed47c9b90b054594028035ce5c96f777fd397d0e897088ced96e5e24f5592ea6ad7e8d3dec700f20c6ff00b68eb295aad34fb242e6b871f4a770d64119307a661b1e0d92a43d42f4ae7860438011ff0020c1cc8c4108b1cf41bc0be6416717d46852acaccd1d6a8fc86132811f8064545f2e05a462319e871a28b2c0c216dd9b3325efd886c003aa7fa79b0cfa6452206fdb317e16986ef9e3a1258b784bb679802d8538fa888fb1d87aad1b52e6bb57c99a10ca0d83fb7ef4dedbff00e48436c8ea1abdfdb26aae31409d07234cad132122fdbcf06c2780255cba2a70a8ff0090563971b76e9f460bb66a6a4d7d1e94f1abbc7222d4f18344b33b59a494b41b70f034d1383530558d3751f77967f1208f616e2c77717ef66d34fa5be2af8fb00827b5321db31dbcea020167afa3b98ecafdc6be0904ccdd7951ac97e4e5475e3ccbb98b7e9e327fe220d54a478a85f6be5f203f1bccfb42d889bcd383d32571cff7191e26ccb0f157c03fe49f1f71d8ee9a0606f5e53d6e103bc1fba275b5eac28be0dd8eb06d649f65a24699fd594fcc35dd80fa02c79ec963df576cf4a2b6ea5b2eb54592ed78edb3ef98f190283fb30790e73147938ecb7040811c02f94591c755d402d8b9aab010113d607938c748ebee17fb784906d8ecb65838cff86b1e391f6834744fbf33712d73a59b72ee4c64dbe8595132e556710486ee37df2b2d422baa974ed584ff001fa4f1c3ed05ff00d51a56def2119440fc0f6c5330603c2841cffe9fbfcde5a6e2b5cf75f318b1b3cc6bcceb5b7763bfdbbf7f6e948066f9bab118f997058df790fdaf0610b2d21664a0f1f37c9f749ce13ab0f6f39ffd6dd8c4d3f35748090a745d9f0b3272911e4dff005f4de4fec3b93445e5378c4535b4e38195606e7b84bfb2f7df7f8bdf7d7bd0dc702861f600410fff005d862722f4107dff00d07fffc4001f1101010100030101010101010000000000010011102131412051306171ffda0008010301013f10ff0075cff0787f5bfe6fe57923a4fabb7cb4771bbf8627fcf7f7b6cb1e9027e363bc192debf3b9c3568d9f8ce37f0f07e11dd2dd886706d8da6d3d8c7532c1add8ea5c9f5c7bca1b0edb90ebb6ddfe72cb395ce09ec4997a72b45adfd6f105f60e7f949963e4ff0057449df23ab7abb8187e7793927b48fa6032fb906daeb9ce0f1c7db0b0f52cb192cf5176661ea3f9494dea2f92f4b6d8fd7905ea201ece6c9c82f484ba2584f25b3c92c6fc845af27fd9ebbbdba322fb3d92c2c1b3dec907f67a78cb3f1b764cfb91d438a26d24030ceedaeb25f79189b2cbb3658791fd58d9edd4df645c85f6dd9ec941fad903d90bd5a70b5f6c7cb38f062ec7011d5a4b2fe06da462e4196de40837421b046eecfc0c367ac5ddeee9af1b1179d5d597f53c17b098b9375c6db96ed843de1009d4a7318c275983bfd00ef7c2dd8eb89aacb191f62311a8a37ed99d5b659c171a4bac7765b9dcddedfedbac825d4cb2dbadbbe5b777493ec6afeaccbb0eedff00b63833f09fe642f92e235d30bd93b6f02c1566ba5d4751db61f2d1ddbdb53087dfc2bd986964c17dd27bba2f91687e016c7d8253ab07b9d2cfa6d2711c1ea0663c251c032f4c67a61db3ac9390a6586b011c009d597519361c6f5c2bec3e109ec8be5ab93bbb7d821c9ec8ea663a8d5e7889e2cbec83ec5d9a4c3f180ddf891da7896f4d82e8eaedbbbd427b2c3c24b06b77f6d36fb06b04824fb360db33d4e08293f0be8d993eb8de1e0c9efbbcecbfb479b6fd20f6881b07c2fa3671d8ead0c6d9c0e03b904cbd05a7527d2d421dd9c812767d9802664bb282ce1e9922907b243d337cbfeb8f2c782c9ea074e1e8cde533d461ddaf7b38f1b34fec3bdf0cb49620cf2cfedb6cb3fc2c860a17dbbc6d04babd5a76c19670a7597786fa8bf7801709f64e0bacb2219751af91fd4f0f25fcdbc58414884797c58eb4e3383d91f4b277966c4eb86ac9a9d97feec3805395e1bbc3cf6798a42f4dbd70bc1c8101f485f4b6bfeb63fbc3ff0073ff00703ebc083c91fcbb36cb6fe1ea5acfe07222094c25165f2db62ffb2c37dbe7259c7a9fc16ca7d9e0321c861b778cbb10ee38f16e2038836212db166cc99c4ebf3b933778ee58cb7fd5bc0e43c7988ffbc3ea6c8e482c2e74c5df19c0696672b2ad9b6099ef0fb0433b861e06eda44793892cf1b6fef61cbde0cc53771dd8f6dab3c77640b742ce06dbdb793fcc6cc1eff88706db1b0e4ae5543d9b4e896dbdbae3bb0b8638abb8e319a48d9136ebdadfd92c475c78b6c95eed05b792cf070dd19f5743193c932dba4d9eedcf2359626b76d6d5afdbfbb56d21cff1207a9965b6582ddb6d8b646bb984c637dc24a058cf967f63f121f61e8ff1ce0e16138b596cb2f04c59c3324d364ab8d20e8cad9b09eec905b84f03d72eed4911d01b0f192f2edccb1f904dcbb84221f2c6e933786d9b79c36e5af3dc87154c33b233dcf76dddb1dc21d2166245ead83918f51a616c0620646bb7739f4cb44ead7b996fe33756c8bdf7f42856cb77d8bc8ee784db39eed16ee9bb422876245ec87e2f4238a2981b38ce4938cfb751c659671e5bce5965965992af6d9659659659face42db378ce078cb3939db7f79073b6ff867059c673b6fe1de32205bf8dbde7784b38de3b88ff13f6fe5be7f81e4e0e7e73fffc4001f1101010100030101010101010000000000010011102131204151613071ffda0008010201013f101fde0e1e1ff80db6db6dbf47d9dcfd30f0fcefc6ff002d88378270ff00c88f8df8db6de37819b18b78ff00261d794e18e72c7e0678d8b6df9d889e33674bf64db0e556bc442c836ca752bc78d8ec97575b640d6dedf9ff00325988d7a8ce6b81e3716407520721a04f24bf24269dd913c4c9b26ca4d2ff00200c27838de77e1dec846fbb6213b88dd08423b8ad53c97a33a7ab7a9622db8174c6c11f9a049ea0dea75967dacb017380d87f23d9bedea03d2c5dc3c2ca78de470659d6908ba3277de16400cbfddfb3d90f57793c09b3385f9f61742d9810f7df24ce98441771d86535bb5de445ab5e5bbef382d7d90c02e5b98ca67e48304752f0fc9dc274b29909dc478da9fd6cb8225df7e7c8f7e0ebc908237811848f649eedd996ff003831786723b20f85fb114f6f351772e12cb07d6db1dc1cecf223c8dc1bfbcb499c474d3890f6874b7862f33ddb04f575b34bbf3ed96d831b6196de527ae3378ec11ad81aff002072c8f1b4f2ef2db2c97844f6cf8dbc96cfe96eb67391d48b26c249b62ba42629ead711f3e1d7a4461cba12d3b1e59fcb1b20db6d7cedf97f89d619cec7196e272fce86bbb37c9fb4631913ab5e59374b184f4992f57f39f07b64e461a965eb9608e58847a386ff00db2384080bec3ab7eecdd760df6ef080cecbc659c76365eb6988ef7e29d1fe2c1d8dc130ea380880c2ed2177a08d5c94f6de48ed2fecf7a9060b12303587493fb2ff0065b46de3c4a3b257dc1834db3e1b55f96f5c658415cb3319d9fc5bfab1f38e177d5d22f71cb1a598bd8b35866c2a4fe5ec192cbbc967d59bc187576ea41e8865df044b33b8bddddc2db2d7a60ba192ced93ff574bb6474896c1bb777ee604c9d780099fe7c648ad3be1d70f65efbc65b2cee066ce4c6bdcbc021b8d95bf627bdf3ba66fc23574b338dce058ed9e47781a709b3a91b790db2ef56ed762059bb6cec8dd8fed8fe97b55e1adddafd8ea19ee59c5a70afeeed6cdb1dc28dfd2de1f78716ec7b672bcfedc7bdaf849dc3314dbc3f32cc7211c20f7356d8ea8fbcb397ab7678dabcb2cbc78836d7061861b781ef8d99bdc22285e0058b163862cc89192d8ead9956786d30e3c5ec703910971e0b3c079c673adadacadaddf04f2de365bde1703e23b27ab572dbde37818b335d9e9f3bc3f2b97bb782f1b929e8b135f8ff00c867708508c73e0b7815ee7d2dff009003659f76abc81285976c71e1bc432f335710a074e5e12ef90fa958d975fa2cf96f51c2484ec1ee3cc82ceafc8e0de2cdbfb27ee0b6dda61d25af705bfb643a86269696db6db2c3d5a4adea5c93f6eff10e69070797e641fde3b9378da319fe25f493c58cdee57486f901acf9a4867078dfb3be1e40b76ec010404b92bd419f1b0ef83b5dcabb26c190103d8abd599ac7181bb43a83d3dddda46fd24429a309e3258b101c6ff6b2dfa2c6213c27f997796c6db666afd30f8806301d41f44b9e700b0065b77a5920d9fa9d1dc23662707a8acef4ea457065d641e49166584a13fc4a78db6d7952125d82591a8797bb1c3b216ffdb63a581806e64ba7b0018ca903d5943de203c4f0afc645b33192f215abfd71d21b7e72cb0803cb6db786db6dbce7c2c3231d729b265bcecc291fd427fcb39cfb3659c3c6da5a5fa7c8dd5977c3d5b6dbcee5bc1f39c6db6f3a5bf0cfd9c3c1cbc7c7cbff00079fffc400281001000300020203010002020301010000010011213141516110718191a1b1c1d120e1f0f130ffda0008010100013f103703626915512922b23da0ef7e2ee6c4b8b1205c1ac9c64e30d27c30f93cfc5cbf9f3384647651b2fd7c46a78c16a5c58fc2af80da97905ec5b0399867509718f2c654e52a753a8325f732a39886460550acbeb62db8ca25d3d4413a200267b85e646fc4d20a8a92eefe0a51384e4d9c9728a9446a771e3e287e473f0c53656565b1a8409dc1f69ae2a616b364c0062cf31699cbb2c7e389384af8794a9ca393ea5fc35f0857c28f8279970fc751f003a4e8ea1508ba8373844d899501fc88308bb0a3001a47706c3939c54d4d21521b216954ebe57e2fe0c61ff8392a2f4945cd076bcc42091d3d235ba51e6510abd478878afcdb04cbeac6e53b9cdb2f98751d913dcac9c6729505771d3e3af879f8e32c0c753ca2bfc964644573f01431f1d67c035d419e2364492f73332a1a8f48b085ae216e5d661c012a819ff8162ec1b80cb82f1b8c7e2be1784511d95907328d425c5a3cc113b181cc5072c0b1bb63db09556fee5b6d92908d3d4e1707982645c452355064e47c118478f8ee372d51647588d4ef30ecce65062b59c10b7880b1d81532b9c389d88220fa94f881db13938ae37e134725296401181086caf854fa80980f31c054f7058cf886ad706c39b77b08c0ff00c0104fda0854b9fb896875063d5b844a0f772c0edc9371d9913faa5c7785948ca38f830258a970e22773a9c11d731e70a806a0ad4388c7602e53a43133c4a9b05945ecb2301e623ccb7a985d409d4a475bc4416fe26df52eea63c4b91d6a31a9708fc6012fe4aa2565a4a95ca87b4cba2a9b5205357143342d4f2ee6755e0b58431836c0e24f5f04b857cc4555cb2f98d21992f3fe20e621a8a45022e9a9d416ce3989c977294b2a6e605098b486f0dca59706c0421a3c43e08e4d1125923b2d8f52d0f52a1d7d2f7b8eda9fc47bb03a6194e6329dc4abb6725cbe6e2a25c0a5e53c487810af52aac805431f18d8ebb2c92db72ed25c4011e08ceb881e112a26e300c0af86090a1b09b37a461ca402d104651b8656a2e1dd413cd929940f3752f52ac2cb5a11f105f5f0f5883b8f2d99472548e45b536280da732efa3ac637ab888e0f52f7b4ad96f84661b4191b077cc06904f72c0d8b66fc47480d58912b769dc1616ed9f79900400e4a2d56cd5f897cf16978910d5a2760b6a23ce20636d82d02de0959b9d990021e8cc4c8d7a9ec4ec8707c4373d10068973c4db880522105c3e3593431984495311690ddf93125e452c2ab209709ad6600b0ea3a02e98080a3dcdb0f495950f3157949545eea159d3213bfda15ff0024b6ff00746507a18e1ac7a8f70972ad09c6151be980f31c9477242451ce88b751958aaba9ca8bcbea1d66895455bdb170331228cf4bfb0a949d2725f5099c0a60ff00cf0c610abdccfaef88e68d6ccf974ba8e0000361cb93d47066bd28dbc2e684ab0ccf52cb82a981932c8897e7e5d3226caa592d78853a8d09615017b08086240a8190173963662b05bcecfbf845530fb651c8e498dbb8ad6b8b84303bdc6879ea1cad4b8562da8cd7132a179b30c8fa95b67ece407ecddf2ca3ba3271c00f72d9707c4c753ee070b1a83f63c1a04a547bba4b0e9de7c294db825577cf32d6294f5320078b95aae0b60fda9a11d8814ee7de85c262d0bf314600d2aa56ac5a236dd0c302a1cd46b69d22004ba059428317258a9a144a039753b820a711a67536d62b1142f80d2c7114a9fb1257b812c8dd9cb614084db410e3e068f944679ac02f5713dc1753fb31e7e4702d61a22f18950b0d9b2696217ac5c0982cf328ea7a8bfbcb00e6c434732da1f1adcba4495df83dc25c9fd80d5c85d4bb96ee244a86a22ec257abc4e50be239420f73513881a68646b6d3da01c712a29e20752bb84f0e25155461ce3d09a916f030c5efc443b1c455911b31d294a09d8d51685b70c6d1c06cac2a78394806a87d44f510ecbdc344d4f85a23b18e7da27a8f71840ce3e155cc51af31df12d5383051f511ca976611bae2e38090c6cebf659629b57e4a2aeb002161b1de03ba9736e3135e6e5bc357375e7ea2b8712a06254b228ea53cb772d4b652977e60995571dab81717a4390e4e3a86f7170087a4a9e9dc07134f3156b48505d7a9597c1dc02910099dce8456b51e129751425f58c656cf737e51141476e2e8205d55b16655ae060556a8415db950686bc471d8469dc480b917a31f6ca0b767a9746cbd8a531763c4e1b2fe394081b027138cb21482b987105559405451a302e5d40f32bb8b605dcdd4d86d199250f6c7eb7a472d8f6aa1515c73173d1af1141b172a5bc3530c6e100acb88e18ca6e65ca3e9963e0d737e4478dce6ee6599712a0163ccb582dc4453399e7b905d2b65853b145a36406ac6143560b020d41de4226b5d585f425029daea3506be888193835132d47883a02aa32e0f192c14a3cc4028794e8617539100b2a2104386f9800283c3dc126c1a1ee7ab8ad718501ced16a9c2b7084926e31d45d8370e7c728f3f1c895bf0992ada9498128215b155073537b15516ea23a3569205e860e2196d751528c5e5b1dc2f8105711a11f54695528996d8852fa23e407d4ab9567706d50317b5b23badcb8ace86a20d200305d258c40238545739962aa84dd9ee09a82799570fea00567b4a236980c345db2bb2d8a0882656cb254bb260aaa734d6580d95dd4a98a0ecc43528b1e9395d2a30955330c51e0894722355d3b805c8770aba039210469d5831fe488eeaa3c2233028d42834ee26f453c9f73dc847b05b93c088ad65cf0437e0e4f823f1107ea3870908516f4f30db52adc7665f80c60c5fcedca0f3954c5a39c771509ecb321a347390aa5463362d522e30d3f65fadb845680cea254bda8faaaeb2a502896fecbd318253b4e5440dc2aa0f655c0f64e257139817b09c4422da8362c28bbbec595578b80d1847ff00de02dadf309076805eea7ec51597269318a39bdb15159dc5bbe68900f1704f4e2541625c647ee110ba8bc11761c322ba534c708e8dc07053bc8b097dd5ca5d27c42d401964987131a34d9fb0c78a349a41855943f12d4192a07c55f2644435341c8c66247b620e18f2bcca4fb99990764757717020352f543ca2bb3f009b9827512695acb32ad5a5ca36111bb7e263824b7baaaa70e3d98e255e63f014731ace4611594ddb1ddf7c11126d114aee2006eea31ad97411c044a18dca188772a34ca9394f3343a770417a4102aa7ed43db3700e1687a80e8b0e1ea06bd6e910a8677117b2ee72a6c88e5540ad321fe0585a85f2412b2d3c4b2c1e51b3a3b903ba50bee52895ac8d2c994c51096c336845f2a1d3c135ab9e68a863b94f32ae6753a832e11061a96c6b3b9b5b57c8229d8628afd2e5b36b9770d4892bdc69035e5ea556e5eae6185e60466da2d68d4fa9b272187103552a60a470b9f3060743a8fea14a88e25ac16886457518eb49772810d58b642394c6e0c3dd91e7f6ca0017db002883516f62e65d9ce4b743658d6da06685b95e1c3119579aec0165d4502f5e58f850a9951ab95cca68b8b65c0761efc428645a20c08398a583dddca20010dabf0ea008a9ab88f776cfa95c79960576c86091d846eee7c4bcbaf85cb8f841899c140c22dbc8d1e082051d7980307c37060b0ea0934ad08c403e52eb41cc46559aae22a57b45435a97703944883075163b9d41dca7cce8b16ef70c2c9c004efd42dd45f9a65b295515e25d41c83f252d1b5e23295dc3a454a7cc20d12fd4bc9cddc7c71b36514b9d6bccbd0e320dbc42685a6042fd7adea06b83d42d25cdc778a2d301cdcd12ab33d9a9b790e5471a5aab1dbfe86392df5100aee58d169841d8b951ca10c221c3fc4fb65df3f02771789c4b45e0a89626ff00718105af71d5c0e22b170bf85f02b18d1b28f538e0d02533594d9752d826c6cadc068f705a2a9bf542ebcc17ab65c258ff0029b8a5b45b041cc015e6578c11a46a14a4605c72099fe657b669e637be25e4c30f02e550ea0af97ea54fe6010ea5c1c6e7da5c15e259c30581c454be2055ff003287213ccd8d73845f0d43a902a130aaa020187a4e2f880c14f5cc2057a5f533bc62a1fc6180469a2bc40349783a97e132a18612d2111e42ea129aec0606b022ec15c16ea55ecabf307880dcb0301336aab56fdcbd8a440a014ff897a574f4bfb827b641d0f2464fc22d9f9c42e2140aae0fad0cb7ee4c5b796a33aff264db5dcc4031f92b75e8c69caaf70454c5bd97f51b9f92253710596f241b89e1b8b59f00df31814037701536ba95194bb826506458dd640baf81e129ee55392da6ea5b73c4a1ec5bed638b222aa3e58b5bc700bf7141d483695f3bf26966a36bc2c1fb8a463f880d851454a41c35f750a62b7b2aa15041d278945530f711606394e32204a0905645bb431b1a4a242b4b23c8eb9f87a8c53a9b903b227f60ebd9727f63ab07209dc78da9c309c08ec1094ae3c1dc1667955ec4ee583ba0fb7513178846fade623b38c8523ee1810a4383aec06cb6d3cc4b49d84bc7be11515cea698d0c95a98b95d5f073a9f916c174813621edc1b6c2fa811ab977d2515b57cc60b058298dca57dc19e615f23e31a79810d2fc3030e625232cd650a1caf13b72b0123a66e1cf61dc60653f8cdf5134c43607cc1cda958592be080a1e2c00bc00503c43de16ade5475695d771ec308bbf51638daa1f26a35b768cac66457132930255bcca34f9c34f71d4043b0979023181fb3802608b7fca6915894b84fe405641433f2bc4ba67d931f991565fd87a8c86ca68ae565cd434a43f507fc977d0ed3a636e2fc7b95975e44aa9ad86a12b63ea2922a92eed41ea027fee5955cc0f4a8456ad80c6efb96bfee9a41f50b6971cd63f71974f54c52d25b5b7f62be7659c3cce8d7ea72d1ec8527f9c15a33974cafebf51fc2a748208e31008523f5398d42a205963066604db97691c95d2ecfa8ae9557b7ec81c2fa0ca997342c65c3ba1ab3da17eb8392a04a0213baee19c06c793cf301d401cecb23bef6e980db98a89cb1b476fadbb335d6196b900170f31997d10533ed32439b8f8f8a453dea8466e855d276f11703405c1f11276bb7975cc4b682aa02c9f7843a8c1533fbe631313565ea4ae292a516ea5445a4a6f88b341c941f631a2fadc7f88cdfd40231c9145711dad605a9f8c39566358a8b695fa96dbec188de8f736d673db0b5c889c8ca941a860ed7b97f3cc21ddfc9a6895289707bb824a223515c83394113c59f53c81393379031c8f07d304a4abf30f6e736439008b56dc084d815410e5f29ad53a96316043c31fcada75b3cc6c1485c0c54a828f310c03015cbcc02294dc6d7b5abf7130d17b04427c20334259728970ee2a15e0808fa2e1e17d43655e2465af49551bf2435396462acfec41dcb2f983612676356345cde4f4c0216d5702c2b4d7132ffb129aa0d7c15d63b937e2508a4f34f3105bae9693f65c29b0ee2482ce9cb597056a6dbd5e47e42e501307cef4de7a622690f714e1afc8f394b7ce4bb259e07f938efc0869fd44cf593865443bfea7d744554834b2886056da82db0975398799ade6bb8dec7535eceae588bb9d4c22971ce388d30e2209c117e4ff0020d5fe3005c787c11eea34643f5d158f2788d5f51e9b80ee4db57995459563fe6720a2ba27003255bcb1fea4c77754ae3dc72f4adf4f886b8a68d42eead6d9a764f718cd2cb875015cb1378717384544544d552cc29a64a84d2357270555761f52c61a94d3d5f72820b496ff00ad953f619fc7862b5758f67129414e7d40a8d2a2e850b223c82c6b9c0836ae45b7513089d595769f12a7178e1fc960822e29536d944a1f72e25b7195fb1a8c82d03b3d4562b55c7514a5b72fcc50e037432ed8945ec10593aed9cf5a7121fc83952e183f206707e40382abe2f2fa810dba844db56f1104f33ff612ef705103d262815c547d45bdd46562df188697d16002e318f3f2bcca970b486ad137122af328f015cd491a2c413b67ba81b511661e151aadda3d78a8904000e6a1af3055ab985fe411c9e2a8ff00b9447cdfe611544d308841fd82446b106a3ad4fdb1216cd9a1f716eed57cc4d171dc2e110a7a880000040a8e12606cb6b0792578bc390fa6594397d0fae425d8dbaeb0004a72f230c6aa1d136e21f8d944d0fe440f44b7d19cdad8387e43e41c85becca30de82ad8ab9f72875f5087194000eb09660386d788af0cbb986b4e22a9d0b42065f0e259083f03095e607a8a880889b5750e909e602a8e597b5336103cd1106f37cbc704263ab70eda0e3e98b13eeda83a0617e621d615c00b57d113036efb5f631db037e49c1eeda25e15ae39864ab3e3b9c3ff00034ac36c5d1e94c322d0246339a7c42aba58297f53133412d31a6c96fb18a932767cea19028597473016aa90e2501e3b96dda2da632b1f883c196aeb6d3a6252d85cfab00278f60d7d2cc9600d1ccfaa099cdd9f02f3bce236289e70f113d21aea39a48aefd12b0a870584abbd3c09b202cd8fb8a815a181328859c6f23baf7a09bb8b0360f700d5b62523e63c3379f3e5b8761651477f25015fbf72f460b68b604ade8c76854a6e68f5081b0d671164bed888f044264dd04770225c77020c3aa6af41e600a82cb42f5482ca2d5427001fb9197507a04a5c5bfaea0f9570dd791c0461a0af80b0f2d0d1dcd9e1624f64bd2ae82ddd7b3620d972ac62b134e31c33c06194bb25771593a9d4bea50b856a4b8c9c08aeac5b63ee3c4b4542a4454ac23acdcf88e12a3b4316981a49b87a6b250372bae87570d02edac7705607d4cd7e10e1e2561094fcd9d33aa43695034bb67910d8820ce443b806dbdc35852c9ea507d118ee2ee003b852914372a0ec88c439048039f68b5099268ed14113960250a5e5bb7f197aa14bfdb995e8e74c73b5cb2a8bcd57fa798aab7d84fdb182bf620a3d128fa65833c5f10892d49dacb354797a82e46d1ba7d4b8d22d4d045411b6db13d45c0a913b188f7aa5d101c77104b08f39e366bb7e45892ae57e00ba820a20389683cd64bd6c3a55e21666c00bc03eb4aa81b13d552df110f0537dc959324f06c606822d5826ff00cc0e3ac9f58ac499924f08b793ff0011816d6a14294e461d8c1f10da5a8e3bc4b23cecca94511503b828b047821f6015e74e521728c21e00f7074202db83db32a2192b61425f0bc9071899ff00404ab21dfc40f0c2c13a2b2a72720e1331117f112ced959700a52ae5a5f41785058b94cb4723fb00059407b6c0a354a61281c3056f47c1a7c33b874d9557e45a24a2e0605c8c8f97714bd25d8f9223dca6aa067e98437774a425b1a45c2eb0fecc890a9e46ed880147b01a07da5aeae86dc72f87b217504c5dafbe9283336879420365c8f7edfd424b0df4f33005d31d0f1110c80703d9fd82250e604a398ae2de619f86ca2572222fe42912983a8eee781c12895c46b8c8982e0702ea165bc1afd41707b00e0fc540fd0002c69574bd10c0a2c307ec87304174701b58187b54d938fb8937a2260c5585f047aeb06b71fd3a63b365aced53990a9a624db02a62b0783003a100de7c2f52a09632f73e3a86e08c0f70981e9e2eea6190ad7962095860771fd0129da16c056f092f0e7be87fc5e6765f9ff73c9008a56872c62092958a3045f6204b01a3083bbc2f6287a1ab5e1815db1b4d3065bf6210898a42a0507135a3b8afac981ea26aa25c6c9d32a3737ea30b5a8786aae24f052faf746b0e55e3c7f71e86efbc396145688af7b02e9ec180ec3c3134734bb0af334730e5105683f5b04346b46a3c478b9496630b77425048487670ff008677a056c1485ee22b5480e2eca978f30beeb22fc2c7fd97b76a9d86329c816acf4217bc44529e57980dc06e59bcf7069008785c94b04da15a2fc7529d848e82a52ff2bf912246defaebc12cda8d86cb0dfd6fb0d4c969ff002e22abb1ff00d4a8babc360ddfdc1561134c03fe9950a17a8b68bcd9af77286f2dafbb8f8711508703e602081a636cdc1f110d958ecb9d4bd2555a996f480b3731e655dcc55e0b97a51ff282ccde43e23d472dd1de7ae202e3b1b2c69bfe45d31332bb37acb7d2c244b623ad957c60f8d8b81c6e547896ed3d1c5f65d015fd4a0b79ae22e9abae220ed399471d21c7d062a08ee237c4d19b3949528f2cca5724a90a711ad73572b68e13c91aca2623ed7f53810cdea8c233d5051db05bea80ed5ff500750827f6053d1f959929f09f68a456889bf64ce7411f7c3106058fa80bb25bc4bd95d360e810f609b5ca78815f91c952acb9bd1d072cdc1271a32a81f1705b6d1e62108044436029cd95fc8ce6724395d4fe1f52f3c15354e56f9cee08f1281b9ea02a362d1e9ff072c33859693e2bcd3cc34d54057da6ef186ae58e19467b82c5b45a58c1d81401bb4cb5e213581e63223144554965a141e546293a2fec4505ad25a2c538a58e9dc3895a764ba42d2da3ea10e885c1f6ac3fa8408711fb87596fbeafb8aa54007a0ff729d0e27bbd9a9bcfc1c99aef547e860a008c3b6099ea1664b5b9f6f7158b76b12ae9af32a4a5df984473420aa1b2a014b90c6ad1d988b94426e0c995f5195d1a2314a14cb5fba0871ee6802eae7d865f6ced87f4e994af5931efda5b97b22aeb2340d168f11df13a5acb8d8154365f64e733c2e8802c9d6f997e5101edea02d5adc7254ae5a8e970529b5300814ab2824a97a25d44ff00136aa3c02403a0fb802bee71ce8476012045878b2d3a81470382bfadac6602d438154efdc2c98a46872ffc4460d4b399761e6eabf65d8e80880e9d87c408b64fb36d7b95fd406fd0ff00b873de052af27701549c81c90f0341982abcfaaa9c6ae584dbd91ed894a69447c11310d731fb6c6ec0729b63cc252f51dc546911945bcb80ed73ee3a15e02e3efec57611e2f319084038fdac22a62596fa97b23b3d3e254ab1516d9c32ba6c4650f245b6836144e6c5beb709c4e607da5705414bcf1034bdbc1145b9d025aec4ccbc25d2c45b1f306ad4344bc96864c9972756143be388dcab607ea3cb11fa46802702b19e73a15fec3b090fc403d2f71552a0683cb535f323ac0bf1159d58e7ad2577785f52cb2f056279869a0426824401a41252165ffa94107cabfd205f511682d7c456dd2e84317908be43dc20a9bde23bf008c5df27b79f5121442823e97e2115ad06bf89c9a88a0d5b7345e3d0a55bfb25a0788a5791e511876835d974871164b3c1b2cd7df138eee3b40546d3e95469dc8a415c036bd0fecb5a6f1b7ece6594445622775c90cbe950ff00696793f609ed782dfd4b5558b0be2ddb9436e9a1e4f519d454fbfdc329f101a6a4ed8568e61004add8511e61bfc4caea868fd65889a624cb79012cf2b118eda80713545e221f7e616c23aac8a147e4a9a3d4380f4405428be09780a2176c336e86160aa9bae9002e9802ad7982293a9c712f3197dcd84fb947c13450e40eb0b63654626a1c7a8f1c9d9a7d42c63e15a3fbff0071255bd3f84d41ab2853bac6bfe67e3a6c8cacc0f13947d113eb8b50e08dddc02b3c0be651c7e116de61b1bc9867a9317b86f1878888f302835e2ee2e834efcc787d4b63ab18f2ff00ca40020601c8706c5f8704515f6c704dd3153c1ea253743a2bff00aa0d1b793ca1bea20f5d595ba43c82d473e2db4d7a750b2e1c3b3f91554e7537c8f883652b165ec25477d6f321ced9bf72822d699bcd2bb17ba02aed5ad2ff008266e1de9eed36502e09383cbd4e2cd7804583f7e014f7916e4ab8ce3dc5849406e149dfa854df92c7ae2359dd8c4d4bd05dd7d47aeebbcb0352f8a541dd59b6e239ab8ace08c59df04b570128925f2e4a330e5cf73bc895f50cb20f0b1023812ecb369e22517885879828f85df8d321ba20bde325822342b778aea0a0d35cb18d6a3740d71165c6d00d8ae59d437ed04576cb95c72d8ce7d3c915885ce37aa47055562ffddc427ae6e33fc6b81481bdc257cbcc57c439156c4b8464304b5879952be2fbcd4b43067328833819bc9e881401f3ee27187a5d476b070accfe14018996667311f5d8b8fe4421ebc16fb63838364e875f50b40fa83fb041416763ff00c4a6a3e50097d454c03d6eb033320582f739cb8aa82d5e3fed1b3887797c40179b396a0f482dc0a0bd3f52cc8a54ba46fd604451942f761e9e4afaf846e0faaeee1262bf640a15bd2750b5565ec4a5ac163fa8edef0e6009ddddf32fa8416c87bc210020e6410400eae139ecdfd044d58aa3ca046c05750b4d0b32541c307d416c2f65972b0e882b79e25028bf205e595454c35509eff7008aa9641032adaffc4161074270445f97c2bee2958e5467a49485a87d97123ee529d097a9cc716050c4bc2315bbf5d0be3b2048943761ccc0e847ef20b155c82b262b4c9414a05f15b70d9597c0f312d882a88a80d7888a682684072cf8625431c3c41ab398d806ff007bfd664a4da9aa3452ff00cc2721f2dd3fa60f2d22596e3f6e6af7d8c37f90893ecaff00b19421840e8f64cb81b4d42189cba04bbba7a852d66af04a7fdc4155fb7879d843907cc5ff00cc59b815f5d109425976da4b5a5341c0d47f08d39deb29887f611e23c1ece664b9538556c7a9a6ea787084638f44548f64b101782d0c120fb6c494ae7d4370e2b7620280f1dc32d9768a0b6b25d464b8344ae014d84a152984814d8355fd80bcd5511506a8e26dac5d4e5b92a08c3384203cd4bee11683b8d89cf615ccdf31bed2aa6520f59510d4010ee6203b25b57a864830a9ad3624aae03cef7f505858e42933c3904a3eff006e1cedd31121a51286b4bd51fea76adee0bf5388045062ec606ad2bec07b8d19ab509dc4a3803202db6a98a8d91628e2168428bf9c464b86b20f39b7f91359dd50dff1a66387eca802c320aa57363e605aba3c6389b4660aa653f4817e4a31533fdc3e470641ec8d5837eba3a3c647cb43905640da708ff39d9d459557157ea1bc256e716a8aa87518a26878f702ba58301e44f106a5b4b822a0ac8ed57a7a96c054435ad7a84ef307038b95416d5bfd8cb253a9689376283e2520b32ce5e19b7768b404275dc551e405c3d52d51751002a04d57b97b284f07a8a6b74fff00102058abff001340d2c3dc4a912aca8e960361c12ba894837960ad545cb897fb4d0e5791d180b8b7c4fb4a2a06c6384ad8029b195d88e60721b57f9dc4da974a4189955f735c8999dab978fec0f7949fe45005b28ad50b38017d7ff7317918db6af47d44c6fa8b7c7fa8caa21f4236696a918fb212dc25dd73108b79a4e77cc2525e07a9456e5f45db05aac6edc14540c27619dfa828042701d2199d7513fde2a0fc60bf9a4d51d74c3f7550dc37d054310c017f67c4244395d3a3c11e6e80c26dfdcb15544598a5c40b7e2d8ff534acdb60feca518c2fb3798e5572015aef65e99e36dc07a620b70daf7dc390d8956140f2e6fd4535ff00ae04e58a52ee15f435295aaea50c1c21972f71ff0051dc83c9d3face55bc5cff0068b5247758ff0067f414bfe217c5d22f67ec64bc6904d8561af31612efd75100a6bbf372af0095b7ea08220838ff0098d1d606fc7ea283596172e502f1b2f344e215b76f13ac6226068e5509538455b63218622bb990439251f182a726728f1f1cb0017d64d7615ba26dcbda689a1d0f83711b7843414a78d89d2fbdbba8b9ac1a0b2fa8d712678a810868b8acd3f61734826168ebdd903572651555d7dc3b83635e202cbc90156add7dc02dce70b8754e85159142ebdcdc22190c98edee07bae93a9d75f502924d5b05ff00218fdda9c0a270b3f22d1b7e34963de7fb815a1af6282b6845491fc881aa5bc103471f446b8e9bdee6f515bc601f55165d93273161619602304015d208a18ad216da1bee73732403ee5e86f67fec876d7cff00ed1f345cdb32c9e82ebd4a5bf964e1803562f26804ad9c9d4416db7983da698f49505075e25f669241ccc3dbe9102ca281d54a0e46b191f429b58c82f00c05a0760443cc39874bc79967988026260a9b2788a8ece187a4b97e582d844a633f894de32bd44f50141e17c446506a8e03cb183f699ebf51cf50607bf7185d1503aa952aa5d72a8502e493c2ea0d41122d87a4344e807058be482c0b6db1ea2eb85efd045acef75ae197ad5d60d411b17ec44168d54146fa88c2ae9be8b7fe2684260a69edfd82cd342c6ba536a57091217e3835868094b5212df68c17172c1152c85ebd63442bed550ad5a2939b2c376a6b0a5ab594bd7dcc4c53b691752d7e2d2dfd8e0605d6f38a5685a063980839fa255c684035c840eeb3a66c53935b94ab63c41081a797fc474c795205fd42d1dc38e3fee5c58216e2b46b2fba89e3e77786d128e9a885bd4eb2890034b514c274c0780f777b2b68f8049aa6bce40be2d53749597f72a803c51d671f12adeaea0285edb4dcb03a4c0e86734ea0fb845204d3dcb3980d89564a3962a8869d705b1450cd883e47963b1638a2238262c1cd2ce60915fc538b8288e90461b149830e625f7114072b897a6e3cd5640c2a813af67a95e1401e68e6c0aa50a17c4ab6d458871cb043b701de39ff00110052d12d3d4c0289f708815807a96cb689f8f31416365804953386540b75e601606a1d55ad4ee4afe2b34ac281ff00e322918f9f47f8152b7f80d71f3d7e43a493c0028e879f3081791dec82adff0031dc96dd54bfff001066ea13ec1fb6e4be33d1b90debb5861d4502b8cf8711cf45950295b30e3a156bddfbc9ae2726c756e5c0e43a59a728f3d450a1cf235337d6e4d41856285d6f4f139123d80a57f6ff0090ca0572073836dd2ca03b5851f3d0f107dd139357c10c825481594c39c6ae5d1068eaaab32839a61104321ed69e6d7fc4560c617c5a82c2455ab7dbc1716e50b752356fe4a2f104a3c55ca1daee7ae301d2155ecb96358ae2608b4c39590346ed2555f1b7fc25e36dc58281ad2a44953d1e88743c389832057c48c3da303da72f50a704a5a4cbdce31e476caf6c1bf90732f2fb883e91f315ca89951c550af31ab62c39b08c5e70b5521516b853176b0c9468b287f6214383a95ce654774ebe796245cd0476fb9b89a108a62ef0f13cbe25c8363c4b80be611f3d832911880aa86f4f03ebd478c0dce3c7a75b104c0dd267af73330d0556d2be89b0a8ad02e9cbf71da76825a57fd2a0a2500bd1755e903dc5edb92ec187a0ee07b4522ec6b5f05c05b9dcdf368fb8642eb30aeff6de44d6e7230f8f1e9370aa53172b7e6e17aa72b1a2dff105a4b178bb75f1dcb0f8832c196d6037908dd40dcad6d79f32c41258e956bea36a2b29c5f6f8e60740de12969bfca61a7c42dba5a3d1446a65417cbc35ff00332bd12f74fa8384d71c1727fcc0a8204e16d51fce6341da07038d7bfa8ac23b480f2ff92a521a550cb6ad8ff2cc6242d1d443521e2590144001ae5ba9a6137973057a588d16be650ba5fe20b770a45b44dedf0ae25ea1d819064388ad89d1290ac91082a1cc4f738476896789cfab0cafe9175b077023fd3ee201db45090034f65723ccbe9a5f4ffb9501a9fd4a686fc64c0a9cef3e254df6cb8e45b0b01cb8c8b3657de64bc1fa32de0f505248cf35ccb1e2b7f146044b306af0a1d17ee3dc9ca06e3fcbdc37d4045f4797dcefad3694743f891a9b2e08df17e3bfc8645c85857496fa183b0befff00db71fde945bbbe71d442039303ec840b9668b15004743b12a69a27bd822794eca5d599a77bce1b8be423780e11c5f3cf254b17306e37107ec078e201da9074d4293cd4d99790a72603b283548ef80d71f447af955b809b28b60d0a52d3ff00b8848e596f2f0f18ce54070046c7c890ea0cde6f550971101cb91ec0c1fecc481e0fa8b02c23f7e2364ed805af12f4eaf44a9ae8ea65182f7b9ca1e8df72d603ddf026a6fe202b86351dd2710d8b8372ae12464dcab96544d81d831b82fbb2246289b45f4af30cb70f111ab9e01006d97a2fb9621a08177dc6a58d5f10de346235036510741a728b134e7ec1ae3fb288a1a1d8af3d102108e7fcb7e23d4f3760be61cc5d7d1468f05fa94c0dc77101e3cc2756010d0beee2972418fe0f5069159434da39fa9464253742d7e410cf11642b81b38523d31c49014d861c66cadc5a6ebda82faae5b1d3e9ee032a1429ee9782314593a5e455df12a1f4094ad535138f8f10c06b11438aabc5d41e08ed4279bef25baa0679346bea50d6144064ebc86c52ef5d2c512f628515b55207369d6c50d258b2373b1f93960d45da5c26081276eb6f12e9d140787887d97e61a6eee5dc2a5e6bc433b2375a1e2200640b6a4d2f893c71e66f032054790f0ae65d0df8f080d4e7887262d002a55c67c059b0c21142a71cb3258952eae2d93443a85aca5436dbd4e5e0ff00507837c80e798912cdeae56c792ecf5196af9e6013b84e600f12a2ab0bfad7fcc60ce5c4a58d1660a711c8c29b224a5548abf50bf00518866a52bc780f2f060881737179ff0032a90491ab5e3e46430438dab8dfebb060cc0adb9af984dc0f0b4e053f26886011d5aff28ff3320c9b2c456b545f1842eee6e91e2075e1347199a86aeeb9e986c62054d01d0f0f0b12c20202ae690ee5d8ae28de94e41ebd4b36b9d5216e75e0990d23742ab8136881c41155e01310e4af0302833d964dff0098fa04052d0720960ba8cd2b5fd9b2caf3ace13f653c1702742152afd583906446af888845f0082798711ed0f965a3650438941c4dcc95529c323a16e6a62f8572d025705704e13de2825488da523512a19b01973909e2014023e6576d8b9335e821bda7fa8931ac9ab8d1d500757dc4ab2d797e22f208f10699645a540b2ba8862fce03f948ae501547ccbce89738351d1a129ee5e53aae021b21ad37804ac2780863c109852e2cafb403a21874797b9782dcadc26ef22eddca6e7c155b76a58624ab175b4412f047e070279c9813048d0dff0011e7011c6c99cc2c33621162b7dcae6419380a17cd412cb4ef2fb7a89488cab8ef371ea2b5c411e6f894662856d1f6cbf4003763af1ef8830adfd0f15515432072f4bb8cb148cb51eded97669b34b5a7d64bc10016b1c808f89abc5d041aad9b0100ec556312a55c15c4abc972dea3b6fe141446a3762513cf3448144af733a9534c20c80d96cbad12c86a175f007a809c4aad2347665371882fc11ad3483079b8dd54f3fd849c0bac40052f71746752b7530e23e30a36386e2a6da010380aea55f70b59ccf0a3b69b96eb858b7fea5541b5c91034bb137d40ef9cdc61c53c44a89380f5f51214a8ab857d69e2db44a1ce61bafb837b4b99842d014bf8bfa9614015d5576afa88fab56586d1ea58da8c2137cff7a94a692aa0fec2598412bcb1941d9558e1c93bc9ea55ab07cc370944b0de18d1c2a6fac6ea5e8259ccb0b0ae5c6cb4773a531144a2f225bcc07a452051062b3e008af1112ea9644a8710010054e612d6a2dbf805181e4215512e38faf9621977046be25e0d0aefd4c3111ad398f6217c019cb2d1557538794aca66932c08f46ed33e896e157d451463f52e9ad7c06f840d61977083b02b89a32c0d798bd0e22bfa99eae5b5eab20c59a3650d3a4afa028b3a95a10b755dc0919b4525f159c4710559c4a4b16b9589b229e3e1151d5ffd0c1d46584385010b65bfc8749e4824f52c6eb2053444ecff0014e8882ed0210e7e91497be628143c9440c821e90366a1cc5535204daaa7d9108ce52b65447e433c88cc6736c13ee0d53772a504f47c27298e86187d23896c96af630b52c6542c44c222702146e8a0e626b9b1d5b04b6cc87585752914deaf985bcff889467306fa81466c5c0ea2de2a3ce1037ee0d5abe087260f79113c9309e7cc6dbd212eaa516fb540d3e1611deffcc38fa43d4ce03058a3fca738b82f89c251f516e6cab6c6664682b58368412644c6b26be2ba2a609fb1e68c8d60a4a6645ee11951254a8e4b580fbc98e7696bba9539c40ce3b96c010bed1a5818f78b887a525f42ab898ab18b224d1a44ca40bc225fdc5962512e18d2ef98aca3d4d8059cb10a559831a502f0ea02ded72ae49403a131a96e061ac3fd8b73a363818a31af80da98e43a4b54c0a3773b87ecb28a257a4ffa8e9294783e845971a97187a6d1a90b2b65702a035d144b5c94094a4103ad4a0071055a30e186c4189516b738537998162800949dc384b6a79095080a5c29b1647041719687a8bed57dc306e8581717505e5b0983925fc2593964a765dce4a531da49a73a94ad04b175292014c2b5c40d97e228e0f12ba0ee3a6e523fb3ccdf2cb4e182e1e089e45bf732df62c08428e88806828e5170d6f8aea082db783fe604069bc0ee0990a2e99714574ed8b60f9a35640b1674f3fb2b4403aad62322aefcc4eae453f2152c5d2942de88c01fdc96259503aa88e8d37d26d6aa9c3f60cf0f04afb97b44a8141440e0f8385c984b73afb861c9e65abe4f3386270a90e8a991530271e7c63a80ab168ba85dac1445c2222d64df6d2441f1a639d030da9a7fdc185fc8cf8e0d46a441af8b942400e221a81522a44eb2988add45cc27252f3bd832e712e2dc63c413c306f304ac7658ef310e162aeed9e06925b458b58c451792ce0ca0adfca9975fc873656b45f711c03c111b2da793cc55df01e25029abdc5dc6dfd8cf26a52e52f08dad99f338aad046c80227003c4b06cc54ba9dcb57a30819172523c4ac83cc293085e4e562f2c21c610232d62244350ba1659bd090968aa99455e0b8a09e99cf12abe585661e2724a70f30a8b101f6c4d9fb28e9b6627128cbede21bc0081da2bfe22729513b65571b2a3cc113986c6313263276894393a722f532cbed05cb7e7c2c535101b66ee78e4f30a14772e34d6de04c3f04e032a651539851357961b92d3984b45085b7085108232e01d6c1c2a1dd542e2a3d524f5cacd854396668c0254a2416c032b462dca5b6771525db48446c536943b8f64b04457173f611f8e49a8e2a7254c277c08638177440692d691e39828222902c62ec6f8ed5b67f655e2258e7820c9b131b3506e5097140c1dc367287ea7a1fc4716dc528f99d5c5b5a899e21b58b222d98340ec52b28e6d620142f9578220203d9dc20df9512e0d9f048a119e3c2392a470752a6826fdc32fa8870d04f32098b0e98ecb7855441696f108255f6cad2779860d6c104da6b2d94f1338f5f0820732a064120219e659c31379960a84460b00760716ad97225cb0cd764ae3f21ea245423c333eda95784d972e3a42dbe2a00bcec6e6b8515565cd251ea125b903798cf0042069494b58f8f96750723b1e60237146b5d620d808a0d4558a0f12b0ecc7b95b9a7b8556f41c128d0ce0b81592fc45c0aa572c003feca8b0004430a089d2c5b31a72e46a85f5f9c82ca28c58574d8f715343a102ecdcc82db88b843edc2d364fc212929e279fe3a667b08e732bc30200853a83a8b50fccdf26fb3235712a70ea045bfb02812464d5e1529bd00bcc0619591f229e51071647c05a7106f98295c05cb1c067b4a545b0037e6640d4ee551e6c5d4df37f50550c36868adbf318f11e22e64b8b1efe3b9a8b951687cc6fb9d4eee2d2c0b6e2edc55d9176d799c4f872e653a2744d306a97f53128da6bcc650b043717ea2b6dc2b96b1ee208504d67a211c4f5caa1c010668e6008860067a8779a83a8a117c4a5d810af04d284505b2f69f0d8cab0a788cbcd0a9b24b9fb9983b1e48b026ed532aa6588f10aeadfec1cda3460aa26455df30906af8b81e5577f529f03dcaf404140489a21b96d41b0a84b0db9acb97f06162e3f0b50b5f732699a983239331e180a955c7c90f31286a5799a61348ff00a107a597f98438b5856d410610f0097564b926dc4f4c55e0f88f446b4a8c975b17b2f8815054c6182013213169420843b88144589b4c8f538a954de7a8e0b425c06b1ab12d890fa8d56ecf329e42daea36b1e05c01525e4536e2c00f9a836f0953556e496d0bf6983269c4aab257591089bbca062d0c328e1d710a8ce1ee5c374ba7115e07d18e27a6e516061c97c41b6e9a8b77994fb8449d5419164e23ceca7530b700fd8bc4a0b7fdb874f50a1388c7560f1cc1bb0a6ed9b9933e25400474325f5703c4eea94f52b992d9f7933b640e2eb02707c28789a85fc4a4b4bac1dd4565b751cd25855951afe44416e1633ac9d90dc613869a7a95b017cc1655d263d5d80565402b138838597afa882d66351b9af0f502a1228184aba252710c2a50f1312dcec06a62c702979a626c91b0790ab9c62528be31289a46f83b1827b4aad812ae4d9c2436a4edd89501e546a5ac6aaac15b4eeee22b9ac58c0d0959c11bd8ae53637b5f3a8840bfa4096bb478ee270acb57885c4c6167ebc4b451e2a56b034af994740f818e1555ea668a958b938b2644d898712a34947552a0aa854d82c5341b8222dbe212a10cecb423c934389f8947a9e3ab88d4a57c465ceafa9b442a295121c3d4201716282d8daa5a8ffee0cdc3306b26f51d1123b40330d2305a413cc3656ae01b11b6cb6953b3ff000438b86ac1048490d2107c6e0a8d122588f104d4c1fac127a2a18da777063a46713c7e25a8858deb5c460c11390b11d458ca00a978226051a0606240329b086c2fb28915d60ff289617020acf11aa25d2afa86006c564bd710ec3f516bc0ac1b67b9732b422900d03b60236ad3c403560d1ed8ae6402c2e38164d084cc8054006013d51647052dc06bcc7d16f883d0102961539554fa5f03bdfce03f045c35e63cbab8b53b7dcb1871e22d5fe218519ee3bab903bad7a11020328983e7aea2e90a51b87944ae2a174a85783981cc87e23599518021d84a13822868417a95f529389cb88e9c8eef09e22235bab83b01c3865db9f3c365c8d2a5706335c45af04d6836f33870da615b8434a96240354f31002df04bb6029f265907365752c247514ef7f5751322dd9cf21956faeb7353505e0814c968b59c741acca8844154d7300d65ca203a0d8316cf59c7e10b870861a101e97281c144a30ff13faa0c323a7f8805401ea7b93eb00a94f1332c8f551c9654b95f330287be0717f40a7fcc41aff497aa06955e503fac20263eed97b818b407e603405d8a5253a880e907c4a4af98f84a88b815c00498e47cb8060e4ff12c8f8236ebe1772b231f29d482298dea0456e21c3d416175d5c0fd711a49e5f941a0268f6ca5514e1f11c3281b7a83428a2f2bba641c28625731207a7a2251111e221267fcca8c846c1cb1e003b0753237be585719a8899388f02a36ba2bea1bc1f71b0a9d8463fc8c2832be014c6fc4ea0479a9f695916a2e13940bdf51cad13835b97572f2b15721fa9c8674820000078152ae986ed425b060478788201b20ce21da88400a3ccaa1892aa7719a99135ee0860aa166120ca74cfd8bf7291a62365e403a26992fb4a05df6ce458ca0c5101c84a8361ea21da59c9f8c17494704aba8776c42c8895d60aca4a9964bf02bea0daa0f71609fa116daa17404a8be26d92c360c35dce49591ab83765312e0239c418839865ec3d45015a797cca08d9f83ea07988f8b6da80f528510e544c2456547ca78d64638880d235acdeb2882ae5b7c4ab9538dbf8d2643b21d61ef1fa42c6c41e65a3bcf98840f28401e09a72abd45f94bf87f9109c3fc8fff004451c0bf92cffd11eafe12fa4297696f43f62ae8117c98771fb33863fb2830a964f52d5e63e67715d8949950180dc3ca067c291111d47ca2175de960d1cad8d1f4c316b77dca706a5aff00ea5bf14e32acce2621c44bf87b7c5c4b62f312093a89e44c14820c8c174fab83d4d710736092e99ae25d10596cb7cc5e51a9b0bf70def1290977f12194389edc47c043a949e08ab2db1b6e523b132064b4708fc04dba9af9d2544a2e3c47568f137b0b572c8457b88578f717165e7c20551ac8c68320a5be5973b802c7e2fe2a3289624c3733dcb1a620fc072a4e02e6f30855bb3cfb855e4e195b7065e730a4e6706416a6860a8b92e2d170a7e08b5151752ee2091e633cc5c8711d6751c8f13ab82e50752a7530e3357c45437ccb557985dbf4f52a8f88205bb9a054df921f41ada57108fd897b72005278a22dd95bab890bb9ec2207314bb98434c37ff108da32109698cac4138990c6ee39ba59c90e4455243672d41ebe1615ff008f71e631716e75915c5c62ff00218976ca8f110dcaf71c97518be66d144e55dc70da9a2e905ee7a45c44475cf117b2ff00704d2fb481a53b09773efca18820e584a84652a35492f6e65506ab2d897c45ad8de9835cb1bbe616f3b0ce1a63b103b7793aff00c7f254d308b2a88e996ea0a25636a21ed1ba843eb2398949ff001111bda8a4142cb6b16ea296973c1cc1b8b7d418a5cce62dd37ee6b770320a8d24a202b2707d412d47b2704bc8b932a595294f129e65ef1fc853436727714d006cb788e72fad339281da980c08512c1a9c46722479a42307ae1ae2546223c4e216586e32fbb86b2abb4b97b08fa456e18bed9c3181ef2520603b94468834f0cb97ff0093b1c4ac61e51e682074ba9728674316045aee0d43259b03c32aed91a61d4b8eb34ec10a1efdc45ccd6ca669be2778c4a22d43a5a7f67d89699a7d44895c6dbfc546097755155da031b5f51b08b83cc1645a37885bd060cc1bc612dd6f92b89b8d9e329482cd32bba7963034ec705f350d58d5dcc5d1b2b057d207259b537e35970854d40da52816e5f6c3e4d223a5496b5156c52f9fff00958e6750efff001ea3d47e198e21cfc4e65b4eb05dfa86e9788d67b8800855422512c7128711ea401cf30e639e1357702f88c2cabea7f8789ed384e2fbf8a153c6c787d711f083c28fc94ea8a32a3b48a2adf8a0355d8fa8dbb5d079d86abfa44141581e2fdca98a975c45560065969c8c6f946af27cb14f2dc6798c254615421b67163cbf01aefc13ffd9, '1223', NULL);
INSERT INTO `stocks` (`id`, `name`, `subscriberid`, `current-number`, `initial-stock`, `itemcode`, `amount`, `category`, `image`, `price`, `supplier`) VALUES
(2, 'BENTLEY MULLSANE', NULL, NULL, NULL, '2', '3000', 'BENTLEY', , '3221', NULL);

-- --------------------------------------------------------

--
-- Table structure for table `stores`
--

CREATE TABLE `stores` (
  `id` int(11) NOT NULL,
  `name` text NOT NULL,
  `owner` text NOT NULL,
  `description` text NOT NULL,
  `location` text NOT NULL,
  `employeenumber` text NOT NULL,
  `image` mediumblob NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `stores`
--

INSERT INTO `stores` (`id`, `name`, `owner`, `description`, `location`, `employeenumber`, `image`) VALUES
(1, 'nanotech softwaresoutlet', 'admin@admin.com', 'it is ashop where we sell softwares and create software for the customers', 'Nairobi', '45', );

-- --------------------------------------------------------

--
-- Table structure for table `subscribers`
--

CREATE TABLE `subscribers` (
  `id` int(11) NOT NULL,
  `companyname` text NOT NULL,
  `companyemail` text NOT NULL,
  `companyaddress` text NOT NULL,
  `adminpassword` int(11) NOT NULL,
  `stocksid` int(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `suppliers`
--

CREATE TABLE `suppliers` (
  `id` int(11) NOT NULL,
  `name` text,
  `email` text,
  `phoneNumber` text,
  `location` text
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `timers`
--

CREATE TABLE `timers` (
  `id` int(11) NOT NULL,
  `employeeid` int(11) NOT NULL,
  `check-in` datetime NOT NULL,
  `check-out` datetime NOT NULL,
  `letter` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

-- --------------------------------------------------------

--
-- Table structure for table `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `employeename` text,
  `subscribername` text,
  `rank` tinyint(4) DEFAULT NULL,
  `email` text,
  `admin` tinyint(1) NOT NULL DEFAULT '0',
  `password` text,
  `activated` int(11) NOT NULL DEFAULT '0',
  `status` varchar(20) DEFAULT NULL,
  `employeeid` text,
  `hash` text,
  `subscriberkey` text
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

--
-- Dumping data for table `users`
--

INSERT INTO `users` (`id`, `employeename`, `subscribername`, `rank`, `email`, `admin`, `password`, `activated`, `status`, `employeeid`, `hash`, `subscriberkey`) VALUES
(1, 'admin', NULL, NULL, 'admin@admin.com', 1, 'c7ad44cbad762a5da0a452f9e854fdc1e0e7a52a3815f23f3eab1d8b931dd472634dfac71cd34ebc35d16ab7fb8a90c81f975113d6c7538dc69dd8de9077ec', 1, NULL, '34556470', '641b276a48ca927a99446eeffb4a3af4', 'q'),
(2, 'test', NULL, NULL, 'muemasn@nanotechsoftwares.co.ke', 0, 'ee26b0dd4af7e749aa1a8ee3c1ae9923f618980772e473f8819a5d494edb27ac185f8a0e1d5f84f88bc887fd67b143732c34cc5fa9ad8e6f57f5028a8ff', 1, NULL, 'test', '8fa59888c91207811c306769a4dab769', 'q'),
(3, 'mwende', NULL, NULL, 'mwendemich@gmail.com', 0, '9b4352e074e93890a55d659e3eb6863dcfdcba430d86492ce254c3c75b4a809fd120bc5a11adea61dc5d3ad32b1a7718146f82af6ec1b8294889a0da71', 1, NULL, '34638088', '8e12cc3d25d84c9e85a070bb99b0be50', 'q');

--
-- Indexes for dumped tables
--

--
-- Indexes for table `audits`
--
ALTER TABLE `audits`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `carwash`
--
ALTER TABLE `carwash`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `chats`
--
ALTER TABLE `chats`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `sales`
--
ALTER TABLE `sales`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `stocks`
--
ALTER TABLE `stocks`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `stores`
--
ALTER TABLE `stores`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `subscribers`
--
ALTER TABLE `subscribers`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `suppliers`
--
ALTER TABLE `suppliers`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `timers`
--
ALTER TABLE `timers`
  ADD PRIMARY KEY (`id`);

--
-- Indexes for table `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT for dumped tables
--

--
-- AUTO_INCREMENT for table `audits`
--
ALTER TABLE `audits`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `carwash`
--
ALTER TABLE `carwash`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=10;

--
-- AUTO_INCREMENT for table `chats`
--
ALTER TABLE `chats`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `sales`
--
ALTER TABLE `sales`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `stocks`
--
ALTER TABLE `stocks`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=3;

--
-- AUTO_INCREMENT for table `stores`
--
ALTER TABLE `stores`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=2;

--
-- AUTO_INCREMENT for table `subscribers`
--
ALTER TABLE `subscribers`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `suppliers`
--
ALTER TABLE `suppliers`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `timers`
--
ALTER TABLE `timers`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT;

--
-- AUTO_INCREMENT for table `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=4;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
package MasterClasses;

import javafx.beans.property.ObjectProperty;
import javafx.beans.property.SimpleIntegerProperty;
import javafx.beans.property.SimpleObjectProperty;
import javafx.beans.property.SimpleStringProperty;

public class CartMaster {
    private int counter = 0;
    private SimpleIntegerProperty itemCount = new SimpleIntegerProperty();
    private SimpleStringProperty number = new SimpleStringProperty();
    private SimpleIntegerProperty itemId = new SimpleIntegerProperty();
    private SimpleStringProperty itemName = new SimpleStringProperty();
    private SimpleStringProperty itemBarCode = new SimpleStringProperty();
    private SimpleStringProperty itemPrice = new SimpleStringProperty();
    private SimpleStringProperty itemNumber = new SimpleStringProperty();
    private SimpleIntegerProperty itemCumulativeCost = new SimpleIntegerProperty();
    private SimpleStringProperty transactionId = new SimpleStringProperty();
    private SimpleIntegerProperty totalprice = new SimpleIntegerProperty();

    public int getTotalprice() {
        return totalprice.get();
    }

    public SimpleIntegerProperty totalpriceProperty() {
        return totalprice;
    }

    public void setTotalprice(int totalprice) {
        this.totalprice.set(totalprice);
    }

    private ObjectProperty storePic = new SimpleObjectProperty();
    public int getCounter() {
        return counter;
    }

    public void setCounter(int counter) {
        this.counter = counter;
    }

    public int getItemCount() {
        return itemCount.get();
    }

    public void setItemCount(int itemCount) {
        this.itemCount.set(itemCount);
    }

    public SimpleIntegerProperty itemCountProperty() {
        return itemCount;
    }

    public String getNumber() {
        return number.get();
    }

    public void setNumber(String number) {
        this.number.set(number);
    }

    public SimpleStringProperty numberProperty() {
        return number;
    }

    public Object getStorePic() {
        return storePic.get();
    }

    public void setStorePic(Object storePic) {
        this.storePic.set(storePic);
    }

    public ObjectProperty storePicProperty() {
        return storePic;
    }

    public String getTransactionId() {
        return transactionId.get();
    }

    public void setTransactionId(String transactionId) {
        this.transactionId.set(transactionId);
    }

    public SimpleStringProperty transactionIdProperty() {
        return transactionId;
    }

    public int getItemId() {
        return itemId.get();
    }

    public void setItemId(int itemId) {
        counter++;
        this.itemId.set(itemId);
    }

    public SimpleIntegerProperty itemIdProperty() {
        return itemId;
    }

    public String getItemName() {
        return itemName.get();
    }

    public void setItemName(String itemName) {
        this.itemName.set(itemName);
    }

    public SimpleStringProperty itemNameProperty() {
        return itemName;
    }

    public String getItemBarCode() {
        return itemBarCode.get();
    }

    public void setItemBarCode(String itemBarCode) {
        this.itemBarCode.set(itemBarCode);
    }

    public SimpleStringProperty itemBarCodeProperty() {
        return itemBarCode;
    }

    public String getItemPrice() {
        return itemPrice.get();
    }

    public void setItemPrice(String itemPrice) {
        this.itemPrice.set(itemPrice);
    }

    public SimpleStringProperty itemPriceProperty() {
        return itemPrice;
    }

    public String getItemNumber() {
        return itemNumber.get();
    }

    public void setItemNumber(String itemNumber) {
        this.itemNumber.set(itemNumber);
    }

    public SimpleStringProperty itemNumberProperty() {
        return itemNumber;
    }

    public Integer getItemCumulativeCost() {
        return itemCumulativeCost.get();
    }

    public void setItemCumulativeCost(int itemCumulativeCost) {
        this.itemCumulativeCost.set(itemCumulativeCost);
    }

    public SimpleIntegerProperty itemCumulativeCostProperty() {
        return itemCumulativeCost;
    }


}